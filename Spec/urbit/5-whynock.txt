Urbit namespace  (300K)
C. Guy Yarvin, 1/21/10


5. Urbit and Nock

First, it's essential to remember that Urbit is not magic.  The
mapping [path deck] => [file] is not a magical interface.  It is
a normal problem in functional programming.

Therefore, we come to the essential question: why should Urbit be
written in Nock/Watt?  Or in any Nock language?

The answer: like any function, it could be written in any language.
It will be written *best* in Nock/Watt, however.  And since the
function is intended to be permanent, it should be written best!
However, I don't expect you to take my word for it.

Since we want Urbit to be an application server, not just a data
server, there is a problem which renders certain popular
functional languages fundamentally incompatible with Urbit, or at
least inferior as applied to it.  

The problem is that these languages are not designed for
metacircular evaluation.  They are not designed to convert
runtime data into code, then execute that code.  Or at least,
this operation - 'eval' is not a natural operation for them.
A second-level interpreter would be needed.  But this violates
Occam's razor - why not just use the second level as the first?
And, if they are the same, why implement them twice?

The problem is even more serious with Algol-type imperative,
side-effect languages.  Why formalize a functional problem with a
non-functional language?  That's almost as bad as writing Unix
applications with a functional language.  Impedance mismatch.
Functional languages in Unix may make good *pipe filters*, but
they make crappy applications.

Don't try to use an imperative language as a formal description
of a function.  Again, this is hammering screws.  If the formal
description cannot be executed efficiently without an Algol-type
language, write the inefficient parts over again in an Algol-type
language.  Then, make sure your two implementations match!

It's true that a Java application can extend itself at runtime.
But class loading in the JVM is not exactly a lightweight process
subject to unambiguous mathematical description.  I certainly
haven't heard of anyone using it the way Urbit must; and it is
certainly not designed to solve any such problem.

Watt, or any Nock language, is perfectly placed to implement an
Urbit-type environment for two reasons.  

One, since eval (3) is the way you always do control flow in
Nock, it is very natural for Nock to eval a formula.  Since Nock
formulas are just nouns, it is also very natural to convert
source code to Nock formulas.  The result: it is very natural to
run code out of the deck.  Try that in Haskell.

The second reason, which is more subtle, is that a second-level
Nock interpreter (a Nock-in-Nock) is a few lines of code in Watt
or any other Nock language.  It can be both easily modeled and
easily implemented by jet, without any performance degradation
for even deep metacircular stacks.  Try that in Java.

(The only language family that satisfies these basic needs is the
Lisp family.  Indeed, at a stretch Nock/Watt can be considered a
Lisp dialect, though a mighty strange one.  It is one designed
for this problem - that's all.)

Deep metacircularity can be used in two ways.  One, for
debugging; two, for extending the semantics of Nock/Watt code.
The first is obviously essential.  The second may not be
essential, but it can be quite useful.

For instance, one neat thing we can do: extend Nock with a 7
operator, which calculates the Urbit function - on the current
deck.  This is an alternative to executing with that deck as
current state; because Urbit is a static namespace, the results
of this interpreter are referentially transparent, and can be
cached and reused even after new cards arrived.  Obviously, this
would not be the case if we just dropped the deck into the
subject, as we normally would for a system of functions that
shares some structured context.

In this extended interpreter, dereferencing Urbit paths is as
natural (and stateless) a function as increment or equals.  Of
course, a simple extension will not do what a naive user might
expect - actually send requests to *fetch* those dereferences,
if they are not yet bound.

This, of course, requires an actual browser service.  But an
actual browser service is also not too hard to build.

