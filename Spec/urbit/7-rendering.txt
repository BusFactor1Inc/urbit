Urbit namespace  (300K)
C. Guy Yarvin, 1/22/10


7. Structure of the Urbit namespace

Thus, the magical statelessness of the Urbit function disappears,
and we are left with two rather pedestrian functional interfaces:
urbit-render and urbit-infer, where
 
  (urbit-infer card state) => state
  (urbit-render path state) => file

Such functions are obviously quite practical to implement,
whether in Watt or any other language.

Having secured our implementation flank, we ask a simpler, more
basic question: what do these functions *do*?  In other words,
what is the structure of the Urbit pathspace?

Recall that a path is

  [$fort $position]

We have already seen what a fort is.  What is the structure of a
position?  And how do urbit-infer and urbit-render decode it?

First: urbit-render must make one essential distinction by fort.
Either it renders in *foreign* mode, or *domestic* mode.

How is this selection made?  If a deck D contains the secret
needed to act as any fort F, we say that D *holds* F.  In theory
it is perfectly possible for a deck to hold multiple forts.  But 
in the common case, it is one deck, one fort.  There is certainly
never a good reason for one fort to be held by *multiple* decks.

If D *holds* F, D renders F in domestic mode.  Otherwise, D
renders F in foreign mode.  Rocket science it ain't.

What does this mean in practice?  It means that an Urbit host 
runs the internal applications of the forts it holds, and uses
the external publications of the forts it doesn't.

In other words, for the forts it holds, an Urbit implementation
is the server.  For the forts it does not hold, it is the client.
Again, your rocket-science detector should not be activated.

The domestic/foreign separation classifies the first level of
the pathspace.  Positions are divided into six *forks*:

  %act      :: active
  %nat      :: natural
  %raw      :: raw
  %syn      :: synthetic
  %pub      :: public
  %exp      :: export

%act, %syn, and %nat are all inherently domestic - they fail if
applied to foreign forts.  Domestic rendering, of course, can
express %pub and %exp.

Within each fork, the same internal structure is replicated:
  
  $path == [$fort $position]
  $position == 
    [%act $app $tick]
    [%raw $app $limb]
    [%nat $app $limb]
    [%syn $app $limb]
    [%pub $app $limb]
    [%exp $app $limb]

As we see, every application defines (in some way - as yet
undefined) its own internal namespace in each fork.  The
exception is %act, which gets a tick - a card sequence number,
ie, the depth of the current deck.

Let's broadly explain what these forks are, and see the Urbit
application model.

Remember again that Urbit is divided into urbit-render and
urbit-infer.  Obviously, all paths are resolved by render -
but all computation is done either by render or infer.

Therefore, we can speak broadly of inferred and rendered forks.
In an inferred fork, urbit-render is just a search - all the work
is done in urbit-infer.  In a rendered fork, 

For a domestic fort, therefore, we see:

  %act      :: inferred
  %raw      :: inferred
  %nat      :: inferred
  %syn      :: rendered
  %pub      :: rendered
  %exp      :: rendered

For a foreign fort, we see:

  %pub      :: inferred
  %exp      :: rendered

Note the difference in %pub.  There is no great mystery in this;
%pub, domestically, is rendered because it is computed from
domestic data.  Remotely, it is inferred, because reconstructed
from transmitted messages.

As for %exp, it is rendered on both sides.  From the client's
standpoint, it represents client-side rendering - eg, %pub could
transmit HTML, and %exp could translate it to PDF.  Of course,
the semantics of %exp are the same on the server, although it may
not often be employed there.

Basically, %exp is a client-side static functional namespace.
%pub is a client-side static file namespace.  On the server,
however, %pub is computed functionally, just like %syn.

How do we infer a binding in %pub?  Some network protocol
assembles a message that is correctly signed by the legitimate
fort.  This *statement* conveys one or more bindings - to be
applied atomically, of course.

For functionally computed bindings - or any function, for
that matter - we indicate the function by an Urbit pointer to
the source - presumably as released by the built-in source-code
control application, %src.  Ie: [$fort/%pub/%src/$program].

In a Watt Urbit, this source code is of course in Watt.  In an
inferior, *off-brand* Urbit, it's whatever metacircular model
your inferior, *off-brand* language can scrape together.

When the Urbit functional kernel invokes user-level code in this
manner, it is always in one of two contexts: inference or
rendering.  The familiar urbit-infer and urbit-render again.

Inference is *learning*; rendering is *knowing*.  Before Urbit
can decode a path, it must construct state from deck.  It must
*learn* the deck.  Once it learns the deck, it can *know* it.

Thus we see %pub (domestic), %syn, and %exp as basically the same
model.  Again, these are rendered paths.  In urbit-render, they
compute some arbitrary function - defined by the app author -
of the path suffix.

This computation is *enlightened* by an extra Nock operator, 7,
that computes Urbit itself.  In this extended metacircular nock,
dereferencing Urbit is as simple a function as increment.

Situations in which Nock requires metacircular extension in this
way are the exception, rather than the rule.  Normally, we would
just map both the urbit-render formula and the state itself into
a single subject.

However, we can take advantage of the fact that Urbit is static,
to treat it as referentially transparent in practice - for
instance, caching results across card processing.  If the state
is directly visible to the renderer, referential transparency 
is lost.  But since Urbit is static, this super-Nock is stable
across new cards, even though 7 depends on a changing state.

This is cool.  But it means we need to take some care to ensure
that Urbit *is* static!

For instance, in rendering we have 7, but we don't have 8 - a
boolean operator that tests whether a path is bound or not.
8 is obviously not referentially transparent.

When running user-level code in *urbit-infer*, however, both 7
and 8 are legit.  Metaphorically, infer is "push" and render is 
"pull."  Pull is clean; push is dirty.

Also, when inferring, we always know the tick (card number, from
oldest to newest).  When rendering, we never know the tick - the
result obviously cannot depend on the tick, but must be
permanent.

What is inference, therefore?  It is surprisingly crude.

At the heart of urbit-infer we encounter the most traditional
of application models - the event loop.  One constant of system
software design is: there has to be an event loop.  At least if 
there is state.  And since there is no such thing as a stateless
server, there is state.

Iterating through the deck in a manner surprisingly reminiscent
of imperative programming, urbit-infer constructs that state.
urbit-render simply reads from it.  You'll admit, therefore,
that infer is simply more awesome and interesting.

Thus, we have our inference definition.  An app defines its 
inference function as

  [tick events state] => [events state]

Thus, an application in Urbit defines its inference part as a
single function that takes a current state and a list of new
bindings, and returns a new state and a list of added bindings.

The app's state is an arbitrary noun.  State, per tick, is
mapped into the Urbit namespace at
  
  /$fort/%act/$tick/$app

Events are simply bindings in any inferred namespace.  Any new
assignment of a path-file pair, foreign or domestic, is an event.
All events in all applications are visible to all other
applications - implying the possibility of a thick, juicy event
spaghetti, such as that found in the boot sequence of many
popular operating systems.  (Alas, even Urbit can be abused.)

(There is no security between applications in Urbit, because there
is no security inside a fort.  A fort's security is boolean.
Either it is compromised, or it isn't.  The owner must trust the
sysadmin, if there is one; the sysadmin must trust the hosting
service.  (Fortunately, in Urbit, either is as easy to replace.))

That said, event cascade is an extremely powerful programming
technique.  For instance, suppose you want to layer a message
protocol over the raw card sequence, and an application server
over that message protocol.  Obviously, a very common pattern.

A card is named by its sequence number, creating a binding.  This
becomes an event.  An event is a unit of *learning*.  We learn
that card 47 in fort $fort is 0xdeadbeef:

  (eq 0xdeadbeef (urbit /$fort/%raw/%card/47 $deck))

Or, as a noun, of course, the binding pair [path file] is:

  [[$fort %raw %card 47] 0xdeadbeef]

Except that bindings are not mutable, this should be a very
familiar model to Unix programmers.  Basically, on each event,
you modify your state (or, in functi

Obviously, events cannot be bindings in a *rendered* namespace,
because this would require us to invert a formula.  But inferred
namespaces are implemented by mere storage in the state;
urbit-render is a mere search for these values.

Every running app defines this inference function - again, by
reference into source.  (What apps are running at what tick? this
can be easily defined in a meta-app, much ala Unix 'init'.)

Again, inference is generally more interesting than rendering -
inference complexity can get out of control, whereas rendering
complexity really can't.

For each domestic application, inferred prefixes are:

  %act      state
  %raw      monotonic storage (input)
  %nat      monotonic storage (computed)

Rendered prefixes are:

  %syn      internal rendered view (static)
  %pub      public rendered view  (inferred on client)
  %exp      export rendered view

Each of these forms has an arbitrary stub on the end -
except %act, which is an opaque state noun.

  /$fort/%act/$tick/$app
  /$fort/%raw/$app/$stub
  /$fort/%nat/$app/$stub
  /$fort/%syn/$app/$stub
  /$fort/%pub/$app/$stub
  /$fort/%exp/$app/$stub

The stub conceals arbitrary application semantics.  The tick is
the card number, for mutable data that changes per card.  This
can still be referenced statically by functions that know the
tick; for instance, we cannot say immutably "the front page of
the New York Times," but can say "the front page... at 3:01PM
on Tuesday."

Let's look at the two inferred prefixes - %raw and %nat.

%raw is for bindings that are not the result of any inferential
process, ie, raw data.  The simplest way for a fort operator to
communicate with the fort is to sign raw data, and drop it into 
the deck.

%raw, in other words, is input.  %nat is storage.  Both %raw and
%nat are monotonic - once bound, they cannot be unbound.  %raw is
for bindings created by external or uncontrolled processes.  %nat
is for bindings created by inference.
