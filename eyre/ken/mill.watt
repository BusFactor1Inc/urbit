  ++  mill
    ~.  %mill
    |=  [gol=*type old=*(unit type) gen=*gene]
    ^-  [p=[p=*type q=*(unit type)] q=*form]
    =<  $
    &.
    ++  boil
      |=  sel=|%(*form)
      ^-  *form
      ?.(fab [0 0] $.sel)
    ::
    ++  coke
      |=  [nug=*form]
      ?-    nug
          [0 *]   p.nug
          [10 *]  $(nug q.nug)
          *       ~|(%mint-coke !!)
      ==
    ::
    ++  crow
      |=  [mel=*{%gold %iron %lead %zinc} ruf=*gene dab=*(map term foot)]
      ^-  [[p=*type q=*(unit type)] q=*form]
      =+  dan=$$(gen ruf, gol %noun)
      =+  ^=  dez 
          ?.  fab 
            [0 0] 
          (bake(sut (core p.p.dan [%gold p.p.dan [~ dab]])) dab)
      :-  :-  (nice (core p.p.dan mel p.p.dan [dez dab]))
          (bind q.p.dan |=(a=*type (core a [mel a [[0 0] dab]])))
      (cons q.dan [1 dez])
    ::
    ++  nice
      |=  typ=*type
      ?.  ?|(!vet (nest(sut gol) typ))
        ~~  (dunk(sut gol) 'need')
        ~~  (dunk(sut typ) 'have')
        ~|('mint-nice' !!)
      typ
    ::
    ++  whip
      |=  mog=|+([a=? b=*type] [p=*type q=*form])
      ^-  [p=[p=*type q=*(unit type)] q=*form]
      =+  voy=(mog vet sut)
      ?~  old
        [[p.voy ~] q.voy]
      =+  yog=(mog | u.old)
      ?.  =(q.yog q.voy)
        ~|(%mill-mate !!)
      [[p.voy [~ p.yog]] q.voy]
    ::
    ++  whop
      |=  voy=[p=*type q=*form]
      ^-  [p=[p=*type q=*(unit type)] q=*form]
      ?~  old
        [[p.voy ~] q.voy]
      [[p.voy [~ p.voy]] q.voy]
    ::
    ++  $
      ^-  [p=[p=*type q=*(unit type)] q=*form]
      ?:  =(%void sut)
        :-  :-  %void
            ?~  old 
              ?.(=([%zpzp ~] gen) ~|(%mill-eddy !!) ~)
            [~ (play(sut u.old) gen)]
        [0 0] 
      ?-    gen
          [%cslc *]                                                   ::  ?=
        %+  whop
          (nice flag)
        (boil |.((fish(sut (play p.gen)) (coke q:$$(gen q.gen, gol %noun)))))
      ::
          [%csdg *]                                                   ::  ?:
        =+  nor=$(gen p.gen, gol flag)
        =+  ^=  hiq
            %=  $
              sut  (gain p.gen)
              old  (bind old |=(a=*type (gain(sut a) p.gen)))
              gen  q.gen
            ==
        =+  ^=  ran
            %=  $
              sut  (lose p.gen)
              old  (bind old |=(a=*type (lose(sut a) p.gen)))
              gen  q.gen
            ==
        :-  :-  (fork p.p.hiq p.p.ran)
            ?~(old ~ [~ (fork (need q.p.hiq) (need q.p.ran))])
        (boil |.((cond q.nor q.hiq q.ran)))
      ::
          [%dgsp *]                                                   ::  :-
        =+  hed=$(gen p.gen, gol %noun)
        =+  tal=$(gen q.gen, gol %noun)
        :-  :-  (nice (cell p.p.hed p.p.tal))
            ?~  old
              ~
            [~ (cell (need q.p.hed) (need q.p.tal))]
        (boil |.((cons q.hed q.tal)))
      ::
          [%dtlc *]                                                   ::  .=
        %-  whop
        :-  (nice flag)
        (boil |.([5 q:$$(gen p.gen, gol %noun) q:$$(gen q.gen, gol %noun)]))
      ::
          [%dtcs *]                                                   ::  .?
        %-  whop
        :-  (nice flag)
        (boil |.([3 q:$$(gen p.gen, gol %noun)]))
      ::
          [%dtps *]                                                   ::  .+
        %-  whop
        :-  (nice [%atom %%])
        (boil |.([4 q:$$(gen p.gen, gol [%atom %%])]))
      ::
          [%dtsg *]                                                   ::  .~ 
        %-  whop
        ?:  .?(q.gen)
          [(nice [%cube q.gen %noun]) [1 q.gen]]
        [(nice [%cube q.gen %atom p.gen]) [1 q.gen]]
      ::
          [%dttr *]                                                   ::  .*
        %-  whop
        :-  (nice %noun)
        (boil |.([2 q:$$(gen p.gen, gol %noun) q:$$(gen q.gen, gol %noun)]))
      ::
          [%dtwt *]                                                   ::  .@
        %-  whop
        [(nice [%atom p.gen]) [1 q.gen]]
      ::
          [%ktlc *]                                                   ::  ^=
        =+  vat=$(gen q.gen)
        :-  :-  (face p.gen p.p.vat)
            (bind q.p.vat |=(a=*type (face p.gen a)))
        q.vat
      ::
          [%ktdl *]                                                   ::  ^<
        =-  :-  :-  (nice (fine %very (play p.gen) p.p.ryd)) 
                q.p.ryd
            q.ryd
        ^=  ryd  =-  $(gen hos, gol %noun)
        ^=  hos
        :+  %lcps  [%ktlc %a p.gen]                   ::  =+  a=<p.gen>
        :+  %lcps  [%ktlc %b [%lcld [~ 2] q.gen]]     ::  =+  b==>(.2 <q.gen>)
        :+  %csld  [%mtsp %a %b ~]                    ::  ?>  (a b)
        %b                                            ::  b
      ::
          [%ktld *]                                                   ::  ^>
        =-  :-  :-  (nice (fine %pure (play p.gen) p.p.ryd))
                q.p.ryd
            q.ryd
        ^=  ryd  =-  $(gen hos, gol %noun)
        ^=  hos
        :+  %lcps  [%ktlc %a p.gen]                   ::  =+  a=<p.gen>
        :+  %lcps  [%ktlc %b [%lcld [~ 2] q.gen]]     ::  =+  b==>(.2 <q.gen>)
        :-  %brsp  :+  %ktsp  [%mttr %a]              ::  |-  ^-  *a
        :+  %lcps  [%ktlc %c [%mtsp %a %b ~]]         ::  =+  c=(a b)
        :^  %csdg  [%dtlc %b %c]                      ::  ?:  =(b c)
          %c                                          ::    c
        [%mtlc [%% ~] [[%b %c] ~]]                    ::  $(b c)
      ::
          [%ktsg *]                                                   ::  ^~
        =+  nef=$(gen p.gen)
        ~~  (dunk %ktsg)
        [p.nef (boil |.([1 ~|(%mint-burn .*(burn q.nef))]))]
      ::
          [%ktsp *]                                                   ::  ^-
        =+  hif=(nice (play p.gen))
        :-  :-  hif
            (bind old |=(a=*type (play(sut a) p.gen)))
        (boil |.(q:$$(gen q.gen, gol hif)))
      ::
          [%lcld *]                                                   ::  =>
        =+  lem=$(gen p.gen, gol %noun)
        =+  soq=$(sut p.p.lem, old q.p.lem, gen q.gen)
        [p.soq (boil |.((comb q.lem q.soq)))]
      ::
          [%mtlc *]                                                   ::  %=
        
        %+  whip
          vet
        |=  [
        =+  lar=(seek %read p.gen)
        ?-    -.q.lar
            & 
          =+  fup=(emit p.lar [[p.q.lar [& ~ 1]] ~] q.gen)
          [(nice -<.p.fup) q.fup]
        ::
            |
          =+  fup=(emit p.lar q.q.lar q.gen)
          [(nice (fire p.fup)) [9 p.q.lar q.fup]]
        ==
      ==
      
      
      
      
      
      
      
      
      
      
      
      
      ::
          [%lcld *]                                                   ::  =>
        =+  lem=$(gen p.gen, gol %noun)
        =+  soq=$(sut p.p.lem, old q.p.lem, gen q.gen)
        [p.soq (boil |.((comb q.lem q.soq)))]
      ::
          [%mtlc *]                                                   ::  %=
        %+  whip  vet  |.
        =+  lar=(seek %read p.gen)
        ?-    -.q.lar
            & 
          =+  fup=(emit p.lar [[p.q.lar [& ~ 1]] ~] q.gen)
          [(nice -<.p.fup) q.fup]
        ::
            |
          =+  fup=(emit p.lar q.q.lar q.gen)
          [(nice (fire p.fup)) [9 p.q.lar q.fup]]
        ==
      ::
          [%pmdg *]                                                   ::  &:
        (crow %zinc [%dgsp [~ 1] p.gen] q.gen)
      ::
          [%pmdt *]                                                   ::  &.
        (crow %gold [~ 1] p.gen)
      ::
          [%pmmt *]                                                   ::  &%
        (crow %lead [~ 1] p.gen)
      ::
          [%pmps *]                                                   ::  &+
        (crow %iron [%dgsp [~ 1] p.gen] q.gen)
      ::
          [%sgld *]                                                   ::  ~>
        =+  hum=$(gen q.gen)
        :-  p.hum
        %-  boil  |.
        :+  10
          ?-    p.gen
              @   p.gen
              ^   [p.p.gen q:$$(gen q.p.gen, gol %noun)]
          ==
        q.hum
      ::
          [%zpcm *]                                                   ::  !;
        :-  (nice (play p.gen))                    ::  XX validate!
        [1 q.gen]
      ::
          [%zpcb *]                                                   ::  !_
        ~~  (show %o p.gen)
        =+  hum=$(gen q.gen)
        [p.hum [10 [%spot 1 p.gen] q.hum]]
      ::
          [%zpdx *]                                                   ::  !#
        ~#
        $(gen p.gen)
      ::
          [%zplc *]                                                   ::  !=
        :-  (nice %noun)
        (boil |.([1 q:$$(vet |, gen p.gen)]))
      ::
          [%zpmt ~]                                                   ::  !%
        =+  pet=seed
        [(nice p.pet) [1 q.pet]]
      ::
          [%zptm *]                                                   ::  !;
        =+  vos=$(gol %noun, gen q.gen)
        :-  (nice (cell (play p.gen) p.vos))      ::  XX validate!
        (boil |.((cons [1 p.vos] q.vos)))
      ::
          [%zpzp ~]                                                   ::  !!
        :-  %void
        [0 0]
      ::
          *           
        =+  doz=~(open ap gen) 
        ?:  =(doz gen)
          ~~  (show [%c 'gene'] [%q gen])
          ~|(%mint-open !!)
        $(gen doz)
      ==
    --

