|*
::
::::
  ::::
  ::::  Tier 1, light math
  ::::
::::
::
    add
  =+  [a=@ b=@]
  |=
  ^-  @
  ?:  .=(0 a)
    b
  $(a (dec a), b .^(b))
::::
::
    bex
  =+  [a=@]
  |=
  ^-  @
  ?:  .=(0 a)
    1
  (mul 2 $(a (dec a)))
::::
::
    dec
  =+  [a=@]
  |=
  ^-  @
  ?<  .=(0 a)
  =+  b=`@`0
  |-
  ?:  .=(a .^(b))
    b
  $(b .^(b))
::::
::
    div
  =+  [a=@ b=@]
  |=
  ^-  @
  ?<  .=(0 b)
  =+  c=@
  |-
  ?:  (lth a b)
    c
  $(a (sub a b), c .^(c))
::::
::
    gte
  =+  [a=@ b=@]
  |=
  ^-  ?
  !(lth a b)
::::
::
    gth
  =+  [a=@ b=@]
  |=
  ^-  ?
  !(lte a b)
::::
::
    lte
  =+  [a=@ b=@]
  |=
  ?|(.=(a b) (lth a b))
::::
::
    lth
  =+  [a=@ b=@]
  |=
  ^-  ?
  ?&
    !.=(a b)
  ::
    |-
    ?:  .=(0 a)
      &
    ?:  .=(0 b)
      |
    $(a (dec a), b (dec b))
  ==
::::
::
    mod
  =+  [a=@ b=@]
  |=
  ^-  @
  ?<  .=(0 b)
  (sub a (mul b (div a b)))
::::
::
    mul
  =+  [a=@ b=@]
  |=
  ^-  @
  =+  c=^-(@ 0)
  |-
  ?:  .=(0 a)
    c
  $(a (dec a), c (add b c))
::::
::
    sub
  =+  [a=@ b=@]
  |=
  ^-  @
  ?:  .=(0 b)
    a
  $(a (dec a), b (dec b))
::
::::
  ::::
  ::::  Tier 2, lists, units and trees
  ::::
::::
::
    bind
  =+  [a=*(unit) b=&*]
  |:
  ?~  a
    ~
  [~ u=(b u.a)]
::::
::
    clap
  =+  [a=*(unit) b=*(unit) c==+(^ |=(-<-))]
  |:
  ?~  a
    b
  ?~  b
    a
  [~ u=(c u.a u.b)]
::::
::
    drop
  =+  a=*(unit)
  |:
  ?~  a
    ~
  [i=u.a t=~]
::::
::
    flop
  =+  a=*(list)
  |:
  ^-  a
  =+  b=`a`~
  |-
  ?~  a
    b
  $(a t.a, b [i.a b])
::::
::
    lent
  =+  a=*(list)
  |=
  ^-  @
  =+  b=@
  |-
  ?~(a b $(a t.a, b .^(b)))
::::
::
    levy
  =+  [a=*(list) b==+(* |=(.?(-<)))]
  |:  |-
  ^-  ?
  ?~  a
    &
  ?:  (b i.a)
    $(a t.a)
  |
::::
::
    lien
  =+  [a=*(list) b==+(* |=(.?(-<)))]
  |:  |-
  ^-  ?
  ?~  a
    |
  ?:  (b i.a)
    &
  $(a t.a)
::::
::
    list
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~           ~
    [i=* t=*]   [i=(a i.b) t=$(b t.b)]
  ==
::::
::
    need
  =+  a=*(unit)
  |:
  ?~  a
    !!
  u.a
::::
::
    newt
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~           ~
    [* *]   [(a -.b) $(b +.b)]
  ==
::::
::
    reel
  =+  [a=*(list) b==+([* *] |=(-<+))]
  |:  |-
  ^-  -<+.b
  ?~  a
    -<+.b
  $:b(-<- i.a, -<+ $(a t.a))
::::
::
    roll
  =+  [a=*(list) b==+([* *] |=(-<+))]
  |:  |-
  ^-  -<+.b
  ?~  a
    -<+.b
  $(a t.a, b b(-<+ $:b(-<- i.a)))
::::
::
    skim
  =+  [a=*(list) b==+([p=*] |=(.?(p)))]
  |:  |-
  ^-  a
  ?~  a
    ~
  ?:((b i.a) [i.a $(a t.a)] $(a t.a))
::::
::
    skip
  =+  [a=*(list) b==+([p=*] |=(.?(p)))]
  |:  |-
  ^-  a
  ?~  a
    ~
  ?:((b i.a) $(a t.a) [i.a $(a t.a)])
::::
::
    snag
  =+  [a=@ b=*(list)]
  |:  |-
  ?~  b
    !!
  ^-  i.b
  ?:  .=(0 a)
    i.b
  $(b t.b, a (dec a))
::::
::
    sort
  =+  [a=*(list) b==+([p=* q=*] |=(.=(p q)))]
  |:  |-
  ^-  a
  ?~  a
    ~
  %+  weld
    $(a (skim ^@(a) =+(* |:((b -< i.a)))))
  [i.a $(a (skim ^@(a) =+(* |:((b i.a -<)))))]
::::
::
    tree
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~               ~
    [n=* l=* r=*]   [n=(a n.b) l=$(b l.b) r=$(b r.b)]
  ==
::::
::
    turn
  =+  [a=*(list) b=&*]
  |:  |-
  ?~  a
    ~
  [(b i.a) $(a t.a)]
::::
::
    unit
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~       ~
    [~ *]   [~ u=(a +.b)]
  ==
::::
::
    weld
  =+  [a=*(list) b=*(list)]
  |:  |-
  ^-  b
  ?~  a
    b
  [i.a $(a t.a)]
::
::::
  ::::
  ::::  Tier 3, noun surgery
  ::::
::::
::
    axis  &@
    bloq  &@
    mash  &@
::::
::
    cap
  =+  [a=*axis]
  |=
  ^-  *<2 3>
  ?-  a
    2       2
    3       3
    *<0 1>  !!
    *       $(a (div a 2))
  ==
::::
::  
    cat
  =+  [a=*bloq b=@ c=@]
  |=
  (add (lsh a (met a c) b) c)
::::
::
    con
  =+  [a=@ b=@]
  |=
  =+  [c=`@`0 d=`@`0]
  |-
  ?:  ?&(.=(0 a) .=(0 b))
    d
  %=  $
    a   (rsh 0 1 a)
    b   (rsh 0 1 b)
    c   .^(c)
    d   (add d (lsh 0 c ?&(.=(0 (end 0 1 a)) .=(0 (end 0 1 b)))))
  ==
::::
::
    cut
  =+  [a=*bloq [b=@ c=@] d=@]
  |=
  (end a b (rsh a c d))
::::
::
    dis
  =+  [a=@ b=@]
  |=
  =+  [c=`@`0 d=`@`0]
  |-
  ?:  ?|(.=(0 a) .=(0 b))
    d
  %=  $
    a   (rsh 0 1 a)
    b   (rsh 0 1 b)
    c   .^(c)
    d   (add d (lsh 0 c ?|(.=(0 (end 0 1 a)) .=(0 (end 0 1 b)))))
  ==
::::
::
    dor
  =+  [a=* b=*]
  |=
  ^-  ?
  ?:  .=(a b)
    &
  ?.  ?=(@ a)
    ?.  ?=(@ b)
      ?:  .=(-.a -.b)
        $(a +.a, b +.b)
      $(a -.a, b -.a)
    |
  ?.  ?=(@ b)
    &
  (lth a b)
::::
::
    end 
  =+  [a=*bloq b=@ c=@]
  |=
  (mod c (bex (mul (bex a) b)))
::::
::
    gor
  =+  [a=* b=*]
  |=
  ^-  ?
  =+  [c=(mug a) d=(mug b)]
  ?:  .=(c d)
    (dor a b)
  (lth c d)
::::
::
    lsh
  =+  [a=*bloq b=@ c=@]
  |=
  (mul (bex (mul (bex a) b)) c)
::::
::
    mix
  =+  [a=@ b=@]
  |=
  =+  [c=`@`0 d=`@`0]
  |-
  ?:  ?&(.=(0 a) .=(0 b))
    d
  %=  $
    a   (rsh 0 1 a)
    b   (rsh 0 1 b)
    c   .^(c)
    d   (add d (lsh 0 c .=((end 0 1 a) (end 0 1 b))))
  ==
::::
::
    met
  =+  [a=*bloq b=@]
  |=
  =+  c=`@`0
  |-
  ?:  .=(0 b)
    c
  $(b (rsh a 1 b), c .^(c))
::::
::
    mas
  =+  [a=*axis]
  |=
  ^-  *axis
  ?-  a
    1   !!
    2   1
    3   1
    *   (add (mod a 2) (mul $(a (div a 2)) 2))
  ==
::::
::
    mug
  =+  a=*
  |=
  ^-  *mash
  =<  $
  |*
  ::::
  ::
      $
    ?.  ?=(@ a)
      =+  [b=$(a -.a) c=$(a +.a)]
      =+  d=(mix b (add (end 5 1 (lsh 3 1 c)) (rsh 3 3 c)))
      |-
      =+  e=(dis 0x7fffffff (chum d))
      ?:  .=(0 e)
        $(d .^(d))
      e
    =+  b=`@`0x18d0a625
    |-
    =+  c=(met 5 a)
    =+  d=`@`0
    =+  e=b
    |-
    ?:  .=(d c)
      =+  f=(dis 0x7fffffff e)
      ?:  .=(0 f)
        $.-.$(b .^(b))
      f
    $(d .^(d), e (chum (mix e (cut 5 [1 d] a))))
  ::::
  ::
      chum
    =+  [b=@]
    |=
    =-  (end 5 1 -<)
    %+  add
      (sbox (cut 3 [1 0] b))
    %+  add
      (sbox (cut 3 [1 1] b))
    %+  add
      (sbox (cut 3 [1 2] b))
    (sbox (cut 3 [1 3] b))
  ::::
  ::
      sbox
    =+  [b=@]
    |=
    =-  (cut 5 [1 b] -<)
    0x45bd2fb7\ /eec357b8\ /2ae29f22\ /bb412e03\ /08445336\ /52ca46d8\
     /76d680b9\ /b9e06f14\ /6f8b9c36\ /a53ef834\ /e3533b5b\ /c5cd423e\
     /0cfd4d14\ /12924b1a\ /3e77ee18\ /1804e2a5\ /75d9c4e1\ /6d4b9a3e\
     /5d56c751\ /12ad4163\ /b9df9e63\ /fbfbdac7\ /54464f51\ /4b72be7f\
     /180d4405\ /1b456773\ /5fb51d73\ /2d4774c2\ /381585e2\ /0209e49e\
     /52c0256a\ /6deac45d\ /3f55045c\ /40b92e52\ /5242aa7a\ /a47337b1\
     /bc816aba\ /4bbb0ecf\ /f82cb4ad\ /0bc99c47\ /78a5c74c\ /9182f20d\
     /7b941dc3\ /ff307dd2\ /fc36ca9d\ /0c32efad\ /b1c38ca7\ /b799e1be\
     /fd0dbfee\ /9887957d\ /70186f9e\ /31325eca\ /48f0ac44\ /c7eb6480\
     /ab1f9401\ /167cf21d\ /dce5b8fa\ /121c9f64\ /e95eacb5\ /c50dca03\
     /8b29fd75\ /875f1bb9\ /261c8938\ /3bf794dc\ /e4395998\ /1b06df20\
     /19c11553\ /eefbdb16\ /54447c57\ /f54a4761\ /bdf13b8c\ /88502921\
     /72553aee\ /c63a1157\ /03a1f284\ /f5b59c3c\ /96923c87\ /e2c0936d\
     /4f112d16\ /0f4c5845\ /1055a07d\ /d82afef8\ /72fb1b49\ /0fa54e14\
     /637d01f5\ /7fe89a8b\ /0617eda8\ /4354f3e7\ /712f6316\ /9036b901\
     /111a1094\ /70c78bcc\ /28329ab3\ /fdf004ca\ /2026a870\ /85ac98d2\
     /3f52439e\ /e030c8ed\ /a7589924\ /05af69ed\ /566dd09c\ /4237062e\
     /e9fc60eb\ /c415321c\ /ac4fc47f\ /b265b0ee\ /95cdc493\ /3beb6b4d\
     /e777884a\ /370f9e65\ /6a52c674\ /62dc97c6\ /e5d5238e\ /b6315b6a\
     /c845a9e2\ /026c78ab\ /13beec00\ /b3ed287a\ /a01ebf2b\ /b5c0da93\
     /deeedce8\ /3e5ec58d\ /e83350f0\ /e6ffe2fb\ /a3765510\ /37f42e48\
     /474c90cf\ /78eea53d\ /d10faca2\ /a9417956\ /7c600063\ /14187d04\
     /faffdd23\ /44844992\ /61f4a52d\ /a234566b\ /a46b9dd7\ /1a9d0bd3\
     /cf3e4033\ /b3bcada3\ /00f3ef4e\ /7367a5f9\ /5e24070c\ /1b973827\
     /5dcd3652\ /95b1eb1f\ /035857a4\ /c090c33b\ /5eba8280\ /475d8534\
     /7fb44be7\ /3bffc889\ /dbaf1fa2\ /948328b1\ /56a8a01c\ /6717fa39\
     /4c41d2c6\ /b3275702\ /51634e92\ /51a573dd\ /d3ea1b9d\ /be74ea0b\
     /9093fa5f\ /d2e1d0d1\ /8a1fd93a\ /8f1d0a6e\ /b7a9e735\ /deb0aa12\
     /48d76271\ /e808ec02\ /8e498a90\ /83539726\ /86c7973e\ /44337e55\
     /81f4f7ca\ /3052b642\ /873b540e\ /68d8efa2\ /18494012\ /decc1486\
     /29079afa\ /b81a7b1d\ /63dd42a0\ /3cab1b6f\ /713fffa2\ /08835b42\
     /6dd6f5f8\ /65a14a04\ /5eab8eac\ /2fe5b7f9\ /bbc96404\ /f593e52b\
     /b2078d1a\ /f192cbcd\ /c5e102b2\ /9187837c\ /bddd8a18\ /5caf8a56\
     /3b7aa391\ /88fd1802\ /1e458e1d\ /5f606388\ /513ce98d\ /aed1093b\
     /ae87124c\ /f537ea14\ /0f4bb673\ /cfbeae41\ /123e5e9f\ /e14077a2\
     /40acd8dc\ /103b81cf\ /683fa466\ /9b9e2cec\ /23171ec6\ /2ba16060\
     /d3bfabae\ /dd68fcd2\ /f60ee7be\ /f44c697e\ /7990bd4e\ /3ce83919\
     /bc457a9d\ /5022a039\ /a158b454\ /80722ba6\ /87652d85\ /e2ddee5a\
     /5c43205e\ /c62f6816\ /4c680e34\ /151f4b17\ /9570fa83\ /eb9f040e\
     /22b9bd9c\ /d156e14b\ /3a30bdd8\ /f00fc9e2\ /62bcfdef\ /da4952df\
     /0c100eda\ /ccffce0a\ /1994625d\ /b0cd88c6\ /766ff6ec\ /7c8f831a\
     /7824fff6\ /dee5b579\ /99267e88\ /f8820121\ /6220ecc5\ /f40f7a8d\
     /fe8c511a\ /a9afcd63\ /ba9cd382\ /352598d8
  ::
  ::::
  ==
::::
::
    peg
  =+  [a=*axis b=*axis]
  |=
  ^-  *axis
  ?-  b
    1   a
    2   (mul a 2)
    3   .^((mul a 2))
    *   (add (mod b 2) (mul $(b (div b 2)) 2))
  ==
::::
::
    rap
  =+  [a=*bloq b=*(list &@)]
  |=
  ^-  @
  ?~  b
    0
  (cat a $(b t.b) i.b)
::::
::
    rip
  =+  [a=*bloq b=@]
  |=
  ^-  *(list &@)
  ?:  .=(0 b)
    ~
  [(end a 1 b) $(b (lsh a 1 b))]
::::
::
    rsh
  =+  [a=*bloq b=@ c=@]
  |=
  (div c (bex (mul (bex a) b)))
::::
::
    vor
  =+  [a=* b=*]
  |:
  ^-  ?
  =+  [c=(mug (mug a)) d=(mug (mug b))]
  ?:  .=(c d)
    (dor a b)
  (lth c d)
::
::::
  ::::
  ::::  Tier 4, pools and books
  ::::
::::
::
    pool  =+(a=&* |:((tree a)))
::::
::
    in
  =+  a=*(pool)
  |%
  ::::
  ::
      gas
    =+  b=*(list)
    |:  |-
    ^-  a
    ?~  b
      a
    $(b t.b, a (put i.b))
  ::::
  ::
      has
    =+  b=*
    |:  |-
    ^-  ?
    ?~  a
      |
    ?:  .=(b n.a)
      &
    ?:  (gor b n.a)
      $(a l.a)
    $(a r.a)
  ::::
  ::
      put
    =+  b=*
    |:  |-
    ^-  a
    ?~  a
      [b ~ ~]
    ?:  .=(b n.a)
      a
    ?:  (gor b n.a)
      =+  c=$(a l.a)
      ?>  ?=(^ c)
      ?:  (vor n.a n.c)
        [n.a c r.a]
      [n.c l.c [n.a r.c r.a]]
    =+  c=$(a r.a)
    ?>  ?=(^ c)
    ?:  (vor n.a n.c)
      [n.a l.a c] 
    [n.c [n.a l.a l.c] r.c]
  ::::
  ::
      tap
    =+  b=*(list)
    |:  |-
    ?~  a
      b
    $(a r.a, b [n.a $(a l.a)])
  ::
  ::::
  ==
::
::::
  ::::
  ::::  Tier 5, urban parsing
  ::::
::::
::

::
::::
  ::::
  ::::  Tier 6, Watt in Watt.
  ::::
::::
::
    crow
  |*
  ::::
  ::
      bank  (list gene)
      cord  <^+(@ *term) [%frag p=*axis] [%port p=*term]>
      door  &[p=*axis q=*type r=*gene]
      menu  (list &[p=*term q=*gene])
      plot  (list &[p=*gene q=*type])
      plan  &[p=*axis q=*(unit door) r=*type]
      rack  (list &[p=*gene q=*gene])
      rail  (list type)
      rope  (list cord)
      spec  <[%none ~] [%leaf p=*term q=*gene] [p=^+(^ *spec) q=*spec]>
      spot  &[at=[p=@ q=@] to=[p=@ q=@]]
      term  &@
  ::
  ::::
  ::
      gene
    |?
      [%bail ~]                                   ::  !!  hopven
      [%boot ~]                                   ::  !%  hopmit
      [%mega p=*gene]                             ::  !`  hoptic
      [%meta p=*gene]                             ::  !:  hopdig
      [%dbug p=*gene]                             ::  !#  hopdax
      [%spot p=*spot q=*gene]
    ::
      [%else p=*gene q=*gene]                     ::  ?<  askder
      [%flip p=*gene]                             ::  ?!  askhop
      [%lest p=*gene q=*gene r=*gene]             ::  ?.  askdot
      [%like p=*gene q=*gene]                     ::  ?=  askben
      [%mesh p=*gene q=*bank]                     ::  ?*  askras
      [%sand p=*bank]                             ::  ?&  askamp
      [%sift p=*gene q=*rack]                     ::  ?-  asknub
      [%some p=*bank]                             ::  ?|  askbar
      [%step p=*gene q=*gene r=*gene]             ::  ?~  asksig
      [%test p=*gene q=*gene r=*gene]             ::  ?:  askdig
      [%then p=*gene q=*gene]                     ::  ?>  askred
    ::
      [%bond p=*gene q=*bank]                     ::  |~  barsig
      [%bund p=*gene q=*gene r=*bank]             ::  |@  barvat
      [%gate p=*gene]                             ::  |=  barben
      [%lift p=*menu]                             ::  |%  barmit
      [%load p=*menu]                             ::  |*  barras
      [%loop p=*gene]                             ::  |-  barnub
      [%pick p=*bank]                             ::  |?  barask
      [%ramp p=*gene]                             ::  |:  bardig
    ::
      [%knit p=*gene q=*gene]                     ::  =<  bender
      [%link p=*gene q=*gene]                     ::  =>  benred
      [%pull p=*gene q=*gene]                     ::  =-  bennub
      [%push p=*gene q=*gene]                     ::  =+  benpod
    ::
      [%cage p=*bank]                             ::  :*  digras
      [%cell p=*gene q=*gene]                     ::  :-  dignub
      [%flow p=*bank]                             ::  :~  digsig
      [%qual p=*gene q=*gene r=*gene s=*gene]     ::  :^  digmit
      [%trel p=*gene q=*gene r=*gene]             ::  :+  digpod
    ::
      [%bump p=*gene]                             ::  .^  dothat
      [%deep p=*gene]                             ::  .?  dotask
      [%nock p=*gene q=*gene]                     ::  .*  dotras
      [%twin p=*gene q=*gene]                     ::  .=  dotben
    ::
      [%cast p=*gene q=*gene]                     ::  ^-  hatnub
      [%clip p=*gene q=*gene]                     ::  ^%  hatmit
      [%cool p=*gene]                             ::  ^~  hatsig
      [%name p=*term q=*gene]                     ::  ^=  hatben
      [%sure p=*gene q=*gene]                     ::  ^:  hatpod
      [%sock p=*gene q=*gene]                     ::  ^+  hatdig
      [%wash p=*gene]                             ::  ^*  hatras
      [%etch p=*gene]                             ::  ^@  hatvat
    ::
      [%coin p=*gene]                             ::  ;-  lomnub
      [%grip p=*gene]                             ::  ;+  lompod
    ::
      [%call p=*bank]                             ::  %-  mitnub  
      [%poke p=*gene q=*gene]                     ::  %_  mitcab
      [%punt p=*gene]                             ::  %*  mitras
      [%hear p=*gene q=*gene]                     ::  %.  mitdot
      [%take p=*rope q=*rack]                     ::  %=  mitben
      [%howl p=*gene q=*gene r=*gene]             ::  %+  mitpod
      [%wail p=*gene q=*gene r=*gene s=*gene]     ::  %^  mithat
    ::
      [%base p=*<%atom %blur %cell %flag %null>]  ::  @vat *ras ^hat ?ask ~sig
      [%frag p=*axis]
      [%port p=*term]
      [%rock p=*]
    ==
  ::
  ::::
  ::
      tack
    |?
      ~ 
      [%leaf p=*type] 
      [%name p=*term q=*tack] 
      [%pair p=*tack q=*tack]
    ==
  ::
  ::::
  ::
      tool
    |?
      [0 p=@]
      [1 p=*]
      [2 p=*tool q=*tool r=*tool]
      [3 p=*tool q=*tool]
      [4 p=*tool]
      [5 p=*tool]
      [6 p=*tool q=*tool]
      [p=^+(^ *tool) q=*tool]
    ==
  ::
  ::::
  ::
      type
    |?
      %blur
      %blot
      %atom
      [%cell p=*type q=*type]
      [%core p=*type q=*<[%hard p=*spec] [%soft p=*type q=*spec]>]
      [%cube p=*]
      [%face p=*term q=*type]
      [%fork p=*type q=*type]
      [%fuse p=*type q=*type]
      [%hold p=*type q=*gene]
    ==
  ::
  ::::
  ::::
  ::
      coin
  ::
    =+  gen=*gene
    |=
    ^-  *gene
    =<  $
    |*
    ::::
    ::
        $
      ^-  *gene
      ?-  gen
          [%cast *]   [%push [%cool [%wash q.gen]] [%gate (fix(gen p.gen) 4)]]
          [%punt *]   p.gen
          [%sure *]   $(gen q.gen)
      ::
          [%clip *]
        :+  %push
          [%cool [%wash q.gen]]
        :-  %gate
        :+  %link
          [%take ~ {[[%frag 4] [%call $(gen q.gen) [%frag 4] ~]]}]
        (fix(gen p.gen) 4)
      ::
      ::
          *           
        =+  bog=(open gen)
        ?.  .=(bog gen)
          $(gen bog)
        [%push [%cool [%wash gen]] [%gate (fix 4)]]
      ==
    ::::
    ::
        fix
      =+  [axe=*axis]
      |=
      ^-  *gene
      ?-  gen
          [%cast *]   $(gen p.gen)
          [%punt *]   [%call p.gen [%frag axe] ~]
          [%sure *]   $(gen q.gen)
          [%name *]   [%name p.gen $(gen q.gen)]
      ::
          [%cell *]
        :+  %cell
          $(gen p.gen, axe (peg axe 2))
        $(gen q.gen, axe (peg axe 3))
      ::
          [%clip *]
        :+  %link
          [%take ~ {[[%frag axe] [%call $.-.$(gen q.gen) [%frag axe] ~]]}]
        $(gen p.gen)
      ::
          *
        =+  bog=(open gen)
        ?.  .=(bog gen)
          $(gen bog)
        [%then [%like gen [%frag axe]] [%frag axe]]
      ==
    ==
  ::
  ::::
  ::
      grip
    =+  gen=*gene
    |=
    ^-  *gene
    ?-  gen
        [%base *]   gen
        [%cast *]   [%cast p.gen $(gen q.gen)]
        [%cell *]   [%cell $(gen p.gen) $(gen q.gen)]
        [%clip *]   [%clip $(gen p.gen) $(gen q.gen)]
        [%name *]   [%name p.gen $(gen q.gen)]
        [%grip *]   $(gen p.gen)
        [%sure *]   $(gen p.gen)
        [%rock *]   gen
    ::
        [%punt *]   
      ?.  ?=([%pick *] p.gen)
        [%base %blur]
      gen(p.p (turn p.p.gen =+(*gene |=($.-.$(gen -<)))))
    ::
        *           
      =+  bog=(open gen)
      ?:  .=(bog gen)
        [%base %blur]
      $(gen bog)
    ==
  ::
  ::::
  ::
      open
  ::
    =+  gen=*gene
    |=
    ^-  *gene
    ?-  gen
        [%coin *]   (coin p.gen)
        [%cool *]   p.gen
        [%dbug *]   p.gen
        [%else *]   [%test p.gen [%bail ~] q.gen]
        [%flip *]   [%test p.gen [%rock 1] [%rock 0]]
        [%frag *]   [%take {gen} ~]
        [%grip *]   (grip p.gen)
        [%gate *]   [%load [[%% p.gen] ~]]
        [%hear *]   [%call q.gen {p.gen}]
        [%howl *]   [%call p.gen q.gen r.gen ~]
        [%knit *]   [%link q.gen p.gen]
        [%lest *]   [%test p.gen r.gen q.gen]
        [%loop *]   [%link [%gate p.gen] [%port %%]]
        [%mega *]   [%rock p.gen]
        [%port *]   [%take {gen} ~]
        [%pull *]   [%push q.gen p.gen]
        [%punt *]   [%cool [%link p.gen [%take {[%port %%]} ~]]]
        [%push *]   [%link [%cell p.gen [%frag 1]] q.gen]
        [%qual *]   [%cell p.gen [%cell q.gen [%cell r.gen s.gen]]]
        [%ramp *]   [%lift [[%% p.gen] ~]]
        [%spot *]   q.gen
        [%then *]   [%test p.gen q.gen [%bail ~]]
        [%trel *]   [%cell p.gen [%cell q.gen r.gen]]
        [%wail *]   [%call p.gen q.gen r.gen s.gen ~]
        [%wash *]   [%cast [%base %blur] p.gen] 
    ::
        [%base *]
      ?-  p.gen
        %atom   [%cast [%bump %rock 0] [%rock 0]]
        %blur   [%cast [%nock [%rock 0] [%rock 0]] [%rock 0]]
        %cell   [%cell [%base %blur] [%base %blur]]
        %flag   [%cast [%deep %rock 0] [%rock 0]]
        %null   [%rock 0]
      ==
    ::
        [%bond *]
      |-
      ?-  q.gen
          ~       !!
          [* ~]   i.q.gen
      ::
          ^
        :+  %push
          $(q.gen t.q.gen)
        :+  %push
          [%link [%frag 3] i.q.gen]
        :+  %push
          [%frag 8]
        :-  %ramp
        :^    %howl
            [%link [%frag 23] p.gen]
          [%call [%frag 10] [%frag 4] ~]
        [%take {[%frag 22]} {[[%frag 4] [%frag 4]]}]
      ==
    ::
        [%bund *]
      |-
      ?-  r.gen
          ~       !!
      ::
          [* ~]
        :+  %push 
          i.r.gen
        :+  %push 
          [%frag 8]
        :-  %ramp
        :+  %cast
          [%call [%link [%frag 11] q.gen] [%frag 4] ~]
        [%call [%frag 10] [%frag 4] ~]
      ::
          ^
        :+  %push
          $(r.gen t.r.gen)
        :+  %push
          [%link [%frag 3] i.r.gen]
        :+  %push
          [%frag 8]
        :-  %ramp
        :+  %cast
          [%call [%link [%frag 23] q.gen] [%frag 4] ~]
        :^    %howl
            [%link [%frag 23] p.gen]
          [%call [%frag 10] [%frag 4] ~]
        [%take {[%frag 22]} {[[%frag 4] [%frag 4]]}]
      ==
    ::
        [%cage *]
      |-
      ?-(p.gen ~ [%bail ~], [* ~] i.p.gen, ^ [%cell i.p.gen $(p.gen t.p.gen)])
    ::
        [%call *]
      ?-  p.gen
      ::
          [* ~]
        [%link i.p.gen [%port %%]]
      ::
          ^
        :+  %push
          i.p.gen
        :+  %take
          {[%frag 2] [%port 0]}
        {[[%frag 4] [%link [%frag 3] [%cage t.p.gen]]]}
      ==
    ::
        [%clip *]
      :+  %push 
        q.gen 
      :+  %sift
        [%frag 2]
      {[[%link [%frag 3] p.gen] [%frag 2]]}
    ::
        [%flow *]
      |-
      ?~(p.gen [%rock 0] [%cell i.p.gen $(p.gen t.p.gen)])
    ::
        [%mesh *]
      |-
      ?~  q.gen
        [%bail ~]
      :^    %test
          [%like (grip i.q.gen) p.gen]
        [%call (coin i.q.gen) p.gen ~]
      $(q.gen t.q.gen)
    ::
        [%pick *]
      ?~  p.gen
        [%bail ~]
      [%push [%wash i.p.gen] [%gate [%mesh [%frag 4] p.gen]]]
    ::
        [%poke *]
      [%push p.gen [%take {[%frag 2]} {[[%frag 4] [%link [%frag 3] q.gen]]}]]
    ::
        [%sand *]
      |-
      ?~(p.gen [%rock 0] [%test i.p.gen $(p.gen t.p.gen) [%rock 1]])
    ::
        [%sift *]
      |-
      ?~  q.gen
        [%bail ~]
      :^    %test
          [%like (grip p.i.q.gen) p.gen]
        :+  %link
          [%sure p.i.q.gen p.gen]
        q.i.q.gen
      $(q.gen t.q.gen)
    ::
        [%some *]
      |- 
      ?~(p.gen [%rock 1] [%test i.p.gen [%rock 0] $(p.gen t.p.gen)])
    ::
        [%sock *]
      :+  %push
        q.gen
      [%knit [%frag 2] [%sure [%link [%frag 3] p.gen] [%frag 2]]]
    ::
        [%step *]
      [%sift p.gen {[[%rock 0] q.gen] [[%base %cell] r.gen]}]
    ::
        *   
      gen
    ==
  ::
  ::::
  ::
      rake
  ::
    =+  gen=*gene
    |=
    ?-  gen
      [%take * ~]   p.gen
      [%port *]     {gen}
      [%frag *]     {gen}
    ==
  ::
  ::::
  ::::
  ::
      rose
    =+  fan=*(pool &[*type *gene])
    =+  ver=*(pool type)
    =+  bug=0
    =+  sut=*type
    |*
    ::::
    ::
        both
      =+  [hoc=*type]
      |=
      ^-  *type
      ?:  .=(%blur hoc)
        sut
      ?:  .=(%blur sut)
        hoc
      [%fuse hoc sut]
    ::::
    ::
        edit
      =+  mut=*plot
      |=
      (burn:iris | (feed:lark mut))
    ::::
    ::
        eith
      =+  [hoc=*type]
      |=
      ^-  *type
      ?:  .=(%blot hoc)
        sut
      ?:  .=(%blot sut)
        hoc
      [%fork sut hoc]
    ::::
    ::
        etch
      ?>  ?=([%fuse *] sut)
      q.sut
    ::::
    ::
        fine
      ^-  ?
      ?>  ?=([%core *] sut)
      ?-  q.sut
      ::
          [%hard p=*spec]
        (ride:gull_p.q.sut =+(*gene |=((show -<))))
      ::
          [%soft p=*type q=*spec]
        ?:  (has:in_ver sut)
          &
        =>  %=(. ver (put:in_ver sut))
        %-  ride:gull_q.q.sut
        =+  tux=*gene
        |=  
        ?&
          (show tux)
          .=((make tux) (make(sut [%core p.q.sut q.sut]) tux))
        ==
      ==
    ::::
    ::
        fire
      =+  [gen=*gene]
      |=
      ?>  (show gen)
      (make gen)
    ::::
    ::
        gain 
      =+  [gen=*gene]
      |=
      =<  (gild hunt)
      |*
      ::::
      ::
          gild
        =+  [mut=*plot]
        |=
        (both (burn:iris(sut %blur) | (feed:lark mut)))
      ::::
      ::
          hunt
        |-
        ^-  *plot
        ?-  gen
        ::
            [%like *]
          {[q.gen (play p.gen)]}
        ::
            [%sand *] 
          %+  roll
            p.gen
          =+([a=*gene b=*plot] |=((weld $.-.$(gen a) b)))
        ::
            *
          ~
        ==
      ::
      ::::
      ==
    ::::
    ::
        make
      =+  [gen=*gene]
      |=
      =<  $
      |*
      ::::
      ::
          $
        ^-  *tool
        ?-  gen
        ::
            [%bail ~]
          [0 0]
        ::
            [%boot ~]
          [1 ..crow] 
        ::
            [%bump p=*gene]
          [5 $(gen p.gen)]
        ::
            [%cast p=*gene q=*gene]
          $(gen q.gen)
        ::
            [%cell p=*gene q=*gene]
          (cons:lily $(gen p.gen) $(gen q.gen))
        ::
            [%cool p=*gene]
          $(gen p.gen)    :: optimization is not performed!
        ::
            [%dbug p=*gene]
          $(bug .^(bug), gen p.gen)
        ::
            [%deep p=*gene]
          [4 $(gen p.gen)]
        ::
            [%etch p=*gene]
          $(gen p.gen)
        ::
            [%lift p=*menu]
          =>  %=(. sut (play gen))
          [[0 1] [1 (bake (fill:gull p.gen))]]
        ::
            [%like p=*gene q=*gene]
          =+  lar=(seek (rake q.gen))
          ?>  .=(~ q.lar)
          =+  ris=iris
          fish:ris(sut (play p.gen), axe p.lar) ::  XX
        ::
            [%link p=*gene q=*gene]
          (comb:lily $(gen p.gen) $(sut (play p.gen), gen q.gen))
        ::
            [%load p=*menu]
          =>  %=(. sut (play gen))
          [[0 1] [1 (bake (fill:gull p.gen))]]
        ::
            [%meta p=*gene]
          [1 (play p.gen)]
        ::
            [%nock p=*gene q=*gene]
          [3 $(gen p.gen) $(gen q.gen)]
        ::
            [%rock p=*]
          [1 p.gen]
        ::
            [%spot p=*spot q=*gene]
          $(gen q.gen)
        ::
            [%sure p=*gene q=*gene]
          [0 1]
        ::
            [%take p=*rope q=*rack]
          =+  lar=(seek p.gen)
          =+  rem=(turn q.gen =+([p=*gene q=*gene] |=([p $.-.$(gen q)])))
          ?-  q.lar 
              ~   (boil(sut r.lar) p.lar rem)
              ^   [3 (boil(sut q.u.q.lar) p.lar rem) [0 (peg p.lar p.u.q.lar)]]
          ==
        ::
            [%test p=*gene q=*gene r=*gene]
          [2 $(gen p.gen) $(gen q.gen, sut (gain p.gen)) $(gen r.gen)]
        ::
            [%twin p=*gene q=*gene]
          [6 $(gen p.gen) $(gen q.gen)]
        ==
      ::::
      ::
          bake
        =+  sep=*spec
        |=
        ^-  *
        ?-  sep
          [%none ~]   [0 0]
          [%leaf *]   (make q.sep)
          [^ *]       [$(sep p.sep) $(sep q.sep)]
        ==
      ::::
      ::
          boil
        =+  [axe=*axis rem=*(list &[p=*gene q=*tool])]
        |=
        ^-  *tool
        %+  hike:lily
          axe
        (turn rem =+([p=*gene q=*tool] |=([p:(seek (rake p)) q])))
      ::
      ::::
      ==
    ::::
    ::
        null
      =+  hem=*(pool type)
      |-
      ^-  ?
      ?-  sut
          %atom |
          %blot &
          %blur |
          [%cell *] ?|($(sut p.sut) $(sut q.sut))
          [%core *] $(sut p.sut)
          [%cube *] |
          [%face *] $(sut q.sut)
          [%fork *] ?&($(sut p.sut) $(sut q.sut))
          [%fuse *] (orth(sut p.sut) q.sut)
      :: 
          [%hold *] 
        ?|
          (has:in_hem sut)
          $(hem (put:in_hem sut), sut (repo(sut p.sut) q.sut))
        ==
      ==
    ::::
    ::
        orth
      =+  ref=*type
      |=
      ^-  ?
      ?|  
        null
        null(sut ref)
      ::
        =+  bol=*(pool &[*type *type])
        |-
        ?-  sut
            %blot       &
            %blur       |
            [%core *]   $(sut [%cell p.sut %blur])
            [%face *]   $(sut q.sut)
            [%fuse *]   ?|($(sut p.sut) $(sut q.sut))
        ::
            %atom
          ?-  ref
            %atom       |
            [%cell *]   &
            *           $(sut ref, ref sut)
          ==
        ::
            [%cell *]
          ?:  ?=([%cell *] ref)
            ?|($(sut p.sut, ref p.ref) $(sut q.sut, ref q.ref))
          $(sut ref, ref sut)
        ::
            [%cube *]
          ?-  ref
              %atom       .?(p.sut)
              [%cube *]   .=(p.sut p.ref)
          ::
              [%cell *]   
            ?|(!.?(p.sut) $(sut [%cell [%cube -.p.sut ] [%cube +.p.sut]]))
          ::
              *
            $(sut ref, ref sut)
          ==
        ::
            [%fork *]
          ?&
            ?|(null(sut p.sut) $(sut p.sut))
            ?|(null(sut q.sut) $(sut q.sut))
          ==
        ::
            [%hold *]
          ?|
            (has:in_bol [ref sut])
            $(bol (put:in_bol [ref sut]), sut (repo(sut p.sut) q.sut))
          ==
        ==
      ==
    ::::
    ::
        pass
      =+  gen=*gene
      |=
      ?>  (show gen)
      (play gen)
    ::::
    ::
        play
      =+  [gen=*gene]
      |=
      ^-  *type
      ?-  gen
      :: 
          [%bail ~]
        %blot
      ::
          [%boot ~]
        !!
      :: 
          [%bump p=*gene]
        %atom
      :: 
          [%cast p=*gene q=*gene]
        $(gen p.gen)
      :: 
          [%cell p=*gene q=*gene]
        [%cell $(gen p.gen) $(gen q.gen)]
      :: 
          [%cool p=*gene]
        $(gen p.gen)
      :: 
          [%dbug p=*gene]
        $(bug .^(bug), gen p.gen)
      :: 
          [%deep p=*gene]
        [%fork [%cube 0] [%cube 1]]
      ::
          [%etch p=*gene]
        etch(sut $(gen p.gen))
      :: 
          [%lift p=*menu]
        [%core sut [%soft sut (fill:gull p.gen)]]
      :: 
          [%like p=*gene q=*gene]
        [%fork [%cube 0] [%cube 1]]
      :: 
          [%link p=*gene q=*gene]
        $(sut $(gen p.gen), gen q.gen)
      :: 
          [%load p=*menu]
        [%core sut [%hard (fill:gull p.gen)]]
      ::
          [%meta p=*gene]
        [%cube $(gen p.gen)]
      :: 
          [%name p=*term q=*gene]
        [%face p.gen $(gen q.gen)]
      :: 
          [%nock p=*gene q=*gene]
        %blur
      :: 
          [%rock p=*]
        [%cube p.gen]
      :: 
          [%spot p=*spot q=*gene]
        $(gen q.gen)
      :: 
          [%sure p=*gene q=*gene]
        sut
      :: 
          [%take p=*rope q=*rack]
        =+  lar=(seek p.gen)
        =+  mut=(turn q.gen =+([p=*gene q=*gene] |=([p $.-.$(gen q)])))
        ?~  q.lar
          (edit(sut r.lar) mut)
        [%hold (edit(sut q.u.q.lar) mut) r.u.q.lar]
      :: 
          [%test p=*gene q=*gene r=*gene]
        (eith(sut $(gen q.gen, sut (gain p.gen))) $(gen r.gen))
      :: 
          [%twin p=*gene q=*gene]
        [%fork [%cube 0] [%cube 1]]
      ==
    ::::
    ::
        repo
      =+  gen=*gene
      |=
      ?<  (has:in_fan [sut gen])
      =>  %=(. fan (put:in_fan [sut gen]))
      (play gen)
    ::::
    ::
        safe
      =+  mut=*plot
      |=
      ^-  ?
      =+  (burn:iris & (feed:lark mut))
      &
    ::::
    ::
        seek
      =+  rop=*rope
      |=
      ^-  *plan
      =+  axe=^-(*axis 1)
      =+  act=*(unit door)
      |-
      ?~  rop
        [axe act sut]
      ?-  i.rop
          ^+(@ *term)   
        $(rop [[%port i.rop] t.rop])
      ::
          [%frag *]
        $(rop t.rop, sut (peek:iris p.i.rop), act ~, axe (peg axe p.i.rop))
      ::
          [%port *]
        =+  sap=(find:iris p.i.rop)
        $(rop t.rop, sut r.sap, act q.sap, axe (peg axe p.sap))
      ==
    ::::
    ::
        sell
      =+  [dub=*type]
      |=
      (nest:iris dub)
    ::::
    ::
        show
      =+  [gen=*gene]
      |=
      ^-  ?
      ?-  gen
      :: 
          [%bail ~]
        &
      ::
          [%boot ~]
        &
      :: 
          [%bump p=*gene]
        ?>  ?&($(gen p.gen) (sell(sut %atom) (play p.gen)))
        &
      :: 
          [%cast p=*gene q=*gene]
        ?>  ?&($(gen p.gen) $(gen q.gen) (sell(sut (play p.gen)) (play q.gen)))
        &
      :: 
          [%cell p=*gene q=*gene]
        ?&($(gen p.gen) $(gen q.gen))
      :: 
          [%cool p=*gene]
        $(gen p.gen)
      :: 
          [%dbug p=*gene]
        $(bug .^(bug), gen p.gen)
      :: 
          [%deep p=*gene]
        &
      ::
          [%etch p=*gene]
        $(gen p.gen)
      :: 
          [%lift p=*menu]
        &
      :: 
          [%like p=*gene q=*gene]
        ?&($(gen p.gen) $(gen q.gen))
      :: 
          [%link p=*gene q=*gene]
        ?&($(gen p.gen) $(sut (play p.gen), gen q.gen))
      :: 
          [%load p=*menu]
        fine(sut (play gen))
      ::
          [%meta p=*gene]
        $(gen p.gen)
      :: 
          [%name p=*term q=*gene]
        $(gen q.gen)
      :: 
          [%nock p=*gene q=*gene]
        ?&($(gen p.gen) $(gen q.gen))
      :: 
          [%rock p=*]
        &
      :: 
          [%spot p=*spot q=*gene]
        $(gen q.gen)
      :: 
          [%sure p=*gene q=*gene]
        ?>  ?&
              $(gen p.gen) 
              $(gen q.gen) 
              (sell(sut (play p.gen)) (play q.gen))
            ==
        &
      :: 
          [%take p=*rope q=*rack]
        =+  lar=(seek p.gen)
        =+  mut=(turn q.gen =+([p=*gene q=*gene] |=([p (pass q)])))
        ?~  q.lar
          (safe(sut r.lar) mut)
        (safe(sut q.u.q.lar) mut)    
      :: 
          [%test p=*gene q=*gene r=*gene]
        ?&($(gen p.gen) $(gen q.gen, sut (gain p.gen)) $(gen r.gen))
      :: 
          [%twin p=*gene q=*gene]
        ?>  ?&($(gen p.gen) $(gen q.gen))
        &
      ::  
          *
        $(gen (open gen))
      ==
    ::
    ::::
    ::::
    ::
        lark
      =+  tac=*tack
      |*
      ::::
      ::
          cram
        =+  les=*tack
        |=
        ^-  *tack
        ?:  .=(~ les)
          tac
        ?:  .=(~ tac)
          les
        ?-  tac
        ::
            [%name *]
          ?>  ?=([%name *] les)
          ?>  .=(p.tac p.les)
          [%name p.tac $(tac q.tac, les q.les)]
        ::
            [%pair *]
          ?>  ?=([%pair *] les)
          [%pair $(tac p.tac, les p.les) $(tac q.tac, les q.les)]
        ==
      ::::
      ::
          dull
        |-
        ^-  *tack
        ?-  tac
          ~   ~
          [%leaf *] [%leaf %blur]
          [%name *] [%name p.tac $(tac q.tac)]
          [%pair *] [%pair $(tac p.tac) $(tac q.tac)]
        ==
      ::::
      ::
          feed
        =+  mut=*plot
        |=
        ^-  *tack
        ?~  mut
          tac
        $(mut t.mut, tac (cram (nuke (rake p.i.mut) q.i.mut)))
      ::::
      ::
          nuke
        =+  [rop=*rope feg=*type]
        |=
        ^-  *tack
        ?-  rop
            ~               [%leaf feg]
            [@ *]           $(rop [[%port i.rop] t.rop])
        ::
            [[%frag p=*axis] *]
          =+  gur=(peek:iris p.i.rop)
          |-
          ?:  .=(1 p.i.rop)
            $.-.$(sut %blur, rop ~)
          ?:  .=(2 (cap p.i.rop))
            [%pair $(p.i.rop (mas p.i.rop)) ~]
          [%pair ~ $(p.i.rop (mas p.i.rop))]
        ::
            [[%port p=*term] *]
          =+  lar=(find:iris p.i.rop)
          |-
          ?:  .=(1 p.lar)
            ?~  q.lar
              [%name p.i.rop $.-.$(sut r.lar, rop t.rop)]
            $.-.$(sut r.lar, rop t.rop)
          ?:  .=(2 (cap p.lar))
            [%pair $(p.lar (mas p.lar)) ~]
          [%pair ~ $(p.lar (mas p.lar))]
        ==
      ::
      ::::
      ==
    ::::
    ::
        iris
      =+  bar=*(list type)
      =+  axe=`@`1
      |*
      ::::
      ::
          burn
        =+  [vef=? tac=*tack]
        |=
        =<  dext
        |*
        ::::
        ::
            dext
          ^-  *type  
          ?-  tac
              ~           sut
              [%leaf *]   (snap p.tac)
          ::
              [%name *]
            ?-  sut
            ::
                [%face *]
              ?:  .=(p.tac p.sut)
                [%face p.tac dext(tac q.tac, sut q.sut)]
              [%face p.tac dext(tac q.tac)]
            ::
                *<[%fork *] [%fuse *] [%hold *]>
              sint
            ::
                *
              [%face p.tac dext(tac q.tac)]
            ==
          ::
              [%pair *]
            ?-  sut
            ::
                [%cell *]
              :+  %cell
                dext(..slip (slip 2), tac p.tac)
              dext(..slip (slip 3), tac q.tac)
            ::
                [%core *]
              ?>  .=(~ q.tac)
              ?-  q.sut
              ::
                  [%hard p=*spec]
                =+  ham=dext(vef |, ..slip (slip 2), tac p.tac)
                ?>  ?|(!vef (nest(sut p.sut) ham))
                sut
              ::
                  [%soft p=*type q=*spec]
                =+  ham=dext(..slip (slip 2), tac p.tac)
                =>  .(p.sut ham)
                ?>  ?|(!vef fine)
                sut
              ==
            ::
                *<[%face *] [%fork *] [%fuse *] [%hold *]>
              sint
            ::
                *
              dext(sut [%cell (half 2) (half 3)])
            ==
          ==
        ::::
        ::
            sint
          ^-  *type
          ?-  sut
          ::
              [%face *]
            [%face p.sut dext(sut q.sut)]
          ::
              [%fork *]
            %+  swim
              =+(*type |=(`*(unit type)`[~ u=dext(sut -<)]))
            =+([*type *type] |=([%fork -<- -<+]))
          ::
              [%fuse *]
            :+  %fuse
              dext(sut p.sut, tac dull:lark_tac)
            dext(sut q.sut, bar [p.sut bar])
          ::
              [%hold *]
            dext(sut (repo(sut p.sut) q.sut))
          ==
        ::
        ::::
        ==
      ::::
      ::
          cull
        ^-  ?
        ?|
          null
          (lien bar =+(*type |=((orth -<))))
        ==
      ::::
      ::
          find
        =+  cog=*term
        |=
        %-  need
        =+  gil=*(pool &[*(list type) *type])
        |-
        ^-  *(unit plan)
        ?-  sut
            %atom       ~
            %blot       ~
            %blur       ~
            [%cube *]   ~
        ::
            [%cell *]
          (clap $(..slip (slip 2)) $(..slip (slip 3)) =+([*plan *plan] |=(-<-)))
        ::
            [%core *]
          =+  dab=?-(q.sut [%hard *] p.q.sut, [%soft *] q.q.sut)
          =+  zem=(look:gull_dab cog)
          ?~  zem
            $(..slip (slip 2))
          [~ [axe [~ (peg 3 p.u.zem) sut q.u.zem] sut]]
        ::
            [%face *]
          ?: .=(cog p.sut)
            [~ [axe ~ q.sut]]
          ~
        ::
            [%fork *]
          %+  swim
            =+(*type |=(`*(unit (unit plan))`[~ $.-.$(sut -<)]))
          =+  [lep=*(unit plan) gam=*(unit plan)]
          |=
          ?~  lep
            ?~  gam
              ~
            !!
          ?~  gam
            !!
          ?>  ?&(.=(p.u.lep p.u.gam) .=(q.u.lep q.u.gam))
          [~ [p.u.lep q.u.lep [%fork r.u.lep r.u.gam]]]
        ::
            [%fuse *]
          =+  hax=$(sut p.sut)
          =+  yor=$(sut q.sut, bar [p.sut bar])
          ?~  yor
            ?~  hax
              ~
            :-  ~
            :+  p.u.hax
              q.u.hax
            [%fuse r.u.hax (peek(sut q.sut, bar [p.sut bar]) p.u.hax)]
          ?~  hax
            [~ [p.u.yor q.u.yor [%fuse (peek(sut p.sut) p.u.yor) r.u.yor]]]
          ?:  ?&(.=(p.u.hax p.u.yor) .=(q.u.hax q.u.yor))
            [~ [p.u.hax q.u.hax [%fuse r.u.hax r.u.yor]]]
          [~ [p.u.yor q.u.yor [%fuse (peek(sut p.sut) p.u.yor) r.u.yor]]]
        ::
            [%hold *]
          ?:  (has:in_gil [bar sut])
            ~
          =>  %=(. gil (put:in_gil [bar sut]))
          $(sut (repo(sut p.sut) q.sut))
        ::
        ==
      ::::
      ::
          fish
        =+  vit=*(pool &[*(list type) *type])
        |-
        ^-  *tool
        ?-  sut
            %atom       (flop:lily [4 0 axe])
            %blur       [1 0]
            %blot       [1 1]
            [%core *]   [0 0]
            [%cube *]   [6 [1 p.sut] [0 axe]]
            [%face *]   $(sut q.sut)
            [%fuse *]   (flan:lily $(sut p.sut) $(sut q.sut, bar [p.sut bar]))
        ::
            [%cell *]
          %+  flan:lily
            [4 0 axe]
          (flan:lily $(..slip (slip 2)) $(..slip (slip 3)))
        ::
            [%fork *]
          %+  swim
            =+(*type |=(`*(unit tool)`[~ u=$.-.$(sut -<)]))
          =+([*tool *tool] |=((flor:lily -<- -<+)))
        ::
            [%hold *]
          ?<  (has:in_vit [bar sut])
          =>  %=(. vit (put:in_vit [bar sut]))
          $(vit (put:in_vit [bar sut]), sut (repo(sut p.sut) q.sut))
        ==
      ::::
      ::
          half 
        =+  had=*<2 3>
        |=
        ^-  *type
        ?-  sut
            %atom       %blot
            %blot       %blot
            %blur       %blur
            [%cell *]   ?:(.=(2 had) p.sut q.sut)
            [%core *]   ?:(.=(2 had) p.sut %blur)
            [%cube *]   ?.(.?(p.sut) %blot $(sut [%cell -.p.sut +.p.sut]))
            [%face *]   $(sut q.sut)
            [%fuse *]   [%fuse $(sut p.sut) $(sut q.sut, bar [p.sut bar])]
            [%hold *]   $(sut (repo(sut p.sut) q.sut))
        ::
            [%fork *]   
          %+  swim
            =+(*type |=(`*(unit type)`[~ u=$.-.$(sut -<)]))
          =+([*type *type] |=([%fork -<]))
        ==
      ::::
      ::
          nest
        =+  bon=*type
        |=
        ^-  ?
        ?:  null(sut bon)
          &
        ?:  null
          |
        =+  gil=*(pool &[..slip ..slip])
        =+  ref=..slip(sut bon, bar ~)
        =<  dext
        |*
        ::::
        ::
            dext
          ^-  ?
          ?-  sut
              %atom       ?-(sut.ref %atom &, [%cube *] !.?(p.sut.ref), * sint)
              %blur       &
              [%core *]   ?.(?=([%core *] sut.ref) sint .=(sut sut.ref))
              [%cube *]   ?.(?=([%cube *] sut.ref) sint .=(sut sut.ref))
              [%face *]   dext(sut q.sut)
              [%fuse *]   ?&(dext(sut p.sut) dext(sut q.sut, bar [p.sut bar]))
          ::
              [%cell *]
            ?.  ?=([%cell *] sut.ref)
              sint
            ?&
              dext(..slip (slip 2), ref (slip:ref 2))
              dext(..slip (slip 3), ref (slip:ref 3))
            ==
          ::
              [%fork *]
            ?.  ?=(*<%atom %blur [%cell *] [%cube *] [%core *]> sut.ref)
              sint
            %+  swim
              =+(*type |=(`*(unit &?)`[~ u=dext(sut -<)]))
            =+([? ?] |=(?|(-<- ->+)))
          ::
              [%hold *]
            =+  ruq=[..slip ref]
            ?|
              (has:in_gil ruq)
              dext(gil (put:in_gil ruq), sut (repo(sut p.sut) q.sut))
            ==
          ==
        ::::
        ::
            sint
          ^-  ?
          ?-  sut.ref
              %atom       |
              %blur       |
              [%cell *]   |
              [%core *]   dext(sut.ref [%cell p.sut.ref %blur])
              [%face *]   dext(sut.ref q.sut.ref)
          ::
              [%fuse *]   
            ?|
              sint(sut.ref p.sut.ref) 
              sint(sut.ref q.sut.ref, bar.ref [p.sut.ref bar.ref])
            ==
          ::
              [%cube *]               
            ?&
              .?(p.sut.ref) 
              dext(sut.ref [%cell [%cube -.p.sut.ref] [%cube +.p.sut.ref]])
            ==
          ::
              [%fork *]
            %+  swim(..slip ^@(ref))
              =+(*type |=(`*(unit &?)`[~ u=dext(sut.ref -<)]))
            =+([? ?] |=(?&(-<- ->+)))
          ::
              [%hold *]
            =+  ruq=[..slip ref]
            ?|
              (has:in_gil ruq)
              %=  dext
                gil       (put:in_gil ruq)
                sut.ref   (repo(sut p.sut.ref) q.sut.ref)
              ==
            ==
          ::
          ==
        ::
        ::::
        ==
      ::::
      ::
          peek
        =+  bow=*axis
        |=
        ?:  .=(1 bow)
          sut
        $(..slip (slip (cap bow)), bow (mas bow))
      ::::
      ::
          slip
        =+  had=*<2 3>
        |=
        %=  ..slip
          sut   (half had)
          axe   (peg axe had)
          bar   (turn bar =+(*type |=((half(sut -<) had))))
        ==
      ::::
      ::
          snap
        =+  bon=*type
        |=
        =<  dext
        |*
        ::::
        ::
          dext
          ^-  *type
          ?-  sut
              %atom       bon
              %blot       bon
              %blur       bon
              [%cube *]   bon
              [%core *]   bon
          ::
              [%cell *]
            ?.  ?=([%cell *] bon)
              sint
            :+  %cell
              dext(..slip (slip 2), bon p.bon)
            dext(..slip (slip 3), bon q.bon)
          ::
              [%face *]
            ?.  ?=([%face *] bon)
              sint
            ?:  .=(p.sut p.bon)
              [%face p.sut dext(sut q.sut, bon q.bon)]
            [%face p.sut dext(sut q.sut)]
          ::
              [%fork *]
            ?:  ?|(cull(sut p.sut) (orth(sut p.sut) bon))
              ?:  ?|(cull(sut q.sut) (orth(sut q.sut) bon))
                bon
              $(sut q.sut)
            ?:  ?|(cull(sut q.sut) (orth(sut q.sut) bon))
              $(sut p.sut)
            bon
          ::
              [%fuse *]
            dext(sut q.sut, bar [p.sut bar])
          ::
              [%hold *]
            $(sut (repo(sut p.sut) q.sut))
          ==
        ::::
        ::
          sint
          ^-  *type
          ?-  bon
            [%fork *]   [%fork dext(bon p.bon) dext(bon q.bon)]
            [%fuse *]   [%fuse dext(bon p.bon) dext(bon q.bon)]
            *           bon
          ==
        ::
        ::::
        ==
      ::::
      ::
          swim
        =+ [hef==+(*type |=(*(unit))) zan==+([* *] |=(-<-))]
        |:  |-
        =-  ?~(voc $(sut %blot) u.voc)
        ^=  voc
        |-
        ^-  (hef sut)
        ?:  ?=([%fork *] sut)
          (clap $(sut p.sut) $(sut q.sut) zan)
        ?:  cull
          ~
        (hef sut) 
      ::
      ::::
      ==
    ::
    ::::
    ==
  ::
  ::::
  ::
      lily
    |*
    ::::
    ::
        comb
      =+  [mal=*tool buz=*tool]
      |=
      ^-  *tool
      ?:  .=([0 1] buz)
        mal
      ?:  ?=([0 *] mal)
        ?:  ?=([0 *] buz)
          [0 (peg p.mal p.buz)]
        ?:  ?=([3 [0 *] [0 *]] buz)
          [3 [0 (peg p.mal p.p.buz)] [0 (peg p.mal p.q.buz)]]
        [3 mal 1 buz]
      [3 mal 1 buz]
    ::::
    ::
        cons
      =+  [vur=*tool sed=*tool]
      |=
      ^-  *tool
      ?:  ?=([[0 *] [0 *]] -<)
        ?:  ?&(.=(.^(p.vur) p.sed) .=((div p.vur 2) (div p.sed 2)))
          [0 (div p.vur 2)]
        [vur sed]
      ?:  ?=([[1 *] [1 *]] -<)
        [1 p.vur p.sed]
      [vur sed] 
    ::::
    ::
        flan
      =+  [bos=*tool nif=*tool]
      |=
      ^-  *tool
      ?-  bos
          [1 1]   bos
          [1 0]   nif
          *
        ?-  nif
          [1 1]   nif
          [1 0]   bos
          *       [2 bos nif [1 1]]
        ==
      ==
    ::::
    ::
        flor
      =+  [bos=*tool nif=*tool]
      |=
      ^-  *tool
      ?-  bos
          [1 1]   nif
          [1 0]   bos
          *
        ?-  nif
            [1 1]   bos
            [1 0]   nif
            *       [2 bos [1 0] nif]
        ==
      ==
    ::::
    ::
        flop
      =+  [hel=*tool]
      |=
      [2 hel [1 1] [1 0]]
    ::::
    ::
        hike 
      =+  [axe=*axis pac=*(list &[p=*axis q=*tool])]
      |=
      ^-  *tool
      ?~  pac
        [0 axe]
      =+  zet=(skim ^@(pac) =+([p=*axis q=*tool] |=([.=(1 p)])))
      =+  tum=(skim ^@(pac) =+([p=*axis q=*tool] |=([.=(2 (cap p))])))
      =+  har=(skim ^@(pac) =+([p=*axis q=*tool] |=([.=(3 (cap p))])))
      ?~  zet
        %+  cons
          %=  $
            axe (peg axe 2)
            pac (turn tum =+([p=*axis q=*tool] |=([(mas p) q])))
          ==
        %=  $
          axe (peg axe 3)
          pac (turn har =+([p=*axis q=*tool] |=([(mas p) q])))
        ==
      ?>(?&(.=(~ tum) .=(~ har) ?=([* ~] zet)) q.i.zet)
    ::
    ::::
    ==
  ::
  ::::
  ::
      gull
    =+  dab=*spec
    |*
    :::: XX: needs treap order.
    ::
        fill
      =+  sem=*menu
      |=
      ^-  *spec
      ?~  sem
        dab
      ?-  dab
        [%none ~]   $(dab [%leaf p.i.sem q.i.sem], sem t.sem)
        *           $(dab [[%leaf p.i.sem q.i.sem] dab], sem t.sem)
      ==
    ::::
    ::
        look
      =+  cog=*term
      |= 
      =+  axe=1
      |-
      ^-  *(unit &[p=*axis q=*gene])
      ?-  dab
        [%none ~]                 ~
        [%leaf p=*term q=*gene]   ?.(.=(p.dab cog) ~ [~ [axe q.dab]])
        [p=^+(^ *spec) q=*spec]   (clap $(dab p.dab) $(dab q.dab) =+(^ |=(!!)))
      ==
    ::::
    ::
        ride
      =+  fut==+(*gene |=(?))
      |:
      ?-  dab
        [%none ~]                 &
        [%leaf p=*term q=*gene]   (fut q.dab)
        [p=^+(^ *spec) q=*spec]   ?&($(dab p.dab) $(dab q.dab))
      ==
    ::
    ::::
    ==
  ==
==
