!:
~%    %gunn
    -<-<
  ==
    %bind  bind
    %fire  fire
    %pour  pour
    %scan  scan
    %sell  sell
    %sing  sing
    %wash  wash
  ==
=>  !% 
=>  &.
    ++  deed                             ::  command-line action
      $~  p=(sink)                       ::  data destination
          q=(well)                       ::  data source
          r=(tool)                       ::  data transformation
      ==
    ++  func                             ::  transformation function
      $^  [%body p=*gene]                ::  unwrapped code
          [%data p=@]                    ::  data of mode %watt
          [%disk p=(path)]               ::  %fund path
      ==
    ++  lard                             ::  library definition
      $^  [%data p=@]                    ::  data of mode %watt
          [%disk p=(path)]               ::  %libd path
      ==
    ++  mine                             ::  filesystem mapping
      $~  p=(mode)                       ::  noun conversion
          q=(spot)                       ::  search model 
          r=(path)                       ::  unix path
      ==
    ++  mode
      $&  %*  $*  %atom                  ::  file as flat atom
                  %auto                  ::  default
                  %blob                  ::  file as byte length, atom
                  %noun                  ::  file as noun jam
                  %text                  ::  file as list of list of chars
                  %watt                  ::  watt source as atom
              ==
        [%dlog p=(mode)]                 ::  directory as list of files
        [%dnog p=(mode)]                 ::  directory as list of name, file
      ==
    ++  path  (list tape)                ::  unix path
    ++  sink
      $&  ~                              ::  print to screen with label
        [%disk p=(mine)]                 ::  write to filesystem
        [%name p=*term]                  ::  add to environment
        [%tupl p=((list sink))]          ::  tuple
      ==
    ++  spot                             ::  filesystem search model
      $*  %curd                          ::  current directory
          %fund                          ::  function directory
          %home                          ::  home directory
          %libd                          ::  library directory
          %resd                          ::  resource directory
          %root                          ::  root path
      ==
    ++  tool                             ::  transformation
      $~  p=((list lard))                ::  libraries
          q=(func)                       ::  function
      ==
    ++  vase  ~[p=*type q=*]             ::  type-value pair
    ++  well                             ::  data source
      $&  ~                              ::  null
        [%chew p=*gene q=((list well))]  ::  construct and filter
        [%data p=(mode) q=*]             ::  data as produced
        [%disk p=(mine)]                 ::  read from filesystem
        [%gene p=*gene]                  ::  direct gene
        [%name p=*term q=(well)]         ::  named
        [%tupl p=((list well))]          ::  tuple
      ==
    --
=>  &.
    ++  x-path  ~+
      (most (just '/') (star ;~(pose aln cab dot sep)))
    ::
    ++  x-mode
      %+  knee  *mode  |.  ~+
      ;~  pose
        ;~  sfix  
          ;~  pose
            (cold %atom (just 'a'))
            (cold %blob (just 'b'))
            (stag %dlog ;~(pfix (just 'l') x-mode))
            (stag %dnog ;~(pfix (just 'm') x-mode))
            (cold %noun (just 'n'))
            (cold %text (just 't'))
            (cold %watt (just 'w'))
          ==
          hes
        ==
        (easy %auto)
      ==
    ::
    ++  x-mine  ~+
      ;~  plug
        x-mode
        ;~  pose
          (cold %root von)
          (cold %home ;~(plug dot von))
          %+  ifix
            [sig von]
          ;~  pose
            (cold %fund (just 'f'))
            (cold %libd (just 'l'))
            (cold %resd (just 'r'))
          ==
        ==
        x-path
      ==
    ::
    ++  x-deed  ~+
      ;~(plug x-sink x-well x-tool)
    ::
    ++  x-sink
      %+  knee  *sink  |.  ~+
      ;~  pose
        ;~  pfix  led
          ;~  pose
            (stag %disk x-mine)
            (stag %name ;~(pfix lyc sym))
            ::  (stag %comd ;~(pfix bar qut))
            (stag %tupl (ifix [den ned] (most ace x-sink)))
            (cold ~ sig)
          ==
        ==
        (easy ~)
      ==
    ::
    ++  x-tool  ~+
      ;~  pose
        ;~  plug
          (star (stag %disk ;~(pfix ket x-path)))
          ;~  pose
            (stag %disk ;~(pfix deg x-path))
            (stag %body ;~(pfix pes vest))
          ==
        ==
        ;~  plug
          (easy ~)
          (stag %body vest)
        ==
      ==
    ::
    ++  x-well
      %+  knee  *well  |.  ~+
      ;~  pose
        ;~  pfix  del
          ;~  pose
            ::  (stag %comd ;~(pfix bar qut))
            (stag %disk x-mine)
            (stag %tupl (ifix [den ned] (most ace x-well)))
            (stag %name ;~(plug sym ;~(pfix lyc x-well)))
            (stag %gene vest)
          ==
        ==
        (easy ~) 
      ==
    --
=+  env=seed
&.
++  bask                                                ::  apply a gene
  |=  [gol=*type gen=*gene]  ~|  %bask  ^-  *vase
  =+  gun=(~(mint ut p.env) gol gen)
  [p.gun .*(q.gun q.env)]
::
++  bind                                                ::  set a variable
  |=  [nam=*term vax=*vase]  ~|  %bind  ^-  ..bind
  ..bind(env [[%cell p.env [%face nam p.vax]] [q.env q.vax]])
::
++  cook                                                ::  mold from mode
  |=  mad=*mode  ~|  cook  ^-  *gene
  ?-    mad
      *{%atom %watt}
    [%hssg [[%tmlc %atom] ~] ~]
  ::
      %blob
    [%hssg [[%ktlc %l [%tmlc %atom]] [%ktlc %d [%tmlc %atom]] ~] ~]
  ::
      [%dlog *]
    [%mtdg %list $(mad p.mad)]
  ::
      [%dnog *]
    [%mtdg %list [%hssg [[%ktlc %n %tape] [%ktlc %v $(mad p.mad)] ~] ~]]
  ::
      %noun
    [%hssg [[%tmlc %noun] ~] ~]
  ::
      %text
    %wall
  ==
::
++  fire                                                ::  call by vase
  |=  [gat=*vase sam=*vase]  ~|  %fire
  =+  typ=^-(*type [%cell p.gat p.sam])
  =+  gen=^-(*gene [%ktsp [~ 2] [~ 3]])
  =+  gun=(~(mint ut typ) %noun gen)
  :-  p.gun
  .*([q.gat q.sam] q.gun) 
::
++  pour                                                ::  construct source
  |=  wul=*well  ~|  %pour  ^-  *vase
  =-  (bask %noun gen)
  ^=  gen  |-  ^-  *gene
  ?-    wul
      ~
    [%tmlc %null]
  ::
      [%chew *]
    [%mtdg p.wul $(wul [%tupl q.wul])]
  ::
      [%data *]
    [%mtdg (cook p.wul) [%dtsg %% q.wul]]
  ::
      [%gene *]
    p.wul
  ::
      [%name *]
    [%ktlc p.wul $(wul q.wul)]
  ::
      [%tupl *]
    [%dgtr (turn p.wul |=(a=*well $$(wul a)))]
  ==
::
++  scan                                                ::  parse a command
  |=  cad=''  ~|  %scan  ^-  *deed
  (rash cad x-deed)
::
++  sell
  |=  [lab=*term vax=*vase]  ~|  %sell  ^-  *tank       ::  render a result
  =+  dis=~(donc ut p.vax)
  =+  dat=(~(deal ut p.vax) q.vax)
  ?:  =(%% lab)
    [%palm [~ ~ ~ ~] dis dat ~]
  [%palm [['.' ~] [':' ~] ~ ~] [%leaf (mesc (rip 3 lab))] dis dat ~]
::
++  sing                                                ::  apply function
  |=  [awl=*tool vax=*vase]  ~|  %sing  ^-  *vase 
  =+  ^=  lib  |-  ^-  *gene
      =+  lib=[~ 1]
      ?~  p.awl
        lib
      :+  %lcld
        ?>(?=([%data *] i.p.awl) (rash p.i.p.awl vest)) 
      $(p.awl t.p.awl)
  =+  vyn=(bask %noun lib)
  ?-    q.awl
      [%body *]
    =+  
  ==
::
++  wash                                                ::  print tank
  |=  [[tab=0 edg=80] tac=*tank]  ~|  %wash  ^-  *wall
  (~(win re tac) tab edg) 
--
