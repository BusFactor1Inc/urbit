!:
~%    %gunn
    -<-<
  ==
    %bind  bind
    %draw  draw
    %pour  pour
    %scan  scan
    %slam  slam
    %sell  sell
    %wash  wash
  ==
=>  !% 
=>  &.
    ++  deed                             ::  command-line action
      $~  p=(vent)                       ::  data destination
          q=(fuel)                       ::  data source
          r=(tool)                       ::  data transformation
      ==
    ++  fuel                             ::  data source
      $&  ~                              ::  null
        [%chew p=*gene q=((list fuel))]  ::  construct and filter
        [%data p=(mode) q=*]             ::  data as produced
        [%disk p=(mine)]                 ::  read from filesystem
        [%gene p=*gene]                  ::  direct gene
        [%many p=((list fuel))]          ::  many
        [%name p=*term q=(fuel)]         ::  named
      ==
    ++  func                             ::  transformation function
      $^  [%body p=*gene]                ::  unwrapped code
          [%data p=@]                    ::  data of mode %watt
          [%disk p=(path)]               ::  %fund path
      ==
    ++  lard                             ::  library definition
      $^  [%data p=@]                    ::  data of mode %watt
          [%disk p=(path)]               ::  %libd path
      ==
    ++  mine                             ::  filesystem mapping
      $~  p=(mode)                       ::  noun conversion
          q=(spot)                       ::  search model 
          r=(path)                       ::  unix path
      ==
    ++  mode
      $&  %*  $*  %atom                  ::  file as flat atom
                  %auto                  ::  default
                  %blob                  ::  file as byte length, atom
                  %noun                  ::  file as noun jam
                  %text                  ::  file as list of list of chars
                  %watt                  ::  watt source as atom
              ==
        [%dlog p=(mode)]                 ::  directory as list of files
        [%dnog p=(mode)]                 ::  directory as list of name, file
      ==
    ++  path  (list tape)                ::  unix path
    ++  vent
      $&  ~                              ::  print to screen with label
        [%disk p=(mine)]                 ::  write to filesystem
        [%many p=((list vent))]          ::  tuple
        [%name p=*term]                  ::  add to environment
      ==
    ++  spot                             ::  filesystem search model
      $*  %curd                          ::  current directory
          %fund                          ::  function directory
          %home                          ::  home directory
          %libd                          ::  library directory
          %resd                          ::  resource directory
          %root                          ::  root path
      ==
    ++  tool                             ::  transformation
      $~  p=((list lard))                ::  libraries
          q=(func)                       ::  function
      ==
    ++  vase  ~[p=*type q=*]             ::  type-value pair
    --
=>  &.
    ++  x-path  ~+
      (most (just '/') (star ;~(pose aln cab dot sep)))
    ::
    ++  x-fuel
      %+  knee  *fuel  |.  ~+
      ;~  pose
        ;~  pfix  del
          ;~  pose
            ::  (stag %comd ;~(pfix bar qut))
            (stag %disk x-mine)
            (stag %many (ifix [den ned] (most ace x-fuel)))
            (stag %name ;~(plug sym ;~(pfix lyc x-fuel)))
            (stag %gene vest)
          ==
        ==
        (easy ~) 
      ==
    ::
    ++  x-mode
      %+  knee  *mode  |.  ~+
      ;~  pose
        ;~  sfix  
          ;~  pose
            (cold %atom (just 'a'))
            (cold %blob (just 'b'))
            (stag %dlog ;~(pfix (just 'l') x-mode))
            (stag %dnog ;~(pfix (just 'm') x-mode))
            (cold %noun (just 'n'))
            (cold %text (just 't'))
            (cold %watt (just 'w'))
          ==
          hes
        ==
        (easy %auto)
      ==
    ::
    ++  x-mine  ~+
      ;~  plug
        x-mode
        ;~  pose
          (cold %root von)
          (cold %home ;~(plug dot von))
          %+  ifix
            [sig von]
          ;~  pose
            (cold %fund (just 'f'))
            (cold %libd (just 'l'))
            (cold %resd (just 'r'))
          ==
        ==
        x-path
      ==
    ::
    ++  x-deed  ~+
      ;~(plug x-vent x-fuel x-tool)
    ::
    ++  x-tool  ~+
      ;~  pose
        ;~  plug
          (star (stag %disk ;~(pfix ket x-path)))
          ;~  pose
            (stag %disk ;~(pfix deg x-path))
            (stag %body ;~(pfix pes vest))
          ==
        ==
        ;~  plug
          (easy ~)
          (stag %body vest)
        ==
      ==
    ::
    ++  x-vent
      %+  knee  *vent  |.  ~+
      ;~  pose
        ;~  pfix  led
          ;~  pose
            (stag %disk x-mine)
            (stag %name ;~(pfix lyc sym))
            ::  (stag %comd ;~(pfix bar qut))
            (stag %many (ifix [den ned] (most ace x-vent)))
            (cold ~ sig)
          ==
        ==
        (easy ~)
      ==
    --
=+  env=seed
&.
::
++  bind                                                ::  set a variable
  |=  [nam=*term vax=*vase]  ~|  %bind  ^-  ..bind
  ..bind(env [[%cell p.env [%face nam p.vax]] [q.env q.vax]])
::
++  draw                                                ::  mold from mode
  |=  mad=*mode  ~|  %draw  ^-  *gene
  ?-    mad
      *{%atom %watt}
    [%hssg [[%tmlc %atom] ~] ~]
  ::
      %blob
    [%hssg [[%ktlc %l [%tmlc %atom]] [%ktlc %d [%tmlc %atom]] ~] ~]
  ::
      [%dlog *]
    [%mtdg %list $(mad p.mad)]
  ::
      [%dnog *]
    [%mtdg %list [%hssg [[%ktlc %n %tape] [%ktlc %v $(mad p.mad)] ~] ~]]
  ::
      %noun
    [%hssg [[%tmlc %noun] ~] ~]
  ::
      %text
    %wall
  ==
:: 
++  pour                                                ::  gene in env
  |=  gen=*gene  ~|  %pour  ^-  *vase
  =+  gun=(~(mint ut p.env) %noun gen)
  [p.gun .*(q.env q.gun)]
::
++  ride                                                ::  execute deed
  |=  [tul=*tool wul=*fuel]  ~|  %ride  ^-  *vase
  =+  ^=  gul  |-  ^-  *vase
      ?-    wul
          ~
        [[%atom %n] ~]
      ::
          [%chew *]
        (slam (pour p.wul) $(wul [%many q.wul]))
      ::
          [%data *]
        =+  typ=p:(pour (draw p.wul))
        ?.  (~(firm ut typ) q.wul)
          ~|(%ride-data !!)
        [typ q.wul]
      ::
          [%many *]
        |-  ^-  *vase
        ?-    p.wul 
            [* ~]  $$(wul i.p.wul)
            ^      
          =+  [tug=$(p.wul t.p.wul) nob=$$(wul i.p.wul)]
          [[%cell p.tug p.nob] [q.tug q.nob]]
        ==
      ::
          [%name *]
        =+  pan=$(wul q.wul)
        [[%face p.wul p.pan] q.pan]
      ==
  =+  ^=  hyn  |-  ^-  *vase
      ?~  p.tul
        env
      $(env (pour ?>(?=([%data *] i.p.tul) (rash p.i.p.tul vest))))
  ?-    q.tul
      [%body *]
    =+  ^=  typ  ^-  *type
        [%core p.gul [%gold p.gul [~ [[%% & & p.q.tul] ~ ~]]]]
    =+  dev=[typ [q.gul q:(~(mint ut typ) %noun p.q.tul)]]
    =+  gun=(~(mint ut typ) %noun %%)
    [p.gun .*(dev q.gun)]
  ::
      [%data *]
    (slam (pour(env hyn) (rash p.q.tul vest)) gul)
  ==
::
++  scan                                                ::  parse a command
  |=  cad=''  ~|  %scan  ^-  *deed
  (rash cad x-deed)
::
++  sell
  |=  [lab=*term vax=*vase]  ~|  %sell  ^-  *tank       ::  render a result
  =+  dis=~(donc ut p.vax)
  =+  dat=(~(deal ut p.vax) q.vax)
  ?:  =(%% lab)
    [%palm [~ ~ ~ ~] dis dat ~]
  [%palm [['.' ~] [':' ~] ~ ~] [%leaf (mesc (rip 3 lab))] dis dat ~]
::
++  slam                                                ::  vase call
  |=  [gat=*vase sam=*vase]  ~|  %slam  ^-  *vase
  =+  :-  ^=  typ  ^-  *type
          [%cell p.gat p.sam]
      ^=  gen  ^-  *gene
      [%mtdg [~ 2] [~ 3]]
  =+  gun=(~(mint ut typ) %noun gen)
  [p.gun .*([q.gat q.sam] q.gun)]
::
++  wash                                                ::  print tank
  |=  [[tab=0 edg=80] tac=*tank]  ~|  %wash  ^-  *wall
  (~(win re tac) tab edg) 
--
