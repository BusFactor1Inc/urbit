  ::
  ++  mull
    ~.  %mull
    |=  [gol=*type dox=*type gen=*gene]
    ^-  ?
    ?.  vet
      &
    =<  &
    &-  ^-  [p=*type q=*type]
    ?:  =(%void sut)
      ~|(%mull-none !!)
    ?-    gen
        [%cslc *]
      =+  waz=$(gen p.gen)
      =+  syx=[p=(coke q.gen) q=(coke(sut dox) q.gen)]
      =+  pov=[p=(fish(sut p.waz) p.syx) q=(fish(sut q.waz) q.syx)]
      ?.  &(=(p.syx q.syx)  =(p.pov q.pov))
        ~|(%mull-bonk-a !!)
      (damp flag)
    ::
        [%csdg *]
      =+  nor=$(gen p.gen, gol flag)
      =+  ^=  hiq  ^-  [p=*type q=*type]
          =+  fex=[p=(gain p.gen) q=(gain(sut dox) p.gen)]
          ?:  =(%void p.fex)
            [%void (play(sut dox) q.gen)]
          ?:  =(%void q.fex)
            ~|(%mull-bonk !!)
          $(sut p.fex, dox q.fex, gen q.gen)
      =+  ^=  ran  ^-  [p=*type q=*type]
          =+  wux=[p=(lose p.gen) q=(lose(sut dox) p.gen)]
          ?:  =(%void p.wux)
            [%void (play(sut dox) r.gen)]
          ?:  =(%void q.wux)
            ~|(%mull-bonk !!)
          $(sut p.wux, dox q.wux, gen r.gen)
      [(nice (fork p.hiq p.ran)) (fork q.hiq q.ran)]
    ::
        [%dgsp *]
      =+  hed=$(gen p.gen, gol %noun)
      =+  tal=$(gen q.gen, gol %noun)
      [(nice (cell p.hed p.tal)) (cell q.hed q.tal)]
    ::
        [%dtlc *]  =+([$(gen p.gen) $(gen q.gen)] (damp flag))
        [%dtcs *]  =+($(gen p.gen) (damp flag))
        [%dtps *]  =+($(gen p.gen, gol [%atom %%]) (damp [%atom %%]))
        [%dtsg *]  (damp [%cube q.gen ?:(.?(q.gen) [%atom p.gen] %noun)])
        [%dttr *]  =+([$(gen p.gen) $(gen q.gen)] (damp %noun))
        [%dtwt *]  (damp [%atom p.gen])
        [%ktlc *]  
      =+(vat=$(gen q.gen) [(face p.gen p.vat) (face p.gen q.vat)])
    ::
        [%ktdl *]
      =+  ryd=$(gen ~(late ap gen), gol %noun)
      [(nice (fine %very (play p.gen) p.ryd)) q.ryd]
    ::
        [%ktld *]
      =+  ryd=$(gen ~(late ap gen), gol %noun)
      [(nice (fine %pure (play p.gen) p.ryd)) q.ryd]
    ::
        [%ktsg *]  $(gen p.gen)
        [%ktsp *]
      =+  hif=[(play p.gen) (play(sut dox) p.gen)]
      =+($(gen q.gen, gol p.hif) hif)
    ::
        [%lcld *]                               
      =+  lem=$(gen p.gen, gol %noun)
      $(gen q.gen, sut p.lem, dox q.lem)
    ::
        [%mtlc *] 
      =+  lar=(foil (seek %read p.gen))
      =+  vug=(foil (seek(sut dox) %read p.gen))
      ?.  &(=(p.lar p.vug) =(p.q.lar p.q.vug))
        ~|(%mull-bonk !!)
      =+  mew=(swab q.q.lar q.gen)
      ?.  =(mew (swab q.q.vug q.gen))
        ~|(%mull-bonk !!)
      =-  [(nice (fire p.yom)) (fire(vet |) q.yom)]
      ^=  yom  
      |-  ^-  [p=*(list ~[p=*type q=*gate]) q=*(list ~[p=*type q=*gate])]
      ?~  mew
        [q.q.lar q.q.vug]
      =+  zil=$$(gen q.i.mew)
      =+  cuf=(tock p.i.mew p.zil q.q.lar)
      =+  dof=(tock p.i.mew q.zil q.q.vug)
      ?.  .=(p.cuf p.dof)
        ~|(%mull-bonk !!)
      $(q.q.lar q.cuf, q.q.vug q.dof)
    ::
    ::
    ::
        [%pmdg *]  (grow %zinc [%dgsp [~ 1] p.gen] q.gen)
        [%pmdt *]  (grow %gold [~ 1] p.gen)
        [%pmmt *]  (grow %lead [~ 1] p.gen)
        [%pmps *]  (grow %iron [%dgsp [~ 1] p.gen] q.gen)
        [%sgld *]  $(gen q.gen)
        [%zpcm *]  (play p.gen)
        [%zpcb *]  ~~((show %o p.gen) $(gen q.gen))  
        [%zpdx *]  ~#($(gen p.gen))
        [%zplc *]  %noun
        [%zpmt ~]  p:seed
        [%zptm *]  (cell $(gen p.gen) $(gen q.gen))
        [%zpzp ~]  %void
        *          =+  doz=~(open ap gen) 
                   ?:  =(doz gen)
                     ~~  (show [%c 'gene'] [%q gen])
                     ~|(%mull-open !!)
                   $(gen doz)
    ==
    ::
    ++  nice
      |=  typ=*type
      ?.  ?|(!vet (nest(sut gol) typ))
        ~~  (dunk(sut gol) 'need')
        ~~  (dunk(sut typ) 'have')
        ~|('mint-nice' !!)
      typ
    ::
    ++  grow
      |=  [mel=*{%gold %iron %lead %zinc} ruf=*gene dab=*(map term foot)]
      ^-  *type
      =+  dan=$(gen ruf)
      (core dan mel dan [[0 0] dab])
    ::
    --
