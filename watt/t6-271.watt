::::
::
    gene
  |?
    [%dtsg p=*]                                                 ::  .~  dotsig
  ::
    [%bndr p=*gene q=*gene]                                     ::  =<  bender
    [%bnnb p=*gene q=*gene]                                     ::  =-  bennub
    [%bnpd p=*gene q=*gene]                                     ::  =+  benpod
    [%bnrd p=*gene q=*gene]                                     ::  =>  benred
  ::
    [%brbn p=*gene]                                             ::  |=  barben
    [%brdg p=*gene]                                             ::  |:  bardig
    [%brmt p=*(list &[p=*term q=*gene])]                        ::  |%  barmit
    [%brnb p=*gene]                                             ::  |-  barnub
    [%brrs p=*(list &[p=*term q=*gene])]                        ::  |*  barras
    [%brsg p=*(list gene)]                                      ::  |~  barsig
    [%brsk p=*(list gene)]                                      ::  |?  barask
  ::
    [%dght p=*gene q=*gene r=*gene s=*gene]                     ::  :^  dighat
    [%dgnb p=*gene q=*gene]                                     ::  :-  dignub
    [%dgpd p=*gene q=*gene r=*gene]                             ::  :+  digpod
    [%dgrs p=*(list gene)]                                      ::  :*  digras
    [%dgsg p=*(list gene)]                                      ::  :~  digsig
  :: 
    [%dtbn p=*gene q=*gene]                                     ::  .=  dotben
    [%dtht p=*gene]                                             ::  .^  dothat
    [%dtrs p=*gene q=*gene]                                     ::  .*  dotras
    [%dtsk p=*gene]                                             ::  .?  dotask
  ::
    [%hpbn p=*gene]                                             ::  !=  hopben
    [%hpcb p=[p=[p=@ q=@] q=[p=@ q=@]] q=*gene]                 ::  !_  hopcab
    [%hpdg p=*gene]                                             ::  !:  hopdig
    [%hpdx p=*gene]                                             ::  !#  hopdax
    [%hphp ~]                                                   ::  !!  hophop
    [%hpmt ~]                                                   ::  !%  hopmit
    [%hptc p=*gene]                                             ::  !`  hoptic
  ::
    [%htbn p=*term q=*gene]                                     ::  ^=  hatben
    [%htdg p=*gene q=*gene]                                     ::  ^:  hatdig
    [%htdr p=*gene q=*gene]                                     ::  ^<  hatder
    [%htmt p=*gene q=*gene]                                     ::  ^%  hatmit
    [%htnb p=*gene q=*gene]                                     ::  ^-  hatnub
    [%htpd p=*gene q=*gene]                                     ::  ^+  hatpod
    [%htrd p=*gene q=*gene]                                     ::  ^>  hatred
    [%htrs p=*gene]                                             ::  ^*  hatras
    [%htsg p=*gene]                                             ::  ^~  hatsig
  ::
    [%lmbn p=*<%atom %blur %cell %flag %null>]                  ::  ;=  lomben
    [%lmnb p=*gene]                                             ::  ;-  lomnub
    [%lmpd p=*gene]                                             ::  ;+  lompod
  ::
    [%mtbn p=*rope q=*(list &[p=*gene q=*gene])]                ::  %=  mitben
    [%mtbr p=*rope q=*gene r=*(list &[p=*gene q=*gene])]        ::  %|  mitbar
    [%mtcb p=*axis]                                             ::  %_  mitcab
    [%mtdg p=*gene q=*gene]                                     ::  %:  mitdig
    [%mtdt p=*gene q=*gene]                                     ::  %.  mitdot
    [%mtht p=*gene q=*gene r=*gene s=*gene]                     ::  %^  mithat
    [%mtmp p=*term]                                             ::  %   mitamp
    [%mtnb p=*gene q=*(list gene)]                              ::  %-  mitnub  
    [%mtpd p=*gene q=*gene r=*gene]                             ::  %+  mitpod
    [%mtrs p=*gene]                                             ::  %*  mitras
    [%mtsg p=*rope q=*gene r=*gene]                             ::  %~  mitsig
  ::
    [%skbn p=*gene q=*gene]                                     ::  ?=  askben
    [%skbr p=*(list gene)]                                      ::  ?|  askbar
    [%skdg p=*gene q=*gene r=*gene]                             ::  ?:  askdig
    [%skdr p=*gene q=*gene]                                     ::  ?<  askder
    [%skdt p=*gene q=*gene r=*gene]                             ::  ?.  askdot
    [%skhp p=*gene]                                             ::  ?!  askhop
    [%skmp p=*(list gene)]                                      ::  ?&  askamp
    [%sknb p=*gene q=*(list &[p=*gene q=*gene])]                ::  ?-  asknub
    [%skrd p=*gene q=*gene]                                     ::  ?>  askred
    [%skrs p=*gene q=*(list gene)]                              ::  ?*  askras
    [%sksg p=*gene q=*gene r=*gene]                             ::  ?~  asksig
  ==
::::
::
    open
  =+  gen=*gene
  |=
  ^-  *gene
  =<  base
  |*
  ::::
  ::
      mast
    =+  gen=*gene
    |=
    ^-  *gene
    =<  pax
    |*
    ::::
    ::
        pax
      ^-  *gene
      ?-    gen
          [%mtrs *]   p.gen
      ::
          [%hpcb *]   [%hpcb p.gen pax(gen q.gen)]
      ::
          [%hpdx *]   [%hpdx pax(gen p.gen)]
      ::
          [%htmt *]
        :+  %bnpd
          [%htsg [%htrs q.gen]]
        :+  %brbn
          ~
        :+  %bnrd
          [%mtbn ~ {[[%mtcb 4] [%mtnb pax(gen q.gen) [%mtcb 4] ~]]}]
        (fix(gen p.gen) 4)
      ::
          [%htnb *]   
        [%bnpd [%htsg [%htrs q.gen]] [%brbn ~ (fix(gen p.gen) 4)]]
      ::
          [%htpd *]   pax(gen q.gen)
      ::
          *           
        =+  bog=(open gen)
        ?.  .=(bog gen)
          pax(gen bog)
        [%bnpd [%htsg [%htrs gen]] [%brbn ~ (fix 4)]]
      ==
    ::::
    ::
        fix
      =+  [axe=*axis]
      |=
      ^-  *gene
      ?-    gen
          [%htnb *]   $(gen p.gen)
          [%mtrs *]   [%mtnb p.gen [%mtcb axe] ~]
          [%htpd *]   $(gen q.gen)
          [%htbn *]   [%htbn p.gen $(gen q.gen)]
          [%hpcb *]   [%hpcb p.gen $(gen q.gen)]
          [%hpdx *]   [%hpdx $(gen p.gen)]
      ::
          [%dgnb *]
        :+  %dgnb
          $(gen p.gen, axe (peg axe 2))
        $(gen q.gen, axe (peg axe 3))
      ::
          [%htmt *]
        :+  %bnrd
          [%mtbn ~ {[[%mtcb axe] [%mtnb $$(gen q.gen) [%mtcb axe] ~]]}]
        $(gen p.gen)
      ::
          *
        =+  bog=(open gen)
        ?.  .=(bog gen)
          $(gen bog)
        [%skrd [%skbn gen [%mtcb axe]] [%mtcb axe]]
      ==
    ==
  ::::
  ::
      fist
    =+  gen=*gene
    |=
    ^-  *gene
    ?-  gen
        [%dgnb *]   [%dgnb $(gen p.gen) $(gen q.gen)]
    ::
        [%dtsg *]   gen
    ::
        [%hpcb *]   [%hpcb p.gen $(gen q.gen)]
    ::
        [%hpdx *]   [%hpdx $(gen p.gen)]
    ::
        [%htnb *]   [%htnb p.gen $(gen q.gen)]
    ::
        [%htmt *]   [%htmt $(gen p.gen) $(gen q.gen)]
    ::
        [%htbn *]   [%htbn p.gen $(gen q.gen)]
    ::
        [%htpd *]   $(gen p.gen)
    ::
        [%lmbn *]   gen
    ::
        [%lmpd *]   $(gen p.gen)
    ::
        [%mtrs *]   
      ?.  ?=([%brsk *] p.gen)
        [%lmbn %blur]
      gen(p.p (turn p.p.gen =+(*gene |=($$(gen -<)))))
    ::
        *           
      =+  bog=(open gen)
      ?:  .=(bog gen)
        [%lmbn %blur]
      $(gen bog)
    ==
  ::::
  ::
      base
    ?-    gen
    ::
        [%brbn *]   [%brrs p.gen [[%% q.gen] ~]]                        ::  |=
    ::
        [%brdg *]   [%brmt p.gen [[%% q.gen] ~]]                        ::  |:
    ::
        [%brnb *]   [%bnrd [%brbn p.gen q.gen] [%mtmp %%]]              ::  |-
    ::
        [%brsg *]                                                       ::  |~
      |-
      ?-  q.gen
          ~       !!
          [* ~]   i.q.gen
      ::
          ^
        :+  %bnpd
          $(q.gen t.q.gen)
        :+  %bnpd
          [%bnrd [%mtcb 3] i.q.gen]
        :+  %bnpd
          [%mtcb 8]
        :+  %brdg
          ~
        :^    %mtpd
            [%bnrd [%mtcb 23] p.gen]
          [%mtnb [%mtcb 10] [%mtcb 4] ~]
        [%mtbn {[%mtcb 22]} {[[%mtcb 4] [%mtcb 4]]}]
      ==
    ::
        [%brsk *]                                                       ::  |?
      ?~  p.gen
        [%hphp ~]
      [%bnpd [%htrs i.p.gen] [%brbn ~ [%skrs [%mtcb 4] p.gen]]]
    ::
        [%bndr *]   [%bnrd q.gen p.gen]                                 ::  =<
    ::
        [%bnnb *]   [%bnpd q.gen p.gen]                                 ::  =-
    ::
        [%bnpd *]   [%bnrd [%dgnb p.gen [%mtcb 1]] q.gen]               ::  =+
    ::
        [%dght *]   [%dgnb p.gen [%dgnb q.gen [%dgnb r.gen s.gen]]]     ::  :^
    ::
        [%dgpd *]   [%dgnb p.gen [%dgnb q.gen r.gen]]                   ::  :+
    ::
        [%dgrs *]                                                       ::  :*
      |-
      ?-(p.gen ~ [%hphp ~], [* ~] i.p.gen, ^ [%dgnb i.p.gen $(p.gen t.p.gen)])
    ::
        [%dgsg *]                                                       ::  :~
      |-
      ?~(p.gen [%dtsg ~] [%dgnb i.p.gen $(p.gen t.p.gen)])
    ::
        [%hpcb *]   q.gen                                               ::  !_
    ::
        [%hpdx *]   p.gen                                               ::  !#
    ::
        [%hptc *]   [%dtsg p.gen]                                       ::  !`
    ::
        [%htdg *]                                                       ::  ^:
      :+  %bnpd
        q.gen
      [%bndr [%mtcb 2] [%htpd [%bnrd [%mtcb 3] p.gen] [%mtcb 2]]]
    ::
        [%htmt *]                                                       ::  ^%
      :+  %bnpd 
        q.gen 
      :+  %sknb
        [%mtcb 2]
      {[[%bnrd [%mtcb 3] p.gen] [%mtcb 2]]}
    ::
        [%htdr *]                                                       ::  ^<
      [%bndr [%htrd p.gen [%mtcb 1]] q.gen]
    ::
        [%htrs *]   [%htnb [%lmbn %blur] p.gen]                         ::  ^*
    ::
        [%htsg *]   p.gen                                               ::  ^~
    ::
        [%lmbn *]                                                       ::  ;=
      ?-  p.gen
        %atom   [%htnb [%dtht %dtsg 0] [%dtsg 0]]
        %blur   [%htnb [%dtrs [%dtsg 0] [%dtsg 0]] [%dtsg 0]]
        %cell   [%dgnb [%lmbn %blur] [%lmbn %blur]]
        %flag   [%htnb [%dtsk %dtsg 0] [%dtsg 0]]
        %null   [%dtsg 0]
      ==
    ::
        [%lmnb *]   (mast p.gen)                                        ::  ;-
    ::
        [%lmpd *]   (fist p.gen)                                        ::  ;+
    ::  
        [%mtbr *]                                                       ::  %|
      :+  %bnpd
        q.gen
      :+  %mtbn
        [[%mtcb 2] p.gen]
      (turn r.gen =+([*gene *gene] |=([-<- [%bnrd [%mtcb 3] -<+]])))
    ::
        [%mtcb *]   [%mtbn {gen} ~]                                     ::  %_
    ::
        [%mtdg *]   [%mtsg {%%} p.gen q.gen]                            ::  %:
    ::
        [%mtdt *]   [%mtnb q.gen {p.gen}]                               ::  %.
    ::
        [%mtht *]   [%mtnb p.gen q.gen r.gen s.gen ~]                   ::  %^
    ::
        [%mtmp *]   [%mtbn {gen} ~]                                     ::  %&
    ::
        [%mtnb *]                                                       ::  %-  
      ?~  q.gen
        [%bnrd p.gen [%mtmp %%]]
      [%mtdg p.gen [%dgrs q.gen]]
    ::                                                                  ::  %+
        [%mtpd *]   [%mtnb p.gen q.gen r.gen ~]
    ::
        [%mtrs *]   [%htsg [%bnrd p.gen [%mtbn {[%mtmp %%]} ~]]]        ::  %*
    ::
        [%mtsg *]                                                       ::  %~
      [%mtbr p.gen q.gen {[[%mtcb 4] r.gen]}]
    ::
        [%skbr *]                                                       ::  ?|
      |- 
      ?~(p.gen [%dtsg 1] [%skdg i.p.gen [%dtsg 0] $(p.gen t.p.gen)])
    ::
        [%skdr *]   [%skdg p.gen [%hphp ~] q.gen]                       ::  ?<
    ::
        [%skdt *]   [%skdg p.gen r.gen q.gen]                           ::  ?.
    ::
        [%skhp *]   [%skdg p.gen [%dtsg 1] [%dtsg 0]]                   ::  ?!
    ::
        [%skmp *]                                                       ::  ?&
      |-
      ?~(p.gen [%dtsg 0] [%skdg i.p.gen $(p.gen t.p.gen) [%dtsg 1]])
    ::
        [%sknb *]                                                       ::  ?-
      |-
      ?~  q.gen
        [%hphp ~]
      :^    %skdg
          [%skbn (fist p.i.q.gen) p.gen]
        :+  %bnrd
          [%htpd p.i.q.gen p.gen]
        q.i.q.gen
      $(q.gen t.q.gen)
    ::
        [%skrd *]   [%skdg p.gen q.gen [%hphp ~]]                       ::  ?>
    ::
        [%skrs *]                                                       ::  ?*
      |-
      ?~  q.gen
        [%hphp ~]
      :^    %skdg
          [%skbn (fist i.q.gen) p.gen]
        [%mtnb (mast i.q.gen) p.gen ~]
      $(q.gen t.q.gen)
    ::
        [%sksg *]                                                       ::  ?~
      [%sknb p.gen {[[%dtsg 0] q.gen] [[%lmbn %cell] r.gen]}]
    ::
        *   
      gen
    ==
  ==
::::
::
    rake
  =+  gen=*gene
  |=
  ^-  *rope
  ?-  gen
    [%mtbn * ~]   p.gen
    [%mtmp *]     {gen}
    [%mtcb *]     {gen}
    [%hpcb *]     $(gen q.gen)
    [%hpdx *]     $(gen p.gen)
  ==
::
    rope  (list <^+(@ *term) [~ p=*axis]>)
::::
::
    tool
  |?
    [0 p=@]
    [1 p=*]
    [2 p=*tool q=*tool]
    [3 p=*tool]
    [4 p=*tool]
    [5 p=*tool q=*tool]
    [6 p=*tool q=*tool r=*tool]
    [7 p=*tool q=*tool]
    [8 p=*tool q=*tool]
    [9 p=*tool q=*tool]
    [10 p=*tool q=*tool]
    [11 p=* q=*tool]
    [12 p=* q=*]
    [p=^+(^ *tool) q=*tool]
  ==
::::
::
    type
  |?
    %blur
    %blot
    %atom
    [%cell p=*type q=*type]
    [%core p=*type q=*<%blue [%gray p=*type] %pink [%teal p=*type]> r=*spec]
    [%cube p=*]
    [%face p=*term q=*type]
    [%fork p=*type q=*type]
    [%fuse p=*type q=*type]
    [%hold p=*type q=*gene]
  ==
::::
::
    vane
  =+  fan=*(pool &[*type *gene])
  =+  ver=*(pool &[*type *gene])
  =+  bug=@
  =+  vet=?
  =+  sut=*type
  |*
  ::::
  ::
      bake
    =+  [dab=*(book term gene)]
    |=
    ^-  *
    ?-    dab
        ~         0
        [* ~ ~]   (make q.n.dab)
        [* ~ *]   [(make q.n.dab) $(dab r.dab)]
        [* * ~]   [(make q.n.dab) $(dab l.dab)]
        [* * *]   [(make q.n.dab) $(dab l.dab) $(dab r.dab)] 
    ==
  ::::
  ::
      clay
    ?.  ?=([%core *] sut)
      sut
    ?-    q.sut
        %blue
      sut
    ::
        [%gray *]
      ?>  ?|(!vet (nest(sut p.q.sut) p.sut))
      [%core p.q.sut %blue r.sut]
    ::
        %pink
      sut
    ::
        [%teal *]
      =+  dox=[%core p.q.sut %pink r.sut]
      ?>  ?|(!vet (fair dox r.sut))
      sut
    ==
  ::::
  ::
      etch
    =+  [rep=*rope gaf=*type]
    |=
    =+  per=(flop rep)
    |-
    ^-  *type
    ?~  per
      gaf
    ?-    i.per
        @
      =+  wer=(find cog)
      ?>  ?=(^ wer)
      =+  giv=$(sut r.u.wer, per t.per)
      |-
      ^-  *type
      ?-    sut
          [%cell *]
        ?<  .=(1 p.u.wer)
        =+  [tip=(cap p.u.wer) tap=(mas p.u.wer)]
        ?:  .=(2 tip)
          [%cell $(sut p.sut, p.u.wer tap) q.sut]
        ?>  .=(3 tip)
        [%cell p.sut $(sut q.sut)]
      ::
          [%core *]
        ?:  .=(1 p.u.wer)
          giv
        =+  [tip=(cap p.u.wer) tap=(mas p.u.wer)]
        ?>  .=(2 tip)
        [%core $(sut p.sut, p.u.wer tap) q.sut]
      ::
          [%face *]
        ?>  ?&(.=(cog p.sut) .=(1 p.u.wer))
        [%face p.sut giv]
      ::
          [%fork *]
        (eith $(sut p.sut) $(sut q.sut))
      ::
          [%hold *]
        $(sut (play(sut p.sut) q.sut))
      ==
    ::
        [~ *]
      |-
      ?:  .=(1 p.i.per)
        $$(per t.per)
      =+  [tip=(cap p.i.per) tap=(mas p.i.per)]
      ?-    sut
      ::
          %blur       $(sut [%cell %blur %blur])
      ::
          [%cell *]   
        ?:  .=(2 tip) 
          [%cell $(sut p.sut, p.i.per tap) q.sut]
        [%cell p.sut $(sut q.sut, p.i.per tap)]
      ::
          [%core *]
        ?:  .=(2 tip) 
          [%core $(sut p.sut, p.i.per tap) q.sut r.sut]
        [%cell p.sut $(sut %blur, p.i.per tap)]
      ::
          [%cube *]   
        ?>  .?(p.sut) 
        $(sut [%cell [%cube -.p.sut] [%cube +.p.sut]])
      ::
          [%face *]   $(sut q.sut)
      ::
          [%fork *]   (eith $(sut p.sut) $(sut q.sut))
      ::
          [%hold *]   $(sut (play(sut p.sut) q.sut))
      ==
    ==
  ::::
  ::
      fair
    =+  [ref=*type dab=*(book term gene)]
    |=
    ?-    dab
        ~         0
        [* ~ ~]   (firm ref q.n.dab)
        [* ~ *]   [(firm ref q.n.dab) $(dab r.dab)]
        [* * ~]   [(firm ref q.n.dab) $(dab l.dab)]
        [* * *]   [(firm ref q.n.dab) $(dab l.dab) $(dab r.dab)] 
    ==
  ::::
  ::
      find
    =+  cog=*term
    |=
    %-  need
    =+  gil=*(pool type)
    |-
    ^-  *(unit plan)
    ?-    sut
        [%cell *]
      =+  taf=$(sut p.sut)
      ?~  taf
        =+  bov=$(sut q.sut)
        ?~  bov
          ~
        [~ (peg 3 p.u.bov) q.u.bov r.u.bov]
      [~ (peg 2 p.u.taf) q.u.taf r.u.taf]
    ::
        [%core *]
      =+  zem=(look cog r.sut)
      ?~  zem
        =+  taf=$(sut p.sut)
        ?~  taf
          ~
        [~ (peg 2 p.u.taf) q.u.taf r.u.taf]
      [~ 1 zem clay]
    ::
        [%face *]
      ?: .=(cog p.sut)
        [~ 1 ~ q.sut]
      ~
    ::
        [%fork *]
      =+  hax=$(sut p.sut)
      =+  yor=$(sut q.sut)
      ?~  hax
        ?~  yor
          ~
        ?>(.=(%blot (peek(sut p.sut) p.u.yor)) yor)
      ?~  yor
        ?>(.=(%blot (peek(sut q.sut) p.u.hax)) hax)
      ?:  .=(hax yor)
        hax
      ?>  ?&(.=(p.u.hax p.u.yor) .=(~ q.u.hax) .=(~ q.u.yor))
      [~ p.u.hax ~ [%fork r.u.hax r.u.yor]]
    ::
        [%hold *]
      ?:  (~(has in gil) sut)
        ~
      =>  .(gil (~(put in gil) sut))
      $(sut (play(sut p.sut) q.sut))
    ::
        *
      ~
    ==
  ::::
  ::
      firm
    =+  [ref=*type gen=*gene]
    |=
    .=((make gen) (make(sut ref) gen))
  ::::
  ::
      look
    =+  [cog=*term dab=*(book term gene)]
    |= 
    =+  axe=`@`1
    |-
    ^-  *(unit &[p=*axis q=*gene])
    ?-  dab
        ~   ~
    ::
        [* ~ ~]   
      ?:(.=(cog p.n.dab) [~ axe q.n.dab] ~)
    ::
        [* ~ *]
      ?:  .=(cog p.n.dab)
        [~ (peg axe 2) q.n.dab]
      ?:  (gor cog p.n.dab)
        ~
      $(axe (peg axe 3), dab r.dab)
    ::
        [* * ~]
      ?:  .=(cog p.n.dab)
        [~ (peg axe 2) q.n.dab]
      ?:  (gor cog p.n.dab)
        $(axe (peg axe 3), dab l.dab)
      ~
    ::
        [* * *]
      ?:  .=(cog p.n.dab)
        [~ (peg axe 2) q.n.dab]
      ?:  (gor cog p.n.dab)
        $(axe (peg axe 6), dab l.dab)
      $(axe (peg axe 7), dab r.dab)
    ==
  ::
      make  =+(gen=*gene |=(q:(mill gen)))
  ::::
  ::
      mill
    =+  [vet=? sut=*type gen=*gene]
    |=
    ^-  [p=*type q=*tool]
    ?-    -.gen
    ::
        %bnrd                                                           ::  =>
      =+  fid=$(gen p.gen)
      =+  dov=$(sut p.fid, gen q.gen)
      [p.dov (comb q.fid q.dov)]
    ::
        %brmt                                                           ::  |%
      =+  sac=(fill q.gen)
      =+  toc=[%core sut %pink sac]
      [toc [12 ~ (bake toc sac)]]
    ::
        %brrs                                                           ::  |*
      =+  sac=(fill q.gen)
      =+  toc=[%core sut %blue sac]
      [toc [12 ~ (bake toc sac)]]
    ::
        %dgnb                                                           ::  :-
      =+  hed=$(gen p.gen)
      =+  tal=$(gen q.gen)
      [[%cell p.hed p.tal] (cons $(gen p.gen) $(gen q.gen))]
    ::
        %dtbn                                                           ::  .=
      :-  [%fork [%cube 0] [%cube 1]] 
      [5 q:$(gen p.gen) q:$(gen q.gen)]
    ::
        %dtht                                                           ::  .^
      =+  sam=$(gen p.gen)
      ?>  ?|(!vet (nest(sut %atom) p.sam))
      [%atom [5 q.sam]]
    ::
        %dtrs                                                           ::  .*
      [%blur [2 q:$(gen p.gen) q:$(gen q.gen)]]
    ::
        %dtsg                                                           ::  .~ 
      [[%cube p.gen] [1 p.gen]]
    :: 
        %dtsk                                                          ::  .?
      [[%fork [%cube 0] [%cube 1]] [3 $(gen p.gen)]]
    ::
        %hpbn
      =+  sev=q:$(gen p.gen)
      [[%cube sev] [1 sev]]
    ::
        %hpcb                                                           ::  !_
      $(gen q.gen)
    ::
        %hphp                                                           ::  !!
      [%blot [0 0]]
    ::
        %hpmt                                                           ::  !%
      [%blur [1 ..watt]]
    ::
        %hpdx
      $(bug .^(bug), gen p.gen)
    ::
        %htbn                                                           ::  ^=
      =+  vat=$(gen q.gen)
      [[%face p.gen p.vat] q.vat]
    :: 
        %htnb                                                         ::  ^-
      =+  hif=p:$(gen p.gen)
      =+  dan=$(gen 
        %htnb   $(gen p.gen)                                          ::  ^-
        %htnb                                                         ::  ^-
      ?&  $(gen p.gen) 
          $(gen q.gen) 
          (%|(nest iris sut (play p.gen)) (play q.gen))
      ==
    ::
        %htpd                                                         ::  ^+
      ?&  $(gen p.gen) 
          $(gen q.gen) 
          (%|(nest iris sut (play p.gen)) (play q.gen))
      ==
        %htpd   sut                                                   ::  ^+
        %htpd   [0 1]                                                 ::  ^+
    ::
        %htsg   $(gen p.gen)                                          ::  ^~
        %htsg   $(gen p.gen)                                          ::  ^~
        %htsg   $(gen p.gen)                                          ::  ^~
    ::
        %htrd   [11 $(gen p.gen) $(gen q.gen)]                        ::  ^>
        %htrd   $(gen q.gen)                                          ::  ^?
        %htrd   ?&($(gen p.gen) $(gen q.gen))                         ::  ^?
    :: 
        %mtbn                                                         ::  %=
      =+  lar=(seek p.gen)
      =+  mut=(turn q.gen =+([p=*gene q=*gene] |=([p (shop q)])))
      ?~  q.lar
        & 
      =>  .(sut (edit(sut q.u.q.lar) mut), gen r.u.q.lar)
      ?>  ?=([%core *] sut)
      ?-    q.sut
      ::
          %blue
        &
      ::
          [%gray *]
        (%|(nest iris sut p.q.sut) p.sut)
      ::
          %pink
        &
      ::
          [%teal *]
        ?:  (~(has in ver) [sut gen])
          &
        =>  .(ver (~(put in ver) [sut gen]))
        .=((make gen) (make(sut [%core p.q.sut %pink r.sut])))
      ::
      ==

        %mtbn                                                         ::  %=
      =+  lar=(seek p.gen)
      =+  mut=(turn q.gen =+([p=*gene q=*gene] |=([p $$(gen q)])))
      ?~  q.lar
        (edit(sut r.lar) mut)
      =>  .(sut (edit(sut q.u.q.lar) mut), gen r.u.q.lar)
      :+  %hold
        ?>  ?=([%core *] sut)
        ?-    q.sut
            %blue       sut
            [%gray *]   [%core p.sut %blue r.sut]
            %pink       sut
            [%teal *]   sut
        ==
      gen

        %mtbn                                                         ::  %=
      =+  lar=(seek p.gen)
      =+  rem=(turn q.gen =+([p=*gene q=*gene] |=([p $$(gen q)])))
      ?-  q.lar 
          ~   (boil(sut r.lar) p.lar rem)
          ^   [2 (boil(sut q.u.q.lar) p.lar rem) [0 (peg p.lar p.u.q.lar)]]
      ==
    ::
        %skbn                                                           ::  ?=
      =+  vol=$(gen q.gen)
      ?>  ?=([0 *] q.vol)
      :-  [%fork [%cube 0] [%cube 1]]
      %|(fish iris sut p:$(gen p.gen), axe p.q.vol)
    ::
        %skdg                                                           ::  ?:
      =+  nor=$(gen p.gen)
      =+  fex=(gain sut p.gen)
      =+  hiq=$(sut fex, gen q.gen)
      =+  ran=$(gen r.gen)
      ?>  ?|(!vet (nest(sut [%fork [%cube 0] [%cube 1]]) p.nor))
      :-  (eith p.hiq p.ran)
      [6 q.nor q.hiq q.ran]
    ::
        *       
      $(gen (open gen))
    ==
  ::::
  ::
      peek
    =+  axe=*axis
    |=
    ?:  .=(1 axe)
      sut
    =+  [tip=(cap axe), tap=(mas axe)]
    ?-    sut
        %atom       %blot
    ::
        %blot       %blot
    ::
        %blur       %blur
    ::
        [%cell *]   ?:(.=(2 tip) p.sut q.sut)
    ::
        [%core *]   ?:(.=(2 tip) p.sut %blur)
    ::
        [%cube *]   
      ?.  .?(p.sut) 
        %blot 
      $(sut [%cell [%cube -.p.sut] [%cube +.p.sut]])
    ::
        [%face *]   $(sut q.sut)
    ::
        [%fork *]   (eith $(sut p.sut) $(sut q.sut))
    ::
        [%hold *]   $(sut (play(sut p.sut) q.sut))
    ==
  ::
      plan  &[p=*axis q=*(unit &[p=*axis q=*gene]) r=*type]
  ::
      play  =+(gen=*gene |=(q:(mill(vet |) gen)))
  ::::
  ::
      reap
    =+  ref=*type
    |=
    =+  bol=*(pool type)
    =<  dext
    |*
    ::::
    ::
        dext
      ^-  *type
      ?-    sut
      ::
          %atom
        ?-    ref
            %atom       %atom
            [%cube *]   ?:(.?(p.ref) %blot %atom)
            *           sint
        ==
      ::
          %blot
        %blot
      ::
          %blur
        ref
      ::
          [%cell *]
        ?-    ref
        ::
            [%cube *]   
          ?.  .?(p.ref) 
            %blot
          %+  twin
            dext(sut p.sut, ref [%cube -.p.ref]) 
          dext(sut q.sut, ref [%cube +.p.ref])
        ::
            [%cell *]
          (twin dext(sut p.sut, ref p.ref) dext(sut q.sut, ref q.ref))
        ::
            *
          sint
        ==
      ::
          [%core *]
        sut
      ::
          [%cube *]
        ?-    ref
        ::
            %atom
          ?:(.?(p.sut) %blot sut)
        ::
            [%cell *]
          ?.  .?(p.sut) 
            %blot 
          %+  twin
            dext(sut [%cube -.p.sut], ref p.ref) 
          dext(sut [%cube +.p.sut], ref q.ref)
        ::
            [%cube *]
          ?:(.=(p.sut p.ref) sut %blot)
        ::
            *
          sint
        ==
      ::
          [%face *]
        (name p.sut dext(sut q.sut))
      ::
          [%fork *]   
        (eith dext(sut p.sut) dext(sut q.sut))
      ::
          [%hold *]   
        =+  yet=(repo(sut p.sut) q.sut)
        =+  woz=$(sut yet)
        ?:  .=(woz yet)
          sut
        woz
      ==
    ::::
    ::
        sint
      ^-  *type
      ?-    ref
          %blur       sut
          [%cell *]   %blot
          [%core *]   dext(ref [%cell p.ref %blur])
          [%cube *]   %blot
          [%face *]   dext(ref q.ref)
          [%fork *]   (eith dext(ref p.ref) dext(ref q.ref))
      ::
          [%hold *]
        ?<  (~(has in bol) ref)
        dext(bol (~(put in bol) ref), ref (repo(sut p.ref) q.ref))
      ::
          *
        %blot
      ::
      ==
    ::
    ::::
    ==
  ::::
  ::
      seek
    =+  rep=*rope
    |=
    ^-  *plan
    ?~  rep
      [1 ~ sut]
    =+  vag=$(rep t.rep)
    ?-    i.rep
        @
      =+  hup=(find(sut r.vag) i.rep)
      [(peg p.vag p.hup) q.hup r.hup]
    ::
        [~ *]
      [(peg p.vag p.i.rep) ~ (peek(sut r.vag) p.i.rep)]
    ==
  ::
  ::::
  ==
