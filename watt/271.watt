^<  mine.
  :+  ~
    [%watt 271]
  :~
    [%vade !=(vade)]
    [%vane !=(vane)]
    [%club !=(club)]
  --
|*
  ::  Tier 1, light math
::::
::
    add
  ^<  mine.[!=(->) %add ~]
  =+  [a=@ b=@]
  |=
  ^-  @
  ?:  .=(0 a)
    b
  $(a (dec a), b .^(b))
::::
::
    bex
  ^<  mine.[!=(->) %bex ~] 
  =+  [a=@]
  |=
  ^-  @
  ?:  .=(0 a)
    1
  (mul 2 $(a (dec a)))
::::
::
    dec
  ^<  mine.[!=(->) %dec ~] 
  =+  [a=@]
  |=
  ^-  @
  ^>  bean.%dec
  ?<  .=(0 a)
  =+  b=@
  |-
  ?:  .=(a .^(b))
    b
  $(b .^(b))
::::
::
    div
  ^<  mine.[!=(->) %div ~] 
  =+  [a=@ b=@]
  |=
  ^-  @
  ^>  bean.%div
  ?<  .=(0 b)
  =+  c=@
  |-
  ?:  (lth a b)
    c
  $(a (sub a b), c .^(c))
::::
::
    fib
  =+  a=@
  |=
  ^>  memo
  ?-  a
    0   0
    1   1
    *   (add $(a (sub a 1)) $(a (sub a 2)))
  --
::::
::
    gte
  ^<  mine.[!=(->) %gte ~] 
  =+  [a=@ b=@]
  |=
  ^-  ?
  !(lth a b)
::::
::
    gth
  ^<  mine.[!=(->) %gth ~] 
  =+  [a=@ b=@]
  |=
  ^-  ?
  !(lte a b)
::::
::
    lte
  ^<  mine.[!=(->) %lte ~] 
  =+  [a=@ b=@]
  |=
  ?|(.=(a b) (lth a b))
::::
::
    lth
  ^<  mine.[!=(->) %lth ~] 
  =+  [a=@ b=@]
  |=
  ^-  ?
  ?&
    !.=(a b)
  ::
    |-
    ?:  .=(0 a)
      &
    ?:  .=(0 b)
      |
    $(a (dec a), b (dec b))
  --
::::
::
    mod
  ^<  mine.[!=(->) %mod ~] 
  =+  [a=@ b=@]
  |=
  ^-  @
  ?<  .=(0 b)
  (sub a (mul b (div a b)))
::::
::
    mul
  ^<  mine.[!=(->) %mul ~] 
  =+  [a=@ b=@]
  |=
  ^-  @
  =+  c=^-(@ 0)
  |-
  ?:  .=(0 a)
    c
  $(a (dec a), c (add b c))
::::
::
    nop
  =+  *
  |:
  -<
::::
::
    sub
  ^<  mine.[!=(->) %sub ~] 
  =+  [a=@ b=@]
  |=
  ^-  @
  ?:  .=(0 b)
    a
  $(a (dec a), b (dec b))
::
::::  
  ::  Tier 2, lists and units
::::
::
    bind
  =+  [*(unit) &*]
  |:
  =>  .(-< [a=-<- b=-<+])
  ?~  a
    ~
  [~ u=(b u.a)]
::::
::
    clap
  =+  [a=*(unit) b=*(unit) c==+(^ |=(-<-))]
  |:
  ?~  a
    b
  ?~  b
    a
  [~ u=(c u.a u.b)]
::::
::
    drop
  =+  a=*(unit)
  |:
  ?~  a
    ~
  [i=u.a t=~]
::::
::
    flop
  =+  a=*(list)
  |:
  ^-  a
  =+  b=`a`~
  |-
  ?~  a
    b
  $(a t.a, b [i.a b])
::::
::
    lent
  =+  a=*(list)
  |=
  ^-  @
  =+  b=@
  |-
  ?~(a b $(a t.a, b .^(b)))
::::
::
    levy
  =+  [a=*(list) b==+(* |=(.?(-<)))]
  |:  |-
  ^-  ?
  ?~  a
    &
  ?:  (b i.a)
    $(a t.a)
  |
::::
::
    lien
  =+  [a=*(list) b==+(* |=(.?(-<)))]
  |:  |-
  ^-  ?
  ?~  a
    |
  ?:  (b i.a)
    &
  $(a t.a)
::::
::
    list
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~           ~
    [i=* t=*]   [i=(a i.b) t=$(b t.b)]
  --
::::
::
    need
  =+  a=*(unit)
  |:
  ?~  a
    !!
  u.a
::::
::
    reel
  =+  [a=*(list) b==+([* *] |=(-<+))]
  |:  |-
  ^-  -<+.b
  ?~  a
    -<+.b
  $:b(-<- i.a, -<+ $(a t.a))
::::
::
    roll
  =+  [a=*(list) b==+([* *] |=(-<+))]
  |:  |-
  ^-  -<+.b
  ?~  a
    -<+.b
  $(a t.a, b b(-<+ $:b(-<- i.a)))
::::
::
    skim
  =+  [a=*(list) b==+([p=*] |=(.?(p)))]
  |:  |-
  ^-  a
  ?~  a
    ~
  ?:((b i.a) [i.a $(a t.a)] $(a t.a))
::::
::
    skip
  =+  [a=*(list) b==+([p=*] |=(.?(p)))]
  |:  |-
  ^-  a
  ?~  a
    ~
  ?:((b i.a) $(a t.a) [i.a $(a t.a)])
::::
::
    snag
  =+  [a=@ b=*(list)]
  |:  |-
  ?~  b
    !!
  ^-  i.b
  ?:  .=(0 a)
    i.b
  $(b t.b, a (dec a))
::::
::
    sort
  =+  [a=*(list) b==+([p=* q=*] |=(.=(p q)))]
  |:  |-
  ^-  a
  ?~  a
    ~
  %+  weld
    $(a (skim ^@(a) =+(* |:((b -< i.a)))))
  [i.a $(a (skim ^@(a) =+(* |:((b i.a -<)))))]
::::
::
    tree
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~               ~
    [n=* l=* r=*]   [n=(a n.b) l=$(b l.b) r=$(b r.b)]
  --
::::
::
    turn
  =+  [a=*(list) b=&*]
  |:  |-
  ?~  a
    ~
  [(b i.a) $(a t.a)]
::::
::
    unit
  =+  a=&*
  |:
  =+  b=*
  |=
  ?-  b
    ~       ~
    [~ *]   [~ u=(a +.b)]
  --
::::
::
    weld
  =+  [a=*(list) b=*(list)]
  |:  |-
  ^-  b
  ?~  a
    b
  [i.a $(a t.a)]
::
::::
  ::  Tier 3, noun surgery
::::
::
    axis  &@
    bloq  &@
::::
::
    cap
  ^<  mine.[!=(->) %cap ~] 
  =+  [a=*axis]
  |=
  ^-  *<2 3>
  ?-  a
    2       2
    3       3
    *<0 1>  !!
    *       $(a (div a 2))
  --
::::
::  
    cat
  ^<  mine.[!=(->) %cat ~] 
  =+  [a=*bloq b=@ c=@]
  |=
  (add (lsh a (met a b) c) b)
::::
::
    con
  ^<  mine.[!=(->) %con ~]
  =+  [a=@ b=@]
  |=
  =+  [c=`@`0 d=`@`0]
  |-
  ?:  ?&(.=(0 a) .=(0 b))
    d
  %=  $
    a   (rsh 0 1 a)
    b   (rsh 0 1 b)
    c   .^(c)
    d   (add d (lsh 0 c ?&(.=(0 (end 0 1 a)) .=(0 (end 0 1 b)))))
  --
::::
::
    cut
  ^<  mine.[!=(->) %cut ~]
  =+  [a=*bloq [b=@ c=@] d=@]
  |=
  (end a c (rsh a b d))
::::
::
    dis
  ^<  mine.[!=(->) %dis ~]
  =+  [a=@ b=@]
  |=
  =+  [c=`@`0 d=`@`0]
  |-
  ?:  ?|(.=(0 a) .=(0 b))
    d
  %=  $
    a   (rsh 0 1 a)
    b   (rsh 0 1 b)
    c   .^(c)
    d   (add d (lsh 0 c ?|(.=(0 (end 0 1 a)) .=(0 (end 0 1 b)))))
  --
::::
::
    dor
  ^<  mine.[!=(->) %dor ~]
  =+  [a=* b=*]
  |=
  ^-  ?
  ?:  .=(a b)
    &
  ?.  ?=(@ a)
    ?.  ?=(@ b)
      ?:  .=(-.a -.b)
        $(a +.a, b +.b)
      $(a -.a, b -.a)
    |
  ?.  ?=(@ b)
    &
  (lth a b)
::::
::
    end 
  ^<  mine.[!=(->) %end ~]
  =+  [a=*bloq b=@ c=@]
  |=
  (mod c (bex (mul (bex a) b)))
::::
::
    gor
  ^<  mine.[!=(->) %gor ~]
  =+  [a=* b=*]
  |=
  ^-  ?
  =+  [c=(mug a) d=(mug b)]
  ?:  .=(c d)
    (dor a b)
  (lth c d)
::::
::
    lsh
  ^<  mine.[!=(->) %lsh ~]
  =+  [a=*bloq b=@ c=@]
  |=
  (mul (bex (mul (bex a) b)) c)
::::
::
    mix
  ^<  mine.[!=(->) %mix ~]
  =+  [a=@ b=@]
  |=
  =+  [c=`@`0 d=`@`0]
  |-
  ?:  ?&(.=(0 a) .=(0 b))
    d
  %=  $
    a   (rsh 0 1 a)
    b   (rsh 0 1 b)
    c   .^(c)
    d   (add d (lsh 0 c .=((end 0 1 a) (end 0 1 b))))
  --
::::
::
    met
  ^<  mine.[!=(->) %met ~]
  =+  [a=*bloq b=@]
  |=
  =+  c=`@`0
  |-
  ?:  .=(0 b)
    c
  $(b (rsh a 1 b), c .^(c))
::::
::
    mas
  ^<  mine.[!=(->) %mas ~]
  =+  [a=*axis]
  |=
  ^-  *axis
  ?-  a
    1   !!
    2   1
    3   1
    *   (add (mod a 2) (mul $(a (div a 2)) 2))
  --
::::
::
    mug
  ^<  mine.[!=(->) %mug ~]
  =+  a=*
  |=
  ^-  @
  =<  $
  |*
  ::::
  ::
      $
    ?.  ?=(@ a)
      =+  [b=$(a -.a) c=$(a +.a)]
      =+  d=(mix b (add (end 5 1 (lsh 3 1 c)) (rsh 3 3 c)))
      |-
      =+  e=(dis 0x7fffffff (chum d))
      ?:  .=(0 e)
        $(d .^(d))
      e
    =+  b=`@`0x18d0a625
    |-
    =+  c=(met 5 a)
    =+  d=`@`0
    =+  e=b
    |-
    ?:  .=(d c)
      =+  f=(dis 0x7fffffff e)
      ?:  .=(0 f)
        $$(b .^(b))
      f
    $(d .^(d), e (chum (mix e (cut 5 [1 d] a))))
  ::::
  ::
      chum
    =+  [b=@]
    |=
    =-  (end 5 1 -)
    (dice 3 (dice 2 (dice 1 (dice 0 b))))
  ::::
  ::
      dice
    =+  [b=@ c=@]
    |=
    (mix c (sbox (cut 3 [1 b] c))) 
  ::::
  ::
      sbox
    =+  [b=@]
    |=
    =-  (cut 5 [1 b] -)
    0x45bd2fb7\ /eec357b8\ /2ae29f22\ /bb412e03\ /08445336\ /52ca46d8\
     /76d680b9\ /b9e06f14\ /6f8b9c36\ /a53ef834\ /e3533b5b\ /c5cd423e\
     /0cfd4d14\ /12924b1a\ /3e77ee18\ /1804e2a5\ /75d9c4e1\ /6d4b9a3e\
     /5d56c751\ /12ad4163\ /b9df9e63\ /fbfbdac7\ /54464f51\ /4b72be7f\
     /180d4405\ /1b456773\ /5fb51d73\ /2d4774c2\ /381585e2\ /0209e49e\
     /52c0256a\ /6deac45d\ /3f55045c\ /40b92e52\ /5242aa7a\ /a47337b1\
     /bc816aba\ /4bbb0ecf\ /f82cb4ad\ /0bc99c47\ /78a5c74c\ /9182f20d\
     /7b941dc3\ /ff307dd2\ /fc36ca9d\ /0c32efad\ /b1c38ca7\ /b799e1be\
     /fd0dbfee\ /9887957d\ /70186f9e\ /31325eca\ /48f0ac44\ /c7eb6480\
     /ab1f9401\ /167cf21d\ /dce5b8fa\ /121c9f64\ /e95eacb5\ /c50dca03\
     /8b29fd75\ /875f1bb9\ /261c8938\ /3bf794dc\ /e4395998\ /1b06df20\
     /19c11553\ /eefbdb16\ /54447c57\ /f54a4761\ /bdf13b8c\ /88502921\
     /72553aee\ /c63a1157\ /03a1f284\ /f5b59c3c\ /96923c87\ /e2c0936d\
     /4f112d16\ /0f4c5845\ /1055a07d\ /d82afef8\ /72fb1b49\ /0fa54e14\
     /637d01f5\ /7fe89a8b\ /0617eda8\ /4354f3e7\ /712f6316\ /9036b901\
     /111a1094\ /70c78bcc\ /28329ab3\ /fdf004ca\ /2026a870\ /85ac98d2\
     /3f52439e\ /e030c8ed\ /a7589924\ /05af69ed\ /566dd09c\ /4237062e\
     /e9fc60eb\ /c415321c\ /ac4fc47f\ /b265b0ee\ /95cdc493\ /3beb6b4d\
     /e777884a\ /370f9e65\ /6a52c674\ /62dc97c6\ /e5d5238e\ /b6315b6a\
     /c845a9e2\ /026c78ab\ /13beec00\ /b3ed287a\ /a01ebf2b\ /b5c0da93\
     /deeedce8\ /3e5ec58d\ /e83350f0\ /e6ffe2fb\ /a3765510\ /37f42e48\
     /474c90cf\ /78eea53d\ /d10faca2\ /a9417956\ /7c600063\ /14187d04\
     /faffdd23\ /44844992\ /61f4a52d\ /a234566b\ /a46b9dd7\ /1a9d0bd3\
     /cf3e4033\ /b3bcada3\ /00f3ef4e\ /7367a5f9\ /5e24070c\ /1b973827\
     /5dcd3652\ /95b1eb1f\ /035857a4\ /c090c33b\ /5eba8280\ /475d8534\
     /7fb44be7\ /3bffc889\ /dbaf1fa2\ /948328b1\ /56a8a01c\ /6717fa39\
     /4c41d2c6\ /b3275702\ /51634e92\ /51a573dd\ /d3ea1b9d\ /be74ea0b\
     /9093fa5f\ /d2e1d0d1\ /8a1fd93a\ /8f1d0a6e\ /b7a9e735\ /deb0aa12\
     /48d76271\ /e808ec02\ /8e498a90\ /83539726\ /86c7973e\ /44337e55\
     /81f4f7ca\ /3052b642\ /873b540e\ /68d8efa2\ /18494012\ /decc1486\
     /29079afa\ /b81a7b1d\ /63dd42a0\ /3cab1b6f\ /713fffa2\ /08835b42\
     /6dd6f5f8\ /65a14a04\ /5eab8eac\ /2fe5b7f9\ /bbc96404\ /f593e52b\
     /b2078d1a\ /f192cbcd\ /c5e102b2\ /9187837c\ /bddd8a18\ /5caf8a56\
     /3b7aa391\ /88fd1802\ /1e458e1d\ /5f606388\ /513ce98d\ /aed1093b\
     /ae87124c\ /f537ea14\ /0f4bb673\ /cfbeae41\ /123e5e9f\ /e14077a2\
     /40acd8dc\ /103b81cf\ /683fa466\ /9b9e2cec\ /23171ec6\ /2ba16060\
     /d3bfabae\ /dd68fcd2\ /f60ee7be\ /f44c697e\ /7990bd4e\ /3ce83919\
     /bc457a9d\ /5022a039\ /a158b454\ /80722ba6\ /87652d85\ /e2ddee5a\
     /5c43205e\ /c62f6816\ /4c680e34\ /151f4b17\ /9570fa83\ /eb9f040e\
     /22b9bd9c\ /d156e14b\ /3a30bdd8\ /f00fc9e2\ /62bcfdef\ /da4952df\
     /0c100eda\ /ccffce0a\ /1994625d\ /b0cd88c6\ /766ff6ec\ /7c8f831a\
     /7824fff6\ /dee5b579\ /99267e88\ /f8820121\ /6220ecc5\ /f40f7a8d\
     /fe8c511a\ /a9afcd63\ /ba9cd382\ /352598d8
  ::
  ::::
  ==
::::
::
    peg
  ^<  mine.[!=(->) %peg ~]
  =+  [a=*axis b=*axis]
  |=
  ^-  *axis
  ?-  b
    1   a
    2   (mul a 2)
    3   .^((mul a 2))
    *   (add (mod b 2) (mul $(b (div b 2)) 2))
  --
::::
::
    rap
  ^<  mine.[!=(->) %rap ~]
  =+  [a=*bloq b=*(list &@)]
  |=
  ^-  @
  ?~  b
    0
  (cat a i.b $(b t.b))
::::
::
    rip
  ^<  mine.[!=(->) %rip ~]
  =+  [a=*bloq b=@]
  |=
  ^-  *(list &@)
  ?:  .=(0 b)
    ~
  [(end a 1 b) $(b (rsh a 1 b))]
::::
::
    rsh
  ^<  mine.[!=(->) %rsh ~]
  =+  [a=*bloq b=@ c=@]
  |=
  (div c (bex (mul (bex a) b)))
::::
::
    vor
  ^<  mine.[!=(->) %vor ~]
  =+  [a=* b=*]
  |=
  ^-  ?
  =+  [c=(mug (mug a)) d=(mug (mug b))]
  ?:  .=(c d)
    (dor a b)
  (lth c d)
::
::::
  ::  Tier 4, associative containers 
::::
::
    pool  =+(a=&* |:((tree a)))
    book  =+([a=&* b=&*] |:((tree &[p=*a q=*b])))
::::
::
    in
  ^<  mine.[!=(->) %in ~]
  =+  a=*(pool)
  |%
  ::::
  ::
      all
    =+  b==+(* |=(?))
    |:  |-
    ^-  ?
    ?~  a
      &
    ?&((b n.a) $(a l.a) $(a r.a))
  ::::
  ::
      any
    =+  b==+(* |=(?))
    |:  |-
    ^-  ?
    ?~  a
      |
    ?|((b n.a) $(a l.a) $(a r.a))
  ::::
  ::
      gas
    =+  b=*(list)
    |:  |-
    ^-  a
    ?~  b
      a
    $(b t.b, a (put i.b))
  ::::
  ::
      has
    ^<  mine.[!=(->) %has ~]
    =+  b=*
    |:  |-
    ^-  ?
    ?~  a
      |
    ?:  .=(b n.a)
      &
    ?:  (gor b n.a)
      $(a l.a)
    $(a r.a)
  ::::
  ::
      put
    ^<  mine.[!=(->) %put ~]
    =+  b=*
    |:  |-
    ^-  a
    ?~  a
      [b ~ ~]
    ?:  .=(b n.a)
      a
    ?:  (gor b n.a)
      =+  c=$(a l.a)
      ?>  ?=(^ c)
      ?:  (vor n.a n.c)
        [n.a c r.a]
      [n.c l.c [n.a r.c r.a]]
    =+  c=$(a r.a)
    ?>  ?=(^ c)
    ?:  (vor n.a n.c)
      [n.a l.a c] 
    [n.c [n.a l.a l.c] r.c]
  ::::
  ::
      tap
    =+  b=*(list)
    |:  |-
    ?~  a
      b
    $(a r.a, b [n.a $(a l.a)])
  ::
  ::::
  ==
::::
::
    by
  ^<  mine.[!=(->) %by ~]
  =+  a=*(book)
  |%
  ::::
  ::
      all
    =+  b==+(* |=(?))
    |:  |-
    ^-  ?
    ?~  a
      &
    ?&((b q.n.a) $(a l.a) $(a r.a))
  ::::
  ::
      any
    =+  b==+(* |=(?))
    |:  |-
    ^-  ?
    ?~  a
      |
    ?|((b q.n.a) $(a l.a) $(a r.a))
  ::::
  ::
      gas
    ^<  mine.[!=(->) %gas ~]
    =+  b=*(list &[p=* q=*])
    |:  |-
    ^-  a
    ?~  b
      a
    $(b t.b, a (put p.i.b q.i.b))
  ::::
  ::
      get
    ^<  mine.[!=(->) %get ~]
    =+  b=*
    |:  |-
    ?~  a
      ~
    ?:  .=(b p.n.a)
      [~ u=q.n.a]
    ?:  (gor b p.n.a)
      $(a l.a)
    $(a r.a)
  ::::
  ::
      has
    ^<  mine.[!=(->) %has ~]
    =+  b=*
    |:
    !.=(~ (get b))
  ::::
  ::
      put
    ^<  mine.[!=(->) %put ~]
    =+  [b=* c=*]
    |:
    ^-  a
    ?~  a
      [[b c] ~ ~]
    ?:  .=(b p.n.a)
      ?>  .=(c q.n.a)
      a
    ?:  (gor b p.n.a)
      =+  d=$(a l.a)
      ?>  ?=(^ d)
      ?:  (vor p.n.a p.n.d)
        [n.a d r.a]
      [n.d l.d [n.a r.d r.a]]
    =+  d=$(a r.a)
    ?>  ?=(^ d)
    ?:  (vor p.n.a p.n.d)
      [n.a l.a d] 
    [n.d [n.a l.a l.d] r.d]
  ::::
  ::
      tap
    =+  b=*(list &[p=* q=*])
    |:
    ?~  a
      b
    $(a r.a, b [n.a $(a l.a)])
  ::
  ::::
  ==
::
::::
  ::  Tier 5, parsing and printing
::::
::
    byte  &@
    tape  (list byte)
    rock  &@
    term  &@
    wall  (list tape)
::::
::
    steg
  =+  yob=@
  |=
  (~(fly club ~(dem golf yob)) 75)
::::
::
    ball
  |?
    ^+(@ *rock)
    [%duct p=*tape]
    [%grip p=[p=*rock q=*rock] q=*(list ball)]
    [%meld p=*(list ball)]
  --
::::
::
    club
  ^<    mine.
      :+  !=(->) 
        %club 
      :~
        [%fly !=(fly)]
        [%ram !=(ram)]
        [%wit !=(wit)]
      --
  =+  pup=*ball
  |*
  ::::
  ::        fly: print tall
      fly
    ^<  mine.[!=(->) %fly ~]
    =+  bor=@
    |=
    ^-  *wall
    =+  col=@
    =>  |*
        ::::
        ::        ind: indent tape
            ind
          =+  tep=*tape
          |=
          ^-  *tape
          ?:  .=(0 col)
            tep
          $(col (dec col), tep [' ' tep])
        ==
    ::::
    =+  lux=*wall
    |-  ^-  *wall
    ?.  ?&(?=([%grip *] pup) (gte (add col wit) bor))
      [(ind ram) lux]
    :-  (ind (rip 3 p.p.pup))
    |-  ^-  *wall
    ?~  q.pup
      [(ind (rip 3 q.p.pup)) lux]
    %=  $$
      pup   i.q.pup
      lux   $(q.pup t.q.pup)
      col   ?:((gte col (mul 2 (div bor 3))) 0 (add 2 col))
    --
  ::::
  ::        ram: print wide
      ram
    ^-  *tape
    ?-    pup 
    ::
        @           (rip 3 pup)
        [%meld *]   (reel p.pup =+([*ball *tape] |=((weld ram(pup -<-) -<+))))
        [%duct *]   p.pup 
    ::
        [%grip *]
      %+  weld
        (rip 3 p.p.pup)
      |-  ^-  *tape
      ?-  q.pup
        ~       (rip 3 q.p.pup)
        [* ~]   (weld ram(pup i.q.pup) (rip 3 q.p.pup))
        ^       (weld ram(pup i.q.pup) `*tape`[' ' $(q.pup t.q.pup)])
      --
    --
  ::::
  ::      wit: width rammed
      wit
    ^-  @
    ?-    pup
        @           (met 3 pup)
        [%duct *]   (lent p.pup)
    ::
        [%grip *]
      %+  add
        (add (met 3 p.p.pup) (met 3 q.p.pup))
      %+  roll
        q.pup
      =+  [*ball @]
      |=((add ?:(.=(0 -<+) 0 1) (add -<+ wit(pup -<-))))
    ::
        [%meld *]   (roll p.pup =+([*ball @] |=((add -<+ wit(pup -<-)))))
    -- 
  ::
  ::::
  ==
::::
::
    golf
  =+  nut=*
  |%
  ::::
  ::
      dem
    (num 10 =+(@ |=((add '0' -<))))
  ::::
  ::
      gut
    |-  ^-  *ball
    ?-  nut
        @   unt(nut nut)
        ^
      :+  %grip
        ['[' ']']
      |-  ^-  *(list ball)
      ?-  nut
        [* @]   [$$(nut -.nut) $$(nut +.nut) ~]
        [* ^]   [$$(nut -.nut) $(nut +.nut)]
      --
    --
  ::::
  ::
      ham
    (num 16 =+(@ |=(?:((lth 10 -<) (add '0' -<) (add 'a' -<)))))
  ::::
  ::
      loc
    ^-  *ball
    ?>  ?=([p=@ q=[p=[p=@ q=@] q=[p=@ q=@]]] nut)   :: should be static
    :+  %grip
      ['<' '>']
    =+  ^=  rov
        :~  [%grip ['[' ']'] dem(nut p.p.q.nut) dem(nut q.p.q.nut) ~]
            [%grip ['[' ']'] dem(nut p.q.q.nut) dem(nut q.q.q.nut) ~]
        --
    ?:  .=(%% p.nut)
      rov
    [p.nut rov]
  ::::
  ::
      num
    =>  ^:(@ nut)
    =+  [zel=@ hoz==+(@ |=(@))]
    |:
    ^-  [%duct p=*tape]
    :-  %duct
    ?:  .=(0 nut)
      [(hoz 0) ~]
    =+  biq=`*tape`~
    |-  ^-  *tape
    ?:  .=(0 nut)
      biq
    $(nut (div nut zel), biq [(hoz (mod nut zel)) biq])
  ::::
  ::
      tis
    =>  ^:(*tape nut)
    [%duct p=nut]
  ::::
  ::
      unt
    =>  ^:(@ nut)
    ^-  [%duct p=*tape]
    ?:  ?&  (gte (met 3 nut) 2)
            |-
            ?:  .=(0 nut)
              &
            =+  vis=(end 3 1 nut)
            =+  gor=(rsh 3 1 nut)
            ?&(?|(.=('-' vis) ?&((gte vis 'a') (lte vis 'z'))) $(nut gor))
        --
      =<([- ['%' +]] vam)
    ?:  (lte (met 3 nut) 2)
      dem
    ham
  ::::
  ::
      vam
    =>  ^:(@ nut)
    ^-  [%duct p=*tape]
    :-  %duct
    |-  ^-  *tape
    ?:  .=(0 nut)
      ~
    [(end 3 1 nut) $(nut (rsh 3 1 nut))]
  ::
  ::::
  ==
::
::::
  ::  Tier 6, Watt in Watt
::::
::
    comb
  ^<  mine.[!=(->) %comb ~]
  =+  [mal=*tool buz=*tool]
  |=
  ^>  bean.%comb
  ^-  *tool
  ?:  ?&(?=([0 *] mal) !.=(0 p.mal))
    ?:  ?&(?=([0 *] buz) !.=(0 p.buz)) 
      [0 (peg p.mal p.buz)]
    ?:  ?=([2 [0 *] [0 *]] buz)
      [2 [0 (peg p.mal p.p.buz)] [0 (peg p.mal p.q.buz)]]
    [7 mal buz]
  ?:  ?=([^ [0 1]] mal)
    [8 p.mal buz]
  ?:  .=([0 1] buz)
    mal
  [7 mal buz]
::::
::
    cons
  ^<  mine.[!=(->) %cons ~]
  =+  [vur=*tool sed=*tool]
  |=
  ^>  bean.%cons
  ^-  *tool
  ?:  ?=([[0 *] [0 *]] -<)
    ?:  ?&(.=(.^(p.vur) p.sed) .=((div p.vur 2) (div p.sed 2)))
      [0 (div p.vur 2)]
    [vur sed]
  ?:  ?=([[1 *] [1 *]] -<)
    [1 p.vur p.sed]
  [vur sed] 
::::
::
    eith
  ^<  mine.[!=(->) %eith ~]
  =+  [hoz=*type bur=*type]
  |=
  ^-  *type
  ?:  .=(%blot hoz)
    bur
  ?:  .=(%blot bur)
    hoz
  [%fork hoz bur]
::::
::
    flan
  ^<  mine.[!=(->) %flan ~]
  =+  [bos=*tool nif=*tool]
  |=
  ^-  *tool
  ?-    bos
      [1 1]   bos
      [1 0]   nif
      *
    ?-    nif
        [1 1]   nif
        [1 0]   bos
        *       [6 bos nif [1 1]]
    --
  --
::::
::
    flip
  ^<  mine.[!=(->) %flip ~]
  =+  [hel=*tool]
  |=
  [6 hel [1 1] [1 0]]
::::
::
    flor
  ^<  mine.[!=(->) %flor ~]
  =+  [bos=*tool nif=*tool]
  |=
  ^-  *tool
  ?-  bos
      [1 1]   nif
      [1 0]   bos
      *
    ?-  nif
        [1 1]   bos
        [1 0]   nif
        *       [6 bos [1 0] nif]
    --
  --
::::
::
    gene
  |?
    ^+(@ *term)
    [~ p=^+(@ *axis)]
  ::
    [%bndv p=*gene q=*gene]                                     ::  =<  bindov
    [%bnnp p=*gene q=*gene]                                     ::  =-  binnep
    [%bnpd p=*gene q=*gene]                                     ::  =+  binped
    [%bnvd p=*gene q=*gene]                                     ::  =>  binvod
  ::
    [%bpbn p=*gene]                                             ::  !=  bopbin
    [%bpcb p=*spot q=*gene]                                     ::  !_  bopcab
    [%bpdg p=*gene]                                             ::  !:  bopdeg
    [%bpbp ~]                                                   ::  !!  bopbop
    [%bpmt ~]                                                   ::  !%  bopmit
  ::
    [%brbn p=*gene]                                             ::  |=  barbin
    [%brcs p=*(list gene)]                                      ::  |?  barcas
    [%brdg p=*gene]                                             ::  |:  bardeg
    [%brdv p=*gene q=*gene]                                     ::  |<  bardov
    [%brmt p=*(list &[p=*term q=*gene])]                        ::  |%  barmit
    [%brnp p=*gene]                                             ::  |-  barnep
    [%brrt p=*(list &[p=*term q=*gene])]                        ::  |*  barrat
    [%brsg p=*gene q=*(list gene)]                              ::  |~  barsig
    [%brvd p=*gene q=*gene]                                     ::  |>  barvod
  ::
    [%csbp p=*gene]                                             ::  ?!  casbop
    [%csbn p=*gene q=*gene]                                     ::  ?=  casbin
    [%csbr p=*(list gene)]                                      ::  ?|  casbar
    [%csdg p=*gene q=*gene r=*gene]                             ::  ?:  casdeg
    [%csdv p=*gene q=*gene]                                     ::  ?<  casdov
    [%csdt p=*gene q=*gene r=*gene]                             ::  ?.  casdot
    [%csnp p=*gene q=*(list &[p=*gene q=*gene])]                ::  ?-  casnep
    [%cspm p=*(list gene)]                                      ::  ?&  caspam
    [%csrt p=*gene q=*(list gene)]                              ::  ?*  casrat
    [%cssg p=*gene q=*gene r=*gene]                             ::  ?~  cassig
    [%csvd p=*gene q=*gene]                                     ::  ?>  casvod
  ::
    [%dgkt p=*gene q=*gene r=*gene s=*gene]                     ::  :^  degket
    [%dgnp p=*gene q=*gene]                                     ::  :-  degnep
    [%dgpd p=*gene q=*gene r=*gene]                             ::  :+  degped
    [%dgrt p=*(list gene)]                                      ::  :*  degrat
    [%dgsg p=*(list gene)]                                      ::  :~  degsig
  :: 
    [%dtbn p=*gene q=*gene]                                     ::  .=  dotbin
    [%dtkt p=*gene]                                             ::  .^  dotket
    [%dtcs p=*gene]                                             ::  .?  dotcas
    [%dtrt p=*gene q=*gene]                                     ::  .*  dotrat
    [%dtsg p=*]                                                 ::  .~  dotsig
  ::
    [%ktbn p=*term q=*gene]                                     ::  ^=  ketbin
    [%ktdg p=*gene q=*gene]                                     ::  ^:  ketdeg
    [%ktdv p=*<@ [p=@ q=*gene]> q=*gene]                        ::  ^<  ketdov
    [%ktmt p=*gene q=*gene]                                     ::  ^%  ketmit
    [%ktnp p=*gene q=*gene]                                     ::  ^-  ketnep
    [%ktpd p=*gene q=*gene]                                     ::  ^+  ketped
    [%ktvd p=*<@ [p=@ q=*gene]> q=*gene]                        ::  ^>  ketvod
    [%ktrt p=*gene]                                             ::  ^*  ketrat
    [%ktsg p=*gene]                                             ::  ^~  ketsig
  ::
    [%lmbn p=*<%atom %blur %cell %flag %null>]                  ::  ;=  lambin
    [%lmnp p=*gene]                                             ::  ;-  lamnep
    [%lmpd p=*gene]                                             ::  ;+  lamped
  ::
    [%mtbn p=*rope q=*(list &[p=*gene q=*gene])]                ::  %=  mitbin
    [%mtbr p=*rope q=*gene r=*(list &[p=*gene q=*gene])]        ::  %|  mitbar
    [%mtdg p=*gene q=*gene]                                     ::  %:  mitdeg
    [%mtdt p=*gene q=*gene]                                     ::  %.  mitdot
    [%mtkt p=*gene q=*gene r=*gene s=*gene]                     ::  %^  mitket
    [%mtnp p=*gene q=*(list gene)]                              ::  %-  mitnep  
    [%mtpd p=*gene q=*gene r=*gene]                             ::  %+  mitped
    [%mtrt p=*gene]                                             ::  %*  mitrat
    [%mtsg p=*rope q=*gene r=*gene]                             ::  %~  mitsig
  --
::::
::
    hack
  ^<  mine.[!=(->) %hack ~]
  =+  gen=*gene
  |=
  ^-  *<[& p=*gene q=*gene] [| p=*gene]>
  ?-    gen
      [%bnvd *]
    ?.  ?=([~ *] p.gen)
      [| gen] 
    =+  pyr=$(gen q.gen)
    ?-    -.pyr
        |   [| [%bnvd p.gen p.pyr]]
        &   [& [%bnvd p.gen p.pyr] [%bnvd p.gen q.pyr]]
    --
  ::
      [%bpcb *] 
    =+  pyr=$(gen q.gen)
    ?-    -.pyr
        |   [| [%bpcb p.gen p.pyr]]
        &   [& [%bpcb p.gen p.pyr] [%bpcb p.gen q.pyr]]
    --
  ::
      [%dgnp *]   [& p.gen q.gen]
      *
    =+  voq=(open gen)
    ?:  .=(gen voq)
      [| gen]
    $(gen voq)
  --
::::
::
    hike 
  ^<  mine.[!=(->) %hike ~]
  =+  [axe=*axis pac=*(list &[p=*axis q=*tool])]
  |=
  ^>  bean.%hike
  ^-  *tool
  ?~  pac
    [0 axe]
  =+  zet=(skim ^@(pac) =+([p=*axis q=*tool] |=([.=(1 p)])))
  ?~  zet
    =+  tum=(skim ^@(pac) =+([p=*axis q=*tool] |=(?&(!.=(1 p) .=(2 (cap p))))))
    =+  gam=(skim ^@(pac) =+([p=*axis q=*tool] |=(?&(!.=(1 p) .=(3 (cap p))))))
    %+  cons
      %=  $
        axe (peg axe 2)
        pac (turn tum =+([p=*axis q=*tool] |=([(mas p) q])))
      --
    %=  $
      axe (peg axe 3)
      pac (turn gam =+([p=*axis q=*tool] |=([(mas p) q])))
    --
  ?>(?=([* ~] zet) q.i.zet)
::::
::
    look
  ^<  mine.[!=(->) %look ~]
  =+  [cog=*term dab=*(book term gene)]
  |= 
  =+  axe=`@`1
  |-
  ^-  *(unit &[p=*axis q=*gene])
  ?-  dab
      ~   ~
  ::
      [* ~ ~]   
    ?:(.=(cog p.n.dab) [~ axe q.n.dab] ~)
  ::
      [* ~ *]
    ?:  .=(cog p.n.dab)
      [~ (peg axe 2) q.n.dab]
    ?:  (gor cog p.n.dab)
      ~
    $(axe (peg axe 3), dab r.dab)
  ::
      [* * ~]
    ?:  .=(cog p.n.dab)
      [~ (peg axe 2) q.n.dab]
    ?:  (gor cog p.n.dab)
      $(axe (peg axe 3), dab l.dab)
    ~
  ::
      [* * *]
    ?:  .=(cog p.n.dab)
      [~ (peg axe 2) q.n.dab]
    ?:  (gor cog p.n.dab)
      $(axe (peg axe 6), dab l.dab)
    $(axe (peg axe 7), dab r.dab)
  --
::::
::
    open
  ^<  mine.[!=(->) %open ~]
  =+  gen=*gene
  |=
  ^>  bean.%open
  ^-  *gene
  =<  base
  |*
  ::::
  ::
      base
    ?-    gen
        @           [%mtbn [gen ~] ~]
        [~ *]       [%mtbn [gen ~] ~]
        [%brbn *]   [%brrt [[%% p.gen] ~]]                              ::  |=
        [%brdg *]   [%brmt [[%% p.gen] ~]]                              ::  |:
        [%brnp *]   [%bnvd [%brbn p.gen] %%]                            ::  |-
        [%brsg *]                                                       ::  |~
      |-
      ?-  q.gen
          ~       !!
          [* ~]   i.q.gen
      ::
          ^
        :+  %bnpd
          $(q.gen t.q.gen)
        :+  %bnpd
          [%bnvd [~ 3] i.q.gen]
        :+  %bnpd
          [~ 8]
        :-  %brdg
        :^    %mtpd
            [%bnvd [~ 23] p.gen]
          [%mtnp [~ 10] [~ 4] ~]
        [%mtbn [[~ 22] ~] [[[~ 4] [~ 4]] ~]]
      --
    ::
        [%brcs *]                                                       ::  |?
      ?~  p.gen
        [%bpbp ~]
      [%bnpd [%ktrt i.p.gen] [%brbn [%csrt [~ 4] p.gen]]]
    ::
        [%brvd *]   [%bnpd p.gen [%brbn q.gen]]
        [%bndv *]   [%bnvd q.gen p.gen]                                 ::  =<
        [%bnnp *]   [%bnpd q.gen p.gen]                                 ::  =-
        [%bnpd *]   [%bnvd [%dgnp p.gen [~ 1]] q.gen]                   ::  =+
        [%dgkt *]   [%dgnp p.gen [%dgnp q.gen [%dgnp r.gen s.gen]]]     ::  :^
        [%dgpd *]   [%dgnp p.gen [%dgnp q.gen r.gen]]                   ::  :+
        [%dgrt *]                                                       ::  :*
      |-
      ?-    p.gen 
          ~       [%bpbp ~]
          [* ~]   i.p.gen
          ^       [%dgnp i.p.gen $(p.gen t.p.gen)]
      --
    ::
        [%dgsg *]                                                       ::  :~
      |-
      ?~(p.gen [%dtsg ~] [%dgnp i.p.gen $(p.gen t.p.gen)])
    ::
        [%ktdg *]                                                       ::  ^:
      :+  %bnpd
        q.gen
      [%bndv [~ 2] [%ktpd [%bnvd [~ 3] p.gen] [~ 2]]]
    ::
        [%ktmt *]                                                       ::  ^%
      :+  %bnpd 
        q.gen 
      :+  %csnp
        [~ 2]
      [[[%bnvd [~ 3] p.gen] [~ 2]] ~]
    ::
        [%ktdv *]   [%bndv [%ktvd p.gen [~ 1]] q.gen]                   ::  ^<
        [%ktrt *]   [%ktnp [%lmbn %blur] p.gen]                         ::  ^*
        [%ktsg *]   p.gen                                               ::  ^~
        [%csbr *]                                                       ::  ?|
      |- 
      ?~(p.gen [%dtsg 1] [%csdg i.p.gen [%dtsg 0] $(p.gen t.p.gen)])
    ::
        [%csdv *]   [%csdg p.gen [%bpbp ~] q.gen]                       ::  ?<
        [%csdt *]   [%csdg p.gen r.gen q.gen]                           ::  ?.
        [%csbp *]   [%csdg p.gen [%dtsg 1] [%dtsg 0]]                   ::  ?!
        [%csnp *]                                                       ::  ?-
      |-
      ?~  q.gen
        [%bpbp ~]
      :^    %csdg
          [%csbn (fist p.i.q.gen) p.gen]
        :+  %bnvd
          [%ktpd p.i.q.gen p.gen]
        q.i.q.gen
      $(q.gen t.q.gen)
    ::
        [%cspm *]                                                       ::  ?&
      |-
      ?~(p.gen [%dtsg 0] [%csdg i.p.gen $(p.gen t.p.gen) [%dtsg 1]])
    ::
        [%csvd *]   [%csdg p.gen q.gen [%bpbp ~]]                       ::  ?>
        [%csrt *]                                                       ::  ?*
      |-
      ?~  q.gen
        [%bpbp ~]
      :^    %csdg
          [%csbn (fist i.q.gen) p.gen]
        [%mtnp (mast i.q.gen) p.gen ~]
      $(q.gen t.q.gen)
    ::
        [%cssg *]                                                       ::  ?~
      [%csnp p.gen [[[%dtsg 0] q.gen] [[%lmbn %cell] r.gen] ~]]
    ::
        [%lmbn *]                                                       ::  ;=
      ?-  p.gen
        %atom   [%ktnp [%dtkt %dtsg 0] [%dtsg 0]]
        %blur   [%ktnp [%dtrt [%dtsg 0] [%dtsg 0]] [%dtsg 0]]
        %cell   [%dgnp [%lmbn %blur] [%lmbn %blur]]
        %flag   [%ktnp [%dtcs %dtsg 0] [%dtsg 0]]
        %null   [%dtsg 0]
      --
    ::
        [%lmnp *]   (mast p.gen)                                        ::  ;-
        [%lmpd *]   (fist p.gen)                                        ::  ;+
        [%mtbr *]                                                       ::  %|
      :+  %bnpd
        q.gen
      :+  %mtbn
        (weld p.gen `*rope`[[~ 2] ~])
      (turn r.gen =+([*gene *gene] |=([-<- [%bnvd [~ 3] -<+]])))
    ::
        [%mtdg *]   [%mtsg [%% ~] p.gen q.gen]                          ::  %:
        [%mtdt *]   [%mtnp q.gen [p.gen ~]]                             ::  %.
        [%mtkt *]   [%mtnp p.gen q.gen r.gen s.gen ~]                   ::  %^
        [%mtnp *]                                                       ::  %-  
      ?~(q.gen [%bnvd p.gen %%] [%mtdg p.gen [%dgrt q.gen]])
    ::                                                                  ::  %+
        [%mtpd *]   [%mtnp p.gen q.gen r.gen ~]
        [%mtrt *]   [%ktsg [%bnvd p.gen [%mtbn [%% ~] ~]]]              ::  %*
        [%mtsg *]   [%mtbr p.gen q.gen [[[~ 4] r.gen] ~]]               ::  %~
        *   
      gen
    --
  ::::
  ::
      mast
    =+  gen=*gene
    |=
    ^-  *gene
    =<  pax
    |*
    ::::
    ::
        pax
      ^-  *gene
      ?-    gen
          [%bpcb *]   [%bpcb p.gen pax(gen q.gen)]
          [%ktdg *]   pax(gen q.gen)
          [%ktdv *]   [%ktdv p.gen pax(gen q.gen)]
          [%ktmt *]
        :+  %bnpd
          [%ktsg [%ktrt q.gen]]
        :-  %brbn
        :+  %bnvd
          [%mtbn ~ [[[~ 4] [%mtnp pax(gen q.gen) [~ 4] ~]] ~]]
        (fix(gen p.gen) 4)
      ::
          [%ktnp *]   
        [%bnpd [%ktsg [%ktrt q.gen]] [%brbn (fix(gen p.gen) 4)]]
      ::
          [%ktpd *]   pax(gen q.gen)
          [%ktvd *]   [%ktvd p.gen pax(gen q.gen)]
          [%mtrt *]   p.gen
          *           
        =+  bog=(open gen)
        ?.  .=(bog gen)
          pax(gen bog)
        [%bnpd [%ktsg [%ktrt gen]] [%brbn (fix 4)]]
      --
    ::::
    ::
        fix
      =+  [axe=*axis]
      |=
      ^-  *gene
      ?-    gen
          [%dgnp *]
        :+  %dgnp
          $(gen p.gen, axe (peg axe 2))
        $(gen q.gen, axe (peg axe 3))
      ::
          [%bpcb *]   [%bpcb p.gen $(gen q.gen)]
          [%ktbn *]   [%ktbn p.gen $(gen q.gen)]
          [%ktdv *]   [%ktdv p.gen $(gen q.gen)]
          [%ktnp *]   $(gen p.gen)
          [%ktpd *]   $(gen q.gen)
          [%ktmt *]
        :+  %bnvd
          [%mtbn ~ [[[~ axe] [%mtnp $$(gen q.gen) [~ axe] ~]] ~]]
        $(gen p.gen)
      ::
          [%ktvd *]   [%ktvd p.gen $(gen q.gen)]
          [%mtrt *]   [%mtnp p.gen [~ axe] ~]
      ::
          *
        =+  bog=(open gen)
        ?.  .=(bog gen)
          $(gen bog)
        [%csvd [%csbn gen [~ axe]] [~ axe]]
      --
    ::
    ::::
    ==
  ::::
  ::
      fist
    =+  gen=*gene
    |=
    ^-  *gene
    ?-  gen
        [%dgnp *]   [%dgnp $(gen p.gen) $(gen q.gen)]
        [%dtsg *]   gen
        [%bpcb *]   [%bpcb p.gen $(gen q.gen)]
        [%ktbn *]   [%ktbn p.gen $(gen q.gen)]
        [%ktdv *]   [%ktdv p.gen $(gen q.gen)]
        [%ktmt *]   [%ktmt $(gen p.gen) $(gen q.gen)]
        [%ktnp *]   $(gen p.gen)
        [%ktpd *]   $(gen p.gen)
        [%ktvd *]   [%ktvd p.gen $(gen q.gen)]
        [%lmbn *]   gen
        [%lmpd *]   $(gen p.gen)
        [%mtrt *]   
      ?.  ?=([%brcs *] p.gen)
        [%lmbn %blur]
      gen(p.p (turn p.p.gen =+(*gene |=($$(gen -<)))))
    ::
        *
      =+  bog=(open gen)
      ?:  .=(bog gen)
        [%lmbn %blur]
      $(gen bog)
    --
  ::
  ::::
  ==
::
    plan  &[p=*axis q=*(unit &[p=*axis q=*gene]) r=*type]
::::
::
    rake
  ^<  mine.[!=(->) %rake ~]
  =+  gen=*gene
  |=
  ^>  bean.%rake
  ^-  *rope
  ?-  gen
    @             [gen ~]
    [~ *]         [gen ~]
    [%mtbn * ~]   p.gen
    [%bpcb *]     $(gen q.gen)
    [%ktdv *]     $(gen q.gen)
    [%ktvd *]     $(gen q.gen)
  --
::
    ream  ^<(mine.[!=(->) %ream ~] =+(txt=@ |=(^-(*gene [%ream !!]))))
::
    rope  (list <^+(@ *term) [~ p=*axis]>)
::
    spot  &[p=[p=@ q=@] q=[p=@ q=@]]
::::
::
    tool
  |?
    [0 p=@]
    [1 p=*]
    [2 p=*tool q=*tool]
    [3 p=*tool]
    [4 p=*tool]
    [5 p=*tool q=*tool]
    [6 p=*tool q=*tool r=*tool]
    [7 p=*tool q=*tool]
    [8 p=*tool q=*tool]
    [9 p=@ q=*tool]
    [10 p=*<@ [p=@ q=*tool]> q=*tool]
    [p=^+(^ *tool) q=*tool]
  --
::::
::
    type
  |?
    %atom
    %blur
    %blot
    [%cell p=*type q=*type]
  :: [%core p=*type q=*<| & [| p=*type] [& p=*type]> r=*(book term gene)]
  ::
    :*  %core
        p=*type
        q=*<%blue [%gray p=*type] %pink [%teal p=*type]> 
        r=*(book term gene)
    --
  ::
    [%cube p=*]
    [%face p=*term q=*type]
    [%fork p=*type q=*type]
    [%hold p=*type q=*gene]
  --
::::
::
    twin
  ^<  mine.[!=(->) %twin ~]
  =+  [hed=*type tal=*type]
  |=
  ^-  *type
  ?:  .=(%blot hed)
    %blot
  ?:  .=(%blot tal)
    %blot
  [%cell hed tal]
::::
::
    vade
  =+  [tip=*type gen=*gene]
  |=
  (~(mill vane tip) gen)
::::
::
    vane
  ^<    mine.
      :+  !=(->+) 
        %vane 
      :~
        [%mill !=(mill)]
        [%clay !=(clay)]
        [%dump !=(dump)]
      --
  =+  :*  fan=*(pool &[*type *gene])          ::  20 in van
          ver=*(pool &[*type *type *gene])    ::  42 in van
          bug=@                               ::  86 in van
          vet=?                               ::  87 in van
      --
  =+  sut=`*type`%blur                        ::  4 in van
  |*
  ::::
  ::
      bake
    ^<  mine.[!=(->) %bake ~]
    =+  [dab=*(book term gene)]
    |=
    ^-  *
    ?-    dab
        ~         0
        [* ~ ~]   (make q.n.dab)
        [* ~ *]   [(make q.n.dab) $(dab r.dab)]
        [* * ~]   [(make q.n.dab) $(dab l.dab)]
        [* * *]   [(make q.n.dab) $(dab l.dab) $(dab r.dab)] 
    --
  ::::
  ::
      clay
    ^>  bean.%clay
    ?>  ?=([%core *] sut)
    ?-    q.sut
        %blue
      sut
    ::
        [%gray *]
      ?>  ?|(!vet (nest(sut p.q.sut) p.sut))
      [%core p=p.q.sut q=%blue r=r.sut]
    ::
        %pink
      sut
    ::
        [%teal *]
      =+  dox=[%core p.q.sut %pink r.sut]
      ?>  ?|(!vet (fair dox r.sut))
      sut
    --
  ::::
  ::
      dirt
    ?>  ?=([%core *] sut)
    ?-    q.sut
        %blue       sut
        [%gray *]   [%core p=p.q.sut q=%blue r=r.sut]
        %pink       sut
        [%teal *]   [%core p=p.q.sut q=%pink r=r.sut]
    --
  ::::
  ::
      dump
    ^-  *ball
    =+  ^=  gil
        =+  den=[p=`@`1 q=*(book type &@)]
        =+  vax=*(pool type)
        =<  q
        |-
        ^-  den
        ?-    sut
            [%cell *]   $(sut q.sut, den $(sut p.sut))
        ::
            [%core *]   
          ?:  ?=(^ q.sut) 
            $(sut p.sut, den $(sut p.q.sut))
          $(sut p.sut)
        ::
            [%face *]   $(sut q.sut)
            [%fork *]   $(sut q.sut, den $(sut p.sut))
        ::
            [%hold *]
          ?:  (~(has in vax) sut)
            ?:  (~(has by q.den) sut)
              den
            [.^(p.den) (~(put by q.den) [sut p.den])]
          $(vax (~(put in vax) sut), sut (play(sut p.sut) q.sut))
        ::
            *           den
        --
    =+  gax=*(pool type)
    |-
    ?-    sut
        %atom       '@'
        %blot       '#'
        %blur       '*'
    ::
        [%cell *]
      :+  %grip
        ['[' ']']
      :-  $(sut p.sut)
      |-
      ?.  ?=([%cell *] q.sut)
        [$$(sut q.sut) ~]
      [$$(sut p.q.sut) $(q.sut q.q.sut)]
    ::
        [%core *]
      =+  ^=  wut
          %~  dem
            golf
          |-(^-(@ ?~(r.sut 0 .^((add $(r.sut l.r.sut) $(r.sut r.r.sut))))))
      :*  %grip
          ['{' '}']
          :~  %meld
              ?-  q.sut
                  %blue       '+'
                  [%gray *]   '-'
                  %pink       '*'
                  [%teal *]   '/'
              --
              wut
          --
          ?-  q.sut
            %blue       [$(sut p.sut) ~]
            [%gray *]   [$(sut p.sut) $(sut p.q.sut) ~]
            %pink       [$(sut p.sut) ~]
            [%teal *]   [$(sut p.sut) $(sut p.q.sut) ~]
          --
      --
    ::
        [%cube *]   ?:(.=(0 p.sut) '~' ~(gut golf p.sut))
        [%face *]   [%meld ~(vam golf p.sut) '=' $(sut q.sut) ~]
    ::
        [%fork *]
      ?:  .=([%fork [%cube 0] [%cube 1]] sut)
        '?'
      :+  %grip
        ['<' '>']
      :-  $(sut p.sut)
      |-
      ?.  ?=([%fork *] q.sut)
        [$$(sut q.sut) ~]
      [$$(sut p.q.sut) $(q.sut q.q.sut)]
    ::
        [%hold *]
      =+  piv=(~(get by gil) sut)
      ?~  piv
        $(sut (play(sut p.sut) q.sut))
      :*  %meld
          '%'
          ~(dem golf u.piv)
          ~
          ?:  (~(has in gax) sut)
            ~
          [':' $(gax (~(put in gax) sut), sut (play(sut p.sut) q.sut)) ~]
      --
    --
  ::::
  ::
      edit
    ^<  mine.[!=(->) %edit ~]
    =+  [axe=*axis mun=*type har=*(list &[p=*gene q=*gene])]
    |=
    ^>  bean.%edit
    =+  luf=*(list &[p=*axis q=*tool])
    |-
    ^-  [p=*type q=*tool]
    ?~  har
      [mun (hike axe luf)]
    =+  rup=(rake p.i.har)
    =+  taq=(tuck(sut mun) rup sut q.i.har)
    $(har t.har, mun p.taq, luf [q.taq luf])
  ::::
  ::
      fair
    ^<  mine.[!=(->) %fair ~]
    =+  [ref=*type dab=*(book term gene)]
    |=
    ^-  ?
    ^>  bean.%fair
    ?-    dab
        ~         &
        [* ~ ~]   (firm ref q.n.dab)
        [* ~ *]   ?&((firm ref q.n.dab) $(dab r.dab))
        [* * ~]   ?&((firm ref q.n.dab) $(dab l.dab))
        [* * *]   ?&((firm ref q.n.dab) $(dab l.dab) $(dab r.dab))
    --
  ::::
  ::
      find
    ^<  mine.[!=(->) %find ~]
    =+  cog=*term
    |=
    ^>  bean.%find
    =-  ?~  hoq
          ^>  bean.[%type |=((~(fly club dump) 75))]
          ^>  bean.[%name |=((~(fly club cog) 75))]
          !!
        u.hoq
    ^=  hoq
    =+  gil=*(pool type)
    |-
    ^-  *(unit plan)
    ?-    sut
        [%cell *]
      =+  taf=$(sut p.sut)
      ?~  taf
        =+  bov=$(sut q.sut)
        ?~  bov
          ~
        [~ (peg 3 p.u.bov) q.u.bov r.u.bov]
      [~ (peg 2 p.u.taf) q.u.taf r.u.taf]
    ::
        [%core *]
      =+  zem=(look cog r.sut)
      ?~  zem
        =+  taf=$(sut p.sut)
        ?~  taf
          ~
        [~ (peg 2 p.u.taf) q.u.taf r.u.taf]
      [~ 1 [~ (peg 3 p.u.zem) q.u.zem] clay]
    ::
        [%face *]
      ?: .=(cog p.sut)
        [~ 1 ~ q.sut]
      ~
    ::
        [%fork *]
      =+  hax=$(sut p.sut)
      =+  yor=$(sut q.sut)
      ?~  hax
        ?~  yor
          ~
        ?>(.=(%blot (peek(sut p.sut) p.u.yor)) yor)
      ?~  yor
        ?>(.=(%blot (peek(sut q.sut) p.u.hax)) hax)
      ?:  .=(hax yor)
        hax
      ?>  ?&(.=(p.u.hax p.u.yor) .=(~ q.u.hax) .=(~ q.u.yor))
      [~ p.u.hax ~ [%fork r.u.hax r.u.yor]]
    ::
        [%hold *]
      ?:  (~(has in gil) sut)
        ~
      =>  .(gil (~(put in gil) sut))
      $(sut (play(sut p.sut) q.sut))
    ::
        *
      ~
    --
  ::::
  ::
      firm
    ^<  mine.[!=(->) %firm ~]
    =+  [ref=*type gen=*gene]
    |=
    ^>  ping
    ?:  (~(has in ver) [sut ref gen])
      &
    =>  .(ver (~(put in ver) [sut ref gen]))
    .=((make gen) (make(sut ref) gen))
  ::::
  ::
      fish
    ^<  mine.[!=(->) %fish ~]
    =+  [axe=*axis]
    |=
    =+  vit=*(pool type)
    |-
    ^-  *tool
    ?-  sut
        %atom       (flip [3 0 axe])
        %blot       [1 1]
        %blur       [1 0]
    ::
        [%cell *]
      %+  flan
        [3 0 axe]
      (flan $(sut p.sut, axe (peg axe 2)) $(sut q.sut, axe (peg axe 3)))
    ::
        [%core *]   [0 0]
        [%cube *]   [5 [1 p.sut] [0 axe]]
        [%face *]   $(sut q.sut)
    ::
        [%fork *]
      (flor $(sut p.sut) $(sut q.sut))
    ::
        [%hold *]
      ?<  (~(has in vit) sut)
      =>  %=(. vit (~(put in vit) sut))
      $(sut (play(sut p.sut) q.sut))
    --
  ::::
  ::
      gain
    ^<  mine.[!=(->) %gain ~]
    =+  [gen=*gene]
    |=
    ^-  *type
    ?-    gen
        [%bpcb *]   $(gen q.gen)
        [%ktdv *]   $(gen q.gen)
        [%ktvd *]   $(gen q.gen)
        [%csbn *]   
      =<  p
      %^    tuck
          (rake q.gen)
        (reap(sut (play q.gen)) (play p.gen))
      [~ 1] 
    ::
        [%cspm *]   |-(?~(p.gen sut $(p.gen t.p.gen, sut $$(gen i.p.gen))))
        *           sut
    --
  ::
      make  ^<(mine.[!=(->) %make ~] =+(gen=*gene |=(q:(mill gen))))
  ::::
  ::
      mill
    ^<  mine.[!=(->) %mill ~]
    =+  [gen=*gene]
    |=
    ^>  bean.%mill
    ^-  [p=*type q=*tool]
    ?-    -.gen
    ::
        %bnvd                                                           ::  =>
      =+  fid=$(gen p.gen)
      =+  dov=$(sut p.fid, gen q.gen)
      [p.dov (comb q.fid q.dov)]
    ::
        %bpbn                                                           ::  !=
      =+  sev=q:$(gen p.gen)
      [[%cube sev] [1 sev]]
    ::
        %bpcb
      :: ^>  bean.[%spot |=((~(fly club ~(loc golf p.gen)) 75))]
      $(gen q.gen)
    ::
        %bpdg 
      =+  vot=(play p.gen)
      [[%cube vot] [1 vot]]
    ::
        %bpbp                                                           ::  !!
      [%blot [0 0]]
    ::
        %bpmt                                                           ::  !%
      [%blur [1 ..vane]]          ::  needs !: for bootstrap
    ::
        %brmt                                                           ::  |%
      =+  sac=(~(gas by ~) p.gen) 
      =+  toc=[%core sut %pink sac]
      [toc [[0 1] [1 (bake(sut toc) sac)]]]
    ::
        %brrt                                                           ::  |*
      =+  sac=(~(gas by ~) p.gen) 
      =+  toc=[%core sut %blue sac]
      [toc [[0 1] [1 (bake(sut toc) sac)]]]
    ::
        %dgnp                                                           ::  :-
      =+  hed=$(gen p.gen)
      =+  tal=$(gen q.gen)
      [[%cell p.hed p.tal] (cons q.hed q.tal)]
    ::
        %dtbn                                                           ::  .=
      :-  [%fork [%cube 0] [%cube 1]] 
      [5 q:$(gen p.gen) q:$(gen q.gen)]
    ::
        %dtkt                                                           ::  .^
      =+  sam=$(gen p.gen)
      ?>  ?|(!vet (nest(sut %atom) p.sam))
      [%atom [4 q.sam]]
    ::
        %dtrt                                                           ::  .*
      [%blur [2 q:$(gen p.gen) q:$(gen q.gen)]]
    ::
        %dtsg                                                           ::  .~ 
      [[%cube p.gen] [1 p.gen]]
    :: 
        %dtcs                                                           ::  .?
      [[%fork [%cube 0] [%cube 1]] [3 (make p.gen)]]
    ::
        %ktbn                                                           ::  ^=
      =+  vat=$(gen q.gen)
      [(name(sut p.vat) p.gen) q.vat]
    ::
        %ktnp                                                           ::  ^-
      ?.  vet
        [(play p.gen) 0 0]
      =+  hif=(play p.gen)
      =+  dan=$(gen q.gen)
      ?>  (nest(sut hif) p.dan)
      [hif q.dan]
    ::
        %ktpd                                                           ::  ^+
      ?>  ?|(!vet (nest(sut (play p.gen)) (play q.gen)))
      [sut [0 1]]
    ::
        %ktsg                                                           ::  ^~
      $(gen p.gen)
    ::
        %ktvd                                                           ::  ^>
      =+  hum=$(gen q.gen)
      :-  p.hum
      :+  10
        ?-    p.gen
            @   p.gen
            ^   [p.p.gen (make q.p.gen)]
        --
      q.hum
    ::
        %csbn                                                           ::  ?=
      =+  vol=(make q.gen)
      =+  wam=(play p.gen)
      ?>  ?=([0 *] vol)
      :-  [%fork [%cube 0] [%cube 1]]
      (fish(sut wam) p.vol)
    ::
        %csdg                                                           ::  ?:
      =+  nor=$(gen p.gen)
      =+  fex=(gain p.gen)
      =+  hiq=$(sut fex, gen q.gen)
      =+  ran=$(gen r.gen)
      ?>  ?|(!vet (nest(sut [%fork [%cube 0] [%cube 1]]) p.nor))
      :-  (eith p.hiq p.ran)
      [6 q.nor q.hiq q.ran]
    :: 
        %mtbn                                                           ::  %=
      =+  lar=(seek p.gen)
      =+  fup=(edit p.lar r.lar q.gen)
      ?~  q.lar
        fup
      :-  [%hold clay(sut p.fup) q.u.q.lar] 
      [9 p.u.q.lar q.fup]
    ::
        *       
      :: ^>  bean.[%open |=((~(fly club ~(gut golf `*`gen)) 75))]
      =+  doz=(open gen)
      ?<  .=(doz gen)
      $(gen doz)
    --
  ::::
  ::
      name
    ^<  mine.[!=(->) %name ~]
    =+  cog=*term
    |=
    ^-  *type
    ?:  .=(%blot sut)
      %blot
    [%face cog sut]
  ::::
  ::
      nest
    ^<  mine.[!=(->) %nest ~]
    =+  bon=*type
    |=
    ^>  bean.%nest
    ^-  ?
    =+  gil=*(pool &[p=*type q=*type])
    =<  dext
    |*
    ::::
    ::
        dext
      ^-  ?
      ?:  .=(sut bon)
        &
      ?-  sut
          %atom       ?-(bon %atom &, [%cube *] !.?(p.bon), * sint)
          %blot       sint
          %blur       &
      ::
          [%cell *]
        ?.  ?=([%cell *] bon)
          sint
        ?&
          dext(sut p.sut, bon p.bon)
          dext(sut q.sut, bon q.bon)
        --
      ::
          [%core *]   
        ?.  ?=([%core *] bon) 
          sint 
        ?&
          dext(sut p.sut, bon p.bon)
          =>(.(sut dirt, bon dirt(sut bon)) .=(+>.sut +>.bon))
        --
      ::
          [%cube *]   ?.(?=([%cube *] bon) sint .=(sut bon))
          [%face *]   dext(sut q.sut)
          [%fork *]
        ?.  ?=(*<%atom %blur [%cell *] [%cube *] [%core *]> bon)
          sint
        ?|(dext(sut p.sut) dext(sut q.sut))
      ::
          [%hold *]
        ?|
          (~(has in gil) [sut bon])
          dext(gil (~(put in gil) [sut bon]), sut (play(sut p.sut) q.sut))
        --
      --
    ::::
    ::
        sint
      ^-  ?
      ?-  bon
          %atom       |
          %blot       &
          %blur       |
          [%cell *]   |
          [%core *]   dext(bon [%cell p.bon %blur])
          [%cube *]   ?&
                        .?(p.bon) 
                        dext(bon [%cell [%cube -.p.bon] [%cube +.p.bon]])
                      --
          [%face *]   dext(bon q.bon)
          [%fork *]   ?&(dext(bon p.bon) dext(bon q.bon))
          [%hold *]
        ?|
          (~(has in gil) [sut bon])
          dext(gil (~(put in gil) [sut bon]), bon (play(sut p.bon) q.bon))
        --
      --
    ::
    ::::
    ==
  ::::
  ::
      orth
    ^<  mine.[!=(->) %orth ~]
    =+  ref=*type
    |=
    ^>  bean.%orth
    =+  bix=*(pool &[*type *type])
    |-
    ?-    sut
        %atom       ?-(ref %atom |, [%cell *] &, * $(sut ref, ref sut))
        %blot       &
        %blur       (nest(sut %blot) ref)
        [%cell *]
      ?:  ?=([%cell *] ref)
        ?|($(sut p.sut, ref p.ref) $(sut q.sut, ref q.ref))
      $(sut ref, ref sut)
    ::
        [%core *]   $(sut [%cell p.sut %blur])
        [%cube *]
      ?-  ref
          %atom       .?(p.sut)
          [%cell *]   ?|  !.?(p.sut)
                          $(sut [%cell [%cube -.p.sut ] [%cube +.p.sut]])
                      --
          [%cube *]   .=(p.sut p.ref)
          *           $(sut ref, ref sut)
      --
    ::
        [%face *]   $(sut q.sut)
        [%fork *]   ?&($(sut p.sut) $(sut q.sut))
        [%hold *]
      ?|
        (~(has in bix) [ref sut])
        $(bix (~(put in bix) [ref sut]), sut (play(sut p.sut) q.sut))
      --
    --
  ::::
  ::
      peek
    ^<  mine.[!=(->) %peek ~]
    =+  axe=*axis
    |=
    ^-  *type
    ?:  .=(1 axe)
      sut
    =+  [tip=(cap axe) tap=(mas axe)]
    ?-    sut
        %atom       %blot
        %blot       %blot
        %blur       %blur
        [%cell *]   ?:(.=(2 tip) $(sut p.sut, axe tap) $(sut q.sut, axe tap))
        [%core *]   ?:(.=(2 tip) $(sut p.sut, axe tap) %blur)
    ::
        [%cube *]   
      ?.  .?(p.sut) 
        %blot 
      ?:  .=(2 tip) 
        $(sut [%cube -.p.sut], axe tap)
      $(sut [%cube +.p.sut], axe tap)
    ::
        [%face *]   $(sut q.sut)
        [%fork *]   (eith $(sut p.sut) $(sut q.sut))
        [%hold *]   $(sut (play(sut p.sut) q.sut))
    --
  ::
      play  =+(gen=*gene |=(p:(mill(vet |) gen)))
  ::
      read  ^<(mine.[!=(->) %read ~] =+(txt=*tape |=(^-(*gene [%read !!]))))
  ::::
  ::
      reap
    ^<  mine.[!=(->) %reap ~]
    =+  ref=*type
    |=
    =+  bol=*(pool type)
    =<  dext
    |*
    ::::
    ::
        dext
      ^-  *type
      ?-    sut
          %atom
        ?-    ref
            %atom       %atom
            [%cube *]   ?:(.?(p.ref) %blot ref)
            *           sint
        --
          %blot   %blot
      ::
          %blur
        ref
      ::
          [%cell *]
        ?-    ref
            [%cube *]   
          ?.  .?(p.ref) 
            %blot
          %+  twin
            dext(sut p.sut, ref [%cube -.p.ref]) 
          dext(sut q.sut, ref [%cube +.p.ref])
        ::
            [%cell *]
          (twin dext(sut p.sut, ref p.ref) dext(sut q.sut, ref q.ref))
        ::
            *
          sint
        --
      ::
          [%core *]   sut
      ::
          [%cube *]
        ?-    ref
            %atom       ?:(.?(p.sut) %blot sut)
            [%cell *]
          ?.  .?(p.sut) 
            %blot 
          %+  twin
            dext(sut [%cube -.p.sut], ref p.ref) 
          dext(sut [%cube +.p.sut], ref q.ref)
        ::
            [%cube *]   ?:(.=(p.sut p.ref) sut %blot)
            *           sint
        --
      ::
          [%face *]   (name(sut dext(sut q.sut)) p.sut) 
          [%fork *]   (eith dext(sut p.sut) dext(sut q.sut))
          [%hold *]   
        =+  yet=(play(sut p.sut) q.sut)
        =+  woz=dext(sut yet)
        ?:  .=(woz yet)
          sut
        woz
      --
    ::::
    ::
        sint
      ^-  *type
      ?-    ref
          %blur       sut
          [%core *]   dext(ref [%cell p.ref %blur])
          [%face *]   dext(ref q.ref)
          [%fork *]   (eith dext(ref p.ref) dext(ref q.ref))
      ::
          [%hold *]
        ?<  (~(has in bol) ref)
        dext(bol (~(put in bol) ref), ref (play(sut p.ref) q.ref))
      ::
          *
        %blot
      --
    ::
    ::::
    ==
  ::::
  ::
      seek
    ^<  mine.[!=(->) %seek ~]
    =+  rup=*rope
    |=
    ^>  bean.%seek
    ^-  *plan
    ?~  rup
      [1 ~ sut]
    =+  vag=$(rup t.rup)
    ?-    i.rup
        @
      =+  hup=(find(sut r.vag) i.rup)
      [(peg p.vag p.hup) q.hup r.hup]
    ::
        [~ *]
      [(peg p.vag p.i.rup) ~ (peek(sut r.vag) p.i.rup)]
    --
  ::::
  ::
      snap
    ^<  mine.[!=(->) %snap ~]
    =+  [ref=*type gen=*gene]
    |=
    ^>  bean.%snap
    ^-  *gene 
    ?-    sut
        [%cell *]
      =+  haq=(hack gen)
      ?-  -.haq
        &   [%dgnp $(sut p.sut, gen p.haq) $(sut q.sut, gen q.haq)]
        |   p.haq
      --
    ::
        [%face *]   [%ktbn p.sut $(sut q.sut)]
        [%fork *]
      ^>  bean.%snap-fork
      =+  vap=(play(sut ref) gen)
      ?:  (orth(sut p.sut) vap)
        ?:  (orth(sut q.sut) vap)
          gen
        $(sut q.sut) 
      ?:  (orth(sut q.sut) vap)
        $(sut p.sut)
      gen
    ::
        [%hold *]   $(sut (play(sut p.sut) q.sut))
        *           gen
    --
  ::::
  ::
      tuck
    ^<  mine.[!=(->) %tuck ~]
    =+  [rup=*rope boz=*type rix=*gene]
    |=
    =+  pur=(flop rup)
    =+  axe=`@`1
    |-
    ^>  bean.%tuck
    ^-  [p=*type q=[p=*axis q=*tool]]
    ?~  pur
      =+  lof=(mill(sut boz) rix)
      [p.lof [axe q.lof]]
    ?-    i.pur
        @
      =+  wer=(find i.pur)
      =+  giv=$(sut r.wer, axe (peg axe p.wer), pur t.pur)
      :-  |-
          ^-  *type
          ?-    sut
              [%cell *]
            ?<  .=(1 p.wer)
            =+  [tip=(cap p.wer) tap=(mas p.wer)]
            ?:  .=(2 tip)
              [%cell $(sut p.sut, p.wer tap) q.sut]
            ?>  .=(3 tip)
            [%cell p.sut $(sut q.sut, p.wer tap)]
          ::
              [%core *]
            ?:  .=(1 p.wer)
              p.giv
            =+  [tip=(cap p.wer) tap=(mas p.wer)]
            ?>  .=(2 tip)
            :^    %core
                $(sut p.sut, p.wer tap)
              ?-    q.sut
                  %blue       [%gray p.sut]
                  [%gray *]   q.sut
                  %pink       [%teal p.sut]
                  [%teal *]   q.sut
              --
            r.sut
          ::
              [%face *]   [%face p.sut p.giv]
              [%fork *]   (eith $(sut p.sut) $(sut q.sut))
              [%hold *]   $(sut (play(sut p.sut) q.sut))
          --
      q.giv
    ::
        [~ *]
      =+  vas=(peek p.i.pur)
      =+  ^=  giv
          %=    $
              sut   vas
              rix   ?~(t.pur (snap(sut vas) boz rix) rix)
              axe   (peg axe p.i.pur)
              pur   t.pur
          --
      :-  |-
          ^-  *type
          ?:  .=(1 p.i.pur)
            p.giv
          =+  [tip=(cap p.i.pur) tap=(mas p.i.pur)]
          ?-    sut
              %blur       $(sut [%cell %blur %blur])
              [%cell *]   
            ?:  .=(2 tip) 
              [%cell $(sut p.sut, p.i.pur tap) q.sut]
            [%cell p.sut $(sut q.sut, p.i.pur tap)]
          ::
              [%core *]
            ?>  .=(2 tip) 
            :^    %core
                $(sut p.sut, p.i.pur tap)
              ?-    q.sut
                  %blue       [%gray p.sut]
                  [%gray *]   q.sut
                  %pink       [%teal p.sut]
                  [%teal *]   q.sut
              --
            r.sut
          ::
              [%cube *]   
            ?>  .?(p.sut) 
            $(sut [%cell [%cube -.p.sut] [%cube +.p.sut]])
          ::
              [%face *]   [%face p.sut $(sut q.sut)]
              [%fork *]   (eith $(sut p.sut) $(sut q.sut))
              [%hold *]   $(sut (play(sut p.sut) q.sut))
          --
      q.giv
    --
  ::
  ::::
  ==
==
