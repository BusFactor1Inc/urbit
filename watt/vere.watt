:: =>  !%
::
::  XX: should be invoked with !%/zoot, but u4 plow jet cannot handle
::
=>  plow
=+  rasp
=<
  =+  sul=seed
  |*
      vere  .
  ::
  ::::  System interface
  ::::
  ::          spar: parse
      spar
    =+  cox=*rock
    |=
    ^-  *goal
    (done %.(`tube`[tube_(rip 3 cox)] |~(plug bonk skin lewl)))
  ::::
  ::          glem: apply well, producing soul
      glem
    =+  wol=*well
    |=
    ^-  *soul
    ?-  wol
    ::
        [%butt *]
      $(wol q.wol, sul $(wol p.wol))
    ::
        [%foam *]
      =+  vid=(%~(mill rose sut p.sul) p.wol)
      [p.vid .*(q.sul q.vid)]
    ::
        [%kick *]
      =+  pug=$(wol p.wol)
      =+  hor=$(wol q.wol)
      :-  (%~(shop rose sut [%cell p.pug p.hor]) [%mung [%frag 2] [%frag 3]])
      .*([[q.hor ->.q.pug] +.q.pug] +.q.pug)
    ::
        [%sell *]
      =+  pug=$(wol p.wol)
      =+  hor=$(wol q.wol)
      ?>  (%~(show rose sut [%cell p.pug p.hor]) [%cast [%frag 2] [%frag 3]])
      [p.pug q.hor]
    ::
        [%tule *]
      |-
      ^-  *soul
      ?-  p.wol
          [* ~]   $.-.$(wol i.p.wol)
      ::
          ^       
        =+  piv=$.-.$(wol i.p.wol)
        =+  lat=$(p.wol t.p.wol)
        [[%cell p.piv p.lat] [q.piv q.lat]]
      ==
    ::
        [%wood *]
      $(wol [%foam p.wol], sul seed)
    ==
  ::::
  ::          blor: apply sink and soul, producing core and merds
      blor
    =+  [syn=*sink mal=*soul]
    |=
    ^-  [..vere *(list merd)]
    ?-  syn
      %crud   [..vere {[%crud mal]}]
    ==
  ::
  ::::
  ==
|*
::
::::  Molds and cases
::::
::
    form  term
    goal  &[p=*knob q=*sink r=*well]
    soul  &[p=*type q=*]
    unix  &[p=*<%root %curd> q=*(list rock)]
::::
::        knob: execution option
    knob
  |?
    ~
    %dbug                         ::  debug
    [%slow p=@]                   ::  set optimization threshold
  ==
::::
::
    merd
  |?
    [%crud p=*soul]               ::  print soul, crude
    [%nice p=*soul]               ::  print soul, fancy
    [%kind p=*soul]               ::  print soul, type only
    [%save p=*form q=*unix r=*]   ::  write to file by format
    [%puke p=*form q=*]           ::  write to screen by format
  ==
::::
::        sink: output definition
    sink
  |?
    %crud                         ::  print, raw noun and type
    %nice                         ::  print, type-sensitive
    %kind                         ::  print, type only
    %load                         ::  load as environment
    [%pose p=*term]               ::  add as variable
    [%rite p=*term]               ::  modify variable
    [%dump p=*form q=*unix]       ::  output to file by format
  ==
::::
::        well: computation spec
    well
  |?
    [%code p=*unix]               ::  unix code
    [%butt p=*well q=*well]       ::  flac
    [%data p=*form q=*unix]       ::  unix data with extension
    [%foam p=*gene]               ::  gene to be run in environment
    [%kick p=*well q=*well]       ::  mung
    [%sell p=*well q=*well]       ::  cast
    [%tule p=*(list well)]        ::  cage
    [%wood p=*gene]               ::  gene to be run in std ctx
  ==
::
::::  Scanners
::::
::          bonk: scan knob
    bonk
  =+  doc=tube
  |=
  ^-  *(edge knob)
  %.  doc
  |~  pose
    %+  ifix
      [dax gap] 
    |~  pose
      (stag %slow del)
      (cold %dbug ask)
    ==
  ::
    (free ~)
  ==
::::
::          nuxi: scan unix path
    nuxi
  =+  doc=tube
  |=
  ^-  *(edge unix)
  %.  doc
  |~  plug 
    |~(pose (cold %root sol) (free %curd))
    (most sol |~(pose nix quo))
  ==
::::
::          skin: scan sink
    skin
  =+  doc=tube
  |=
  ^-  *(edge sink)
  %.  doc
  |~  pose
    %+  ifix
      [red gap] 
    |~  pose
      (cold %crud cab)
      (cold %nice dig)
      (cold %kind ask)
      (stag %pose |~(pfix pod sym))
      (stag %rite |~(pfix ben sym))
      (stag %dump |~(pfix pat |~((glue dig) sym nuxi)))
    ==
  ::
    (free %crud)
  ==
::::
::          clew: scan well (core)
    clew
  =+  doc=tube
  |=  
  ^-  *(edge well)
  %.  doc
  |~  pose
    (stag %code |~(pfix sig nuxi))
    (stag %data |~(pfix der |~((glue dig) sym nuxi)))
    (stag %tule (ifix [nom mon] (most gap lewl)))
    (stag %foam scry)
  ==
::::
::          lewl: scan well
    lewl
  =+  doc=tube
  |=
  ^-  *(edge well)
  %.  doc
  |~  %-  comp 
      =+  [a=* b=*]
      |:
      ?~  b
        a
      ?-  -.b
        %butt   [%butt a +.b]
        %kick   [%kick a +.b]
        %sell   [%sell a +.b]
      ==
    clew
    |~  pose
      |~  plug
        |~(pose (cold %butt buc) (cold %sell ask) (cold %kick hat))
        lewl
      ==
      (free ~)
    ==
  ==
::
::::
==
