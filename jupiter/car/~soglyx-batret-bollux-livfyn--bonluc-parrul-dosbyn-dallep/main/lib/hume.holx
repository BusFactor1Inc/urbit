!:
::  models and functions for the hume http framework
::
=>  
  |%                                                      ::  models
  ++  cron  ?(%day %hour %minute %none %second)           ::  wake frequency
  ++  gift                                                ::  web event 
            $%  [%cron p=cron]                            ::  wakeup
                [%form p=pact q=quay]                     ::  posted form
                [%note p=path q=note]                     ::  extrinsic note
                [%post p=pact q=mime q=octs]              ::  non-form post
                [%putt p=pact q=(list lump)]              ::  put
                [%user p=user]                            ::  user event
            ==                                            ::
  ++  lamp                                                ::  simple web app
            $_  ^?  |%                                    ::  opaque object
            ++  give                                      ::  serve
              |=  [now=@da fig=gift]                      ::  time, request
              :-  p=*(list card)                          ::  act
              q=*(unit ,[p=(list slip) q=lamp])           ::  request/continue
            ::                                            ::
            ++  miss                                      ::  redirect?
              |=  [pac=pact ced=cred]                     ::  test and apply
              ^-  (unit purl)                             ::
              ~                                           ::
            --                                            ::
  ++  lung  $_                                            ::  entity generator
            |+  :*  who=lord                              ::  owner
                    app=@ta                               ::  application
                    pac=pact                              ::  routed path
                ==                                        ::
            *love                                         ::
  ++  lump  ,[p=path q=mime r=octs]                       ::  submitted data
  ++  rush  vase                                          ::  vase of lamp
  ++  user  ?(%born %came %died %left)                    ::  user event
  ++  toke                                                ::  event response
            $:  p=(list card)                             ::  actions
                q=(unit ,[p=(list slip) q=lamp])          ::  requests
            ==                                            ::
  --                                                      ::
|%                                                        ::  functions
++  lunt                                                  ::  web framework
  |=  :*  :+  who=lord                                    ::  owner
            suf=csrf                                      ::  csrf control
          ped=cron                                        ::  wake frequency
          rut=(list root)                                 ::  routes to
          ras=rush                                        ::  server state
      == 
  ^-  bowl
  =+  ^=  hup  ^-  (list slip)
      :~  [// [%ht rut]]
      ==
  :-  *(list card)
  :-  ~
  :-  hup 
  |=  [now=@da pax=path nut=note]
  ^-  bowl
  =+  [saw=*(list card) ask=*(list slip)]
  =<  zing:wist
  |%
  ++  send                                                ::  dispatch event
    |=  bax=gift
    ^+  +>
    =+  sam=!>(bax)
    =+  gat=(slap ras [%cnbc %give])
    =+  pro=(slam gat sam)
    =+  [wax=(slot 2 pro) hin=(slot 3 pro)]
    =.  saw  (weld ((hard (list card)) q.wax) saw)
    ?:  =(~ q.hin)
      +>.$
    =+  [vis=(slot 6 hin) lym=(slot 7 hin)]
    =+  ^=  gin  ^-  (list slip)
        %+  turn  ((hard (list slip)) q.vis)
        |=(a=slip [[%lunt p.a] q.a])
    %=  +>.$
      ask    (weld ((hard (list slip)) q.vis) ask)
      q.ras  q.lym
    ==
  ::
  ++  pass                                                ::  try redirect
    |=  [pac=pact ced=cred] 
    ^-  (unit purl)
    =+  sam=!>(pac ced)
    =+  gat=(slap ras [%cnbc %miss])
    =+  pro=(slam gat sam)
    ?:  =(~ q.pro)  ~
    =+  vur=(slot 3 pro)
    [~ ((hard purl) q.vur)] 
  ::
  ++  wist                                                ::  handle note
    ^+  .
    ?.  ?=(%ht -.nut)
      ?>  ?=([%lunt *] pax)
      (send [%note t.pax nut])
    ::  ~&  [%request-is q.nut]
    =+  sek=((roil who now p.p.nut) p.q.p.q.nut q.p.nut ras)
    =+  ^=  rep
        :-  %that
        ?~  sek
          [%raw [404 ~ [~ (tact "http error 404 at {<now>}")]]]
        u.sek
    ..wist(saw [rep saw])
  ::
  ++  wost                                                ::  handle note
    ^+  .
    ?.  ?=(%ht -.nut)
      ?>  ?=([%lunt *] pax)
      (send [%note t.pax nut])
    ::  ~&  [%request-is q.nut]
    %=    .
        saw
      :_  saw
      :+  %that
        %ham
      html/~[body/+"the time is {<now>}"]
    ==
  ::
  ++  zing                                                ::  resolve
    ^-  bowl
    [saw [~ (weld ask hup) ..$]]
  --
::
++  roil
  |=  [who=lord now=@da buk=@ta]
  |=  [ext=(unit ,@ta) pac=pact ras=rush]
  ^-  (unit love)
  =+  cap=(flop pac)
  =+  hub=(hoof stub)
  =+  ryt=`path`[~(rent co ~ %da now) ~(rent co ~ %p who) ~]
  =+  tyc=(weld cap `path`[%web buk %cy ryt])
  =+  tox=(weld cap `path`[%web buk %cx ryt])
  =<  veen
  |%
  ++  drem
    |=  axt=@ta
    ^-  (unit love)
    =+  rog=((hard meta) .^((flop `path`[axt tyc])))
    ?:  ?=([& *] rog)
      =+  dat=((hard ,@) .^((flop `path`[axt tox])))
      :-  ~
      :+  %mid
        ?+  axt  [%application %octet-stream ~]
          %html  [%text %html ~]
          %txt   [%text %plain ~]
          %css   [%text %css ~]
          %js    [%text %javascript ~]
        ==
      [(met 3 dat) dat]
    =+  mog=((hard meta) .^((flop `path`[hub tyc])))
    ?.  ?=([& *] mog)  ~
    =+  wer=(flop `path`[hub tox])
    =+  dat=((hard ,@) .^(wer))
    =+  vez=(vang & wer)
    =+  gen=(scan (trip dat) (full (ifix [gay gay] tall:vez)))
    =+  gat=(slap ras gen)
    =+  sam=!>([who now])   ::  XX not right
    =+  pro=(slam gat sam)
    [~ ((hard love) q.pro)]
  ::
  ++  dunt
    ^-  (unit love)
    (drem %html)
  ::
  ++  veen
    |-  ^-  (unit love)
    ?:  =(tyc [buk %cy ryt])  ~
    ?~  tyc  !!
    ?~  tox  !!
    =+  rab=?~(ext dunt (drem u.ext))
    ?^  rab  rab
    $(tyc t.tyc, tox t.tox)
  --
--
