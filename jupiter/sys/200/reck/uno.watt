!:
::          %reck layer 1.  This file is in the public domain.
::
=>  ::
  ::::          Tier Gy, general geometry
  ::
  |%
  ++  arch                                          ::  fs node
    $%  [& clod]                                    ::  ie, file
        [| dirt]                                    ::  ie, directory
    ==                                              ::
  ++  bill  ,[p=time q=*]                           ::  time and value
  ++  brig  ,[o=(unit bill) v=(map span brig)]      ::  raw path tree
  ++  case  ,[p=path q=* r=(list ,[p=@ud q=bill])]  ::  sequence report
  ++  cash  ,[p=path q=* r=(list fact)]             ::  series report
  ++  clod  ,[p=time q=*]                           ::  mtime content
  ++  dirt  ,[p=time q=(map span arch)]             ::  mtime listing
  ++  fact  ,[p=path q=bill]                        ::  monotonic binding
  ++  meta                                          ::  path metadata
    $%  [& p=time]                                  ::  mtime
        [| p=time q=(list span)]                    ::  mtime dir
    ==                                              ::
  ++  quay  ,[p=path q=_|+(* *(unit))]              ::  prefix/suffix
  ++  quid  ,[p=(unit time) q=(unit time)]          ::  query window
  ++  quip  ,[p=quid q=quay]                        ::  windowed query
  --
=>  ::          Tier Gl, general library
  ::::
  ::
  |%
  ++  cy
    =+  a=*arch
    |%  
    ++  also                                          ::  metadata
      |=  hap=path  ^-  meta
      ?~  hap
        ?-  a
          [& *]  [%& p.a]
          [| *]  [%| p.a (turn (~(tap by q.a) ~) |=([p=span q=arch] p))]
        ==
      ?-  a
        [& *]  [%| `@da`0 ~]
        [| *]  =+  gos=(~(get by q.a) i.hap) 
               ?~  gos  
                 [%| `@da`0 ~]
               $(hap t.hap, a u.gos)
      ==
    ::
    ++  give                                          ::  apply
      |=  [now=time hap=path dat=*]
      ^-  arch
      ?~  hap
        ?:  &(?=(& -.a) =(q.a dat))
          a
        [%& now dat]
      ?-  a
        [& *]  $(a [%| `@da`0 ~])
        [| *]  [%| now (~(put by q.a) i.hap $(hap t.hap))]
      ==
    ::
    ++  grab                                          ::  just the data
      |=  hap=path
      ^-  (unit)
      =+  yed=(sift hap)
      ?.  ?=([& *] yed)
        ~
      [~ q.yed]
    ::
    ++  kill                                          ::  delete
      |=  [now=time hap=path]
      ^-  arch
      ?~  hap
        [%| `@da`0 ~]
      ?-    a
          [& *]  [%| `@da`0 ~] 
          [| *]
        =+  gos=(~(get by q.a) i.hap)
        ?~  gos
          a
        =+  weh=$(a u.gos, hap t.hap)
        ?:  ?=([| * ~] weh)
          [%| now (~(del by q.a) i.hap)]
        [%| now (~(put by q.a) i.hap weh)]
      ==
    ::
    ++  sift                                          ::  select subtree
      |=  hap=path
      ^-  arch
      ?~  hap
        a
      ?-    a
          [& *]  [%| `@da`0 ~]
          [| *]  
        =+  gos=(~(get by q.a) i.hap) 
        ?~(gos [%| `@da`0 ~] $(hap t.hap, a u.gos))
      ==
    --
  ++  ra
    |_  a=brig
    ++  chit                                          ::  primitive subtree
      |=  lap=path  ^-  brig
      ?~  lap
        a
      =+  yiq=(~(get by v.a) i.lap)
      ?~(yiq [~ ~] $(lap t.lap, a u.yiq))
    ::
    ++  clot                                          ::  primitive insert
      |=  [lap=path byl=(unit bill)]  ^-  brig
      ~|  %clot
      ?~  lap
        ?>  =(~ o.a)
        [byl v.a]    
      :-  o.a
      =+  soz=(~(get by v.a) i.lap)
      =+  mal=?~(soz [~ ~] u.soz)
      (~(put by v.a) i.lap $(lap t.lap, a mal))
    ::
    ++  crab                                          ::  functional query
      |*  :*  qey=quay 
              bay=_|+([ram=hapt muz=* reb=brig] *)
          ==
      =+  [ram=*hapt rif=*(list ,_*bay)]
      |-  ^+  rif
      ?~  p.qey
        =+  suf=*hapt
        |-  ^+  rif
        =+  zyr=(q.qey (flop suf))
        ?:  ?=(^ zyr)
          [(bay (flop (weld suf ram)) u.zyr a) rif]
        =+  dib=(~(tap by v.a) ~)
        |-  ^+  rif
        ?~  dib
          rif
        [$(a q.i.dib, suf [p.i.dib suf])]
      =+  dib=(~(tap by v.a) ~)
      |-  ^+  rif
      ?~  dib
        rif
      ?.  =(i.p.qey p.i.dib)
        $(dib t.dib)
      ^$(p.qey t.p.qey, ram [p.i.dib ram], a q.i.dib, rif $(dib t.dib))
    ::
    ++  hank                                            ::  traverse for series
      |=  qey=quay
      ^-  (list cash)
      %+  crab
        qey
      |=  [ram=hapt muz=* reb=brig]
      :+  (flop ram)
        muz
      =+  rex=*(list fact)
      |-  ^+  rex
      =+  dib=(~(tap by v.reb) ~)
      =+  ^=  beq
          |-  ^-  (list fact)
          ?~  dib
            rex      
          ^$(ram [p.i.dib ram], reb q.i.dib, rex $(dib t.dib))
      ?~  o.reb
        beq
      [[(flop ram) u.o.reb] beq]
    ::
    ++  honk                                            ::  traverse for seq
      |=  qey=quay
      ^-  (list case)
      %+  crab
        qey
      |=  [ram=hapt muz=* reb=brig]  
      ^-  [p=path q=* r=(list ,[p=@ud q=bill])]
      :+  (flop ram)
        muz
      =-  %+  sort 
            roo 
          |=([a=[p=@ud q=bill] b=[p=@ud q=bill]] (lth p.a p.b))
      ^=  roo
      =+  dib=(~(tap by v.reb) ~)
      |-  ^-  (list ,[p=@ud q=bill])
      =+  hoc=$(dib t.dib)
      ?~  dib
        hoc
      =+  yop=(colt p.i.dib)
      ?:  |(?=(~ yop) =(0 u.yop) ?=(~ o.q.i.dib))
        hoc
      [[u.yop u.o.q.i.dib] hoc]
    --
  :: 
  ++  colt                                            ::  try decimal span
    |=  san=span  ^-  (unit ,@ud)
    =+  vec=(slay san)
    ?.  &(?=(^ vec) ?=([%% %ud *] u.vec))
      ~
    [~ q.p.u.vec]
  ::
  ++  cork                                            ::  try decimal end 
    |=  lap=path
    ^-  (unit ,[p=@ud q=path])
    =+  ram=(flop lap)
    ?~  ram
      ~
    =+  rok=(colt i.ram)
    ?~(rok ~ [~ u.rok (flop t.ram)])
  ::
  ++  hesh                                            ::  groom raw sequence
    |=  [wid=quid foy=(list ,[p=@ud q=bill])]
    ^-  (list ,[p=@ud q=bill])
    =>  ^+  .  
        %=    .
            foy
          =+  num=1
          |-  ^+  foy
          ?~  foy
            ~
          ?.(=(num p.i.foy) ~ [i.foy $(foy t.foy, num +(num))])
        ==
    =>  ^+  .
        %=    .
            foy
          ?~  p.wid
            foy
          |-  ^+  foy
          ?~  foy
            ~
          ?:((gth p.q.i.foy u.p.wid) foy $(foy t.foy))
        ==
    ?~  q.wid
      foy
    |-  ^+  foy
    ?~  foy
      ~
    ?:((gth p.q.i.foy u.q.wid) ~ [i.foy $(foy t.foy)])
  ::
  ++  slit                                  ::  filter series
    |=  [wid=quid guz=(list cash)]
    ^-  (list cash)
    ?~  guz
      ~
    :-  :+  p.i.guz
          q.i.guz
        %-  tort
        |-  ^-  (list fact)
        ?~  r.i.guz  ~
        =+  xar=$(r.i.guz t.r.i.guz)
        ?.  ?&  |(?=(~ p.wid) (gte p.q.i.r.i.guz u.p.wid))
                |(?=(~ q.wid) (lte p.q.i.r.i.guz u.q.wid))
            ==
          xar
        [i.r.i.guz xar]
    $(guz t.guz)
  ::
  ++  tort                                  ::  sort by time
    |=  rex=(list fact)  ^-  (list fact)
    %+  sort
      rex
    |=  [a=fact b=fact]
    ?:(=(p.q.a p.q.b) (aor a b) (lth p.q.a p.q.b))
  --
=>  ::
  ::::          Tier Sg, system geometry
  ::
  |%
  ++  beef  ,*                              ::  application command
  ++  dock  $_                              ::
    |+  [now=time who=@ta]                  ::  ship producer
        [p=*(list plum) q=*ship]            ::
  ++  kiwi                                  ::  system product
    $%  [%o p=@ta q=*]                      ::  opaque output by app
        [%p p=tube q=@ud r=tank]            ::  print session, tab, text
        [%t p=(list)]                       ::  print trace
        [%x p=(list)]                       ::  print request list
        [%w p=time]                         ::  request alarm
    ==                                      ::
  ++  lamb                                  ::  system event
    $|  ~                                   ::  wakeup
    $%  [%l p=[p=@ud q=@ud] q=@ud r=@ta]    ::  command line by session
        [%o p=(list ,[p=term q=plum])]      ::  synthetic output
    ==
  ++  lens  $_  ^?                          ::  query interface
    |%                                      ::
    ++  hope  |+(quip *(list cash))         ::  perm, series
    ++  peek  |+(path *(unit))              ::  trans, request
    ++  pray  |+(path *(unit bill))         ::  perm, request
    ++  when  *time                         ::  current time
    ++  wish  |+(quip *(list case))         ::  sequence query
    --                                      ::
  ++  plum                                  ::  process product
    $%  [%pi p=path q=*]                    ::  append to sequence
        [%pu p=path q=*]                    ::  put in deck
        [%to p=@ta q=beef]                  ::  pass a command
        [%yo p=kiwi]                        ::  output
    ==                                      ::
  ++  pork                                  ::  process event
    $|  ~                                   ::  no-op
    $%  [%do p=*]                           ::  direct command
        [%nu p=fact]                        ::  new fact
    ==                                      ::
  ++  ship  $_  ^?                          ::  process
    |%
    ++  peek                                ::  transient query
      |+  [cam=lens hap=path]
      *(unit) 
    ::
    ++  poke                                ::  operation
      |+  [cam=lens poc=pork]
      [p=*(list plum) q=^?(..poke)]
    --  
  ++  tube  ,[p=@ud q=@ud]                  ::  session identity
  --
.
