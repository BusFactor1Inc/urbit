!:
::          %cary, revision control.   This file is in the public domain.
::
:-  %cary
^-  dock
|=  [now=time who=span]
%^    hull
    (iris now)
  who
^-  bead
|=  [now=time who=span]
:-  ^-  lime
    :-  %all
    :~  :^    %rod
            %abel
          :-  [~ ~]
          :-  [who ~]
          |=  hap=*  ^-  (unit)
          ?.  ?=([p=@ta q=@ta ~] hap)
            ~
          =+  [rux=(slay p.hap) vys=(slay q.hap)]
          ?.  &(?=([~ %% %p *] rux) ?=([~ %% %tas *] vys))
            ~
          [~ q.p.u.rux q.p.u.vys]
        ^-  hunt
        |=  [seq=@ud muz=* cax=bill]  ^-  lime
        ?>  ?=([p=@p q=@ta] muz)
        [%run [%& p.muz q.muz p.cax q.cax]]
    ::  
        :^    %rod
            %boaz
          :-  [~ ~]
          :-  [who ~]
          |=  hap=*  ^-  (unit)
          ?.  ?=([p=@ta ~] hap)
            ~
          =+  rux=(slay p.hap)
          ?.(?=([~ %% %p *] rux) ~ [~ q.p.u.rux])
        ^-  hunt
        |=  [seq=@ud muz=* cax=bill]  ^-  lime
        ?>  ?=(@p muz)
        [%run [%| muz q.cax]]
    ::
        :^    %net
            %cain
          :-  [~ ~]
          :-  [who ~]
          |=  hap=*  ^-  (unit)
          ?.  ?=([p=span q=span r=span %a ~] hap)
            ~
          =+  [rux=(slay p.hap) vys=(slay q.hap)]
          ?.  &(?=([~ %% %p *] rux) ?=([~ %% %tas *] vys))
            ~
          [~ q.p.u.rux q.p.u.vys r.hap]
        ^-  fish
        |=  [sap=path muz=* cax=bill]  ^-  lime
        ?>  ?=([p=@p q=@ta r=@ta] muz)
        =+  hof=~(rent co [~ %p p.muz])
        =+  rad=(arch q.cax)
        ?>  =(rad q.cax)
        =-  :-  %all
            %+  turn 
              yos 
            |=  [p=@ta q=hapt r=*]
            `lime`[%say %pu [hof q.muz r.muz p (flop q)] r]
        ^=  yos  
        =+  ram=*hapt
        =+  waz=*(list ,[p=@ta q=path r=*])
        |-  ^+  waz
        ?-    rad
            [& *]  [[%m ram p.rad] [%d ram q.rad] waz]
            [| *]
          =+  dib=(~(tap by q.rad) ~)
          :-  [%m ram p.rad (turn dib |=([p=span q=arch] p))]
          |-  ^+  waz
          ?~  dib
            waz
          ^$(rad q.i.dib, ram [p.i.dib ram])
        ==
    ==
^-  bowl
=>  ..$
=>  |%
    ++  desk                                      ::  project state
      $:  seq=@                                   ::  seqno, from 1
          wen=time                                ::  date of change
          rad=arch                                ::  state now
      ==
    ++  game  
      $:  wod=(map ,@p room)                      ::  complete state
      ==
    ++  move
      $%  [& p=@p q=@tas r=time s=(list task)]    ::  project changeset
          [| p=@p q=?]                            ::  local on/off
      ==
    ++  room
      $:  our=?                                   ::  local/foreign
          dos=(map span desk)                     ::  projects 
      ==
    ++  task                                      ::  change
      $%  [%gv p=path q=*]                        ::  write file
      ::  [%kl p=path]                            ::  remove file
          [%rl p=@tas]                            ::  release to label
      ==
    --
=+  sys=*game
|%
++  peek  
  |=  [cam=lens hap=path]
  ^-  (unit)
  ~&  [%mota %hap `path`hap]
  ?~  hap  ~
  =+  hos=(slay i.hap)                          ::  host
  ?.  &(?=(^ hos) ?=([%% %p *] u.hos))  ~
  ?~  t.hap  ~
  =+  poj=(slay i.t.hap)                        ::  project
  ?.  &(?=(^ poj) ?=([%% %tas *] u.poj))  ~
  ?~  t.t.hap  ~
  =+  mag=(slay i.t.t.hap)                      ::  revision
  ?.  &(?=(^ mag) ?=([%% %da *] u.mag))  ~
  =+  yar=(~(get by wod.sys) q.p.u.hos)
  ?~  yar  ~
  =+  siq=(~(get by dos.u.yar) q.p.u.poj)
  ?~  siq  ~
  ?.  ?:  our.u.yar
        (gte q.p.u.mag wen.u.siq)
      =(q.p.u.mag wen.u.siq)
    ~
  ?~  t.t.t.hap  ~
  ?+  i.t.t.t.hap  ~
    %a  [~ rad.u.siq]
    %d  (~(grab cy rad.u.siq) t.t.t.t.hap)
    %m  =+  out=[~ (~(also cy rad.u.siq) t.t.t.t.hap)]
        ~&  [%meta %hap `path`hap]
        ~&  [%meta %tttthap t.t.t.t.hap]
        ~&  [%meta %out out]
        ~&  [%meta %rad rad.u.siq]
        out
    %x  ?.(=(q.p.u.mag when:cam) ~ [~ seq.u.siq wen.u.siq])
  ==
++  poke  
  |=  [cam=lens man=*] 
  ^-  [p=lime q=bowl]
  =+  muv=(move man)
  ~&  [%cary-poke muv]
  ?.  =(muv man)
    [~ ..poke]
  ?-    muv
      [| *]
    :-  ~
    =+  lag=(~(get by wod.sys) p.muv)
    %=    ..poke
        wod.sys
      (~(put by wod.sys) p.muv [q.muv ?~(lag ~ dos.u.lag)])
    ==
  ::
      [& *]
    =+  lag=(~(get by wod.sys) p.muv)
    =+  tes=`room`?~(lag [| ~] u.lag)
    =+  lix=(~(get by dos.tes) q.muv)
    =+  taq=`desk`?~(lix [1 `@da`0 [%| `@da`0 ~]] u.lix)
    =-  :-  p.niz
        %=    ..poke
            wod.sys
          %+  ~(put by wod.sys)
            p.muv
          tes(dos (~(put by dos.tes) q.muv q.niz))
        ==
    ^=  niz  ^-  [p=lime q=desk]
    =-  [[%all p.wux] [+(seq.taq) ?>((gth r.muv wen.taq) r.muv) q.wux]]
    ^=  wux
    |-  ^-  [p=(list lime) q=arch]
    ?~  s.muv
      [~ rad.taq] 
    =+  har=$(s.muv t.s.muv)
    ?-    i.s.muv
        [%gv *]  
      :-  =+  yom=(~(also cy q.har) p.i.s.muv)
          =+  old=?:(?=([& *] yom) p.yom 0)
          =+  huu=~(rent co [~ %p p.muv])
          [[%say %yo %o %cary %sync old huu q.muv p.i.s.muv] p.har]
      (~(give cy q.har) r.muv p.i.s.muv q.i.s.muv)
    ::
        [%rl *]
      :-  :-  [%say [%pu [~(rent co [~ %p p.muv]) q.muv p.i.s.muv %a ~] q.har]]
          p.har
      q.har
    ==
  ==
--
