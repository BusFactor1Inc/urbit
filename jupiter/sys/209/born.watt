!:
=>  |%
    ++  deed                              ::  command-line action
      $^  :*  p=gene 
              q=vent                      ::  data destination
              r=fuel                      ::  data source
          ==
    ++  fuel (unit >[p=mode q=gene])
    ++  vent (unit >[p=mode q=gene])
    ++  mode                              ::  filesystem access mode
      $|  $?  %atom                       ::  file as flat atom
              %blob                       ::  map ext to length-atom
              %pill                       ::  file as noun jam
              %text                       ::  file as list of atomic lines
              %watt                       ::  file as watt source
          ==
      $%  [%dlog p=mode]                  ::  directory as list
          [%dmap p=mode]                  ::  directory as map
      ==
    ++  tube                              ::  filesystem address
      $%  [%here p=(list cask)]           ::  permanent internal
          [%unix p=tape]                  ::  external unix tray
      ==
    ++  file  >[p=mode q=tube]            ::  filesystem key
    ++  shoe                              ::  trace stack layer
      $%  [%bean p=*]                     ::  raw noun
          [%lose p=term]                  ::  error message
          [%mean p=_|.(*tank)]            ::  prettyprint trigger
          [%pray p=tray]                  ::  prayer attempt
          [%spot p=spot]                  ::  source position
      ==
    --
=>  |%
    ++  loon
      $&  [p=loon q=loon]                 ::  natural pair
      $%  [%% p=gene]                     ::  simple gene
          [%dig p=loon]                   ::  save a packet
          [%fit p=mode q=barn]            ::  local file
          [%quo p=vase]                   ::  live data
          [%run p=loon q=loon]            ::  source to dest
          [%var p=term q=loon]            ::  set a variable
      ==
    ++  boom
      $%  [%dat p=barn q=mode r=vase]     ::  save to disk
          [%see p=@ q=tank]               ::  show at tab
      ==
    --
=>  |%  
    ++  x-goon
      =+  vas=vast
      wide:vas(bug &, wer /.~/sys/[(rent %ud stub)])
    ::
    ++  x-loon
      %+  knee  *loon  |.  ~+
      ;~  pose
        (stag %% x-goon)
        ;~  pfix  col
          ;~  pose
            (stag %dig ;~(pfix (just 'd') ;~(pfix ace x-loon)))
          ::
            %+  stag
              %fit
            ;~  pfix  (just 'f')
              ;~  plug
                ;~  pose
                  (cold %atom (just 'a'))
                  (cold %blob (just 'b'))
                  (cold %pill (just 'p'))
                  (cold %text (just 't'))
                  (cold %watt (just 'w'))
                ==
                ;~  pfix  dot 
                  (most fas (cook |=(lot=coin (spay lot)) sack:vast))
                ==
              ==
            ==
          ::
            %+  stag
              %run
            ;~  pfix  (just 'r')
              ;~(plug x-loon ;~(pfix ace x-loon))
            ==
          ::
            %+  stag
              %var
            ;~  pfix  (just 'v')
              ;~  plug
                ;~(pfix dot sym)
                ;~(pfix ace x-loon)
              ==
            ==
          ==
        ==
      ==
    --
=>  |%
    ++  x-deed  ~+
      =+  vas=vast
      =+  pay=/.~/sys/[(rent %ud stub)]
      ;~(plug wide:vas(bug &, wer pay) x-fuel x-vent)
    ::
    ++  x-mode  ~+
      ;~  pose
        (cold %atom pat)
        (cold %pill tar)
      ==
    ::
    ++  x-fuel
      ;~  pose
        ;~  pfix  ;~(plug gap gal)
          %+  stag  ~
          ;~  plug
            x-mode
            (stag %clsg (cook |=(a=(list gene) (flop a)) ~(patl spat:vast |)))
          ==
        ==
      ::
        (easy ~)
      ==
    ::
    ++  x-vent
      ;~  pose
        ;~  pfix  ;~(plug gap gar)
          %+  stag  ~
          ;~  plug
            x-mode
            (stag %clsg (cook |=(a=(list gene) (flop a)) ~(patl spat:vast |)))
          ==
        ==
      ::
        (easy ~)
      ==
    --
=+  wad=*(map term vase)
=>  |%
    ++  scan
      |=  cad=@ta  ~|  %scan  ^-  deed
      (rash cad x-deed)
    ::
    ++  swan
      |=  yos=shoe  ^-  tank
      ?-  -.yos
        %bean  (show %q p.yos)
        %lose  (show %t p.yos)
        %mean  $:p.yos
        %pray  (show %h p.yos)
        %spot  (show %o p.yos)
      == 
    ::
    ++  wash
      |=  [[tab=@ edg=@] tac=tank]  ^-  wall
      (~(win re tac) tab edg) 
    --
.
