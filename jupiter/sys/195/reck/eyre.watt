!:
::          %eyre, security manager.   This file is in the public domain.
::
:-  %eyre
^-  dock
|=  [now=time wha=@ta]
%^    hull
    (iris now)
  wha
^-  bead
|=  [now=time wha=@ta]
:-  ^-  lime
    :-  %all
    :~  :^    %rod
            %abel
          :-  [~ ~]
          :-  [%unix %term ~]
          |=  hap=*  ^-  (unit)
          ?>  ?=([p=@ta q=@ta ~] hap)
          :+  ~  %gold
          :~  %unix
              %term
              ~(rent co ~ %p (need (clan %p p.hap)))
              ~(rent co ~ %ud (need (clan %ud q.hap)))
          ==
        |=  [seq=@ud muz=* cax=bill] 
        [%run %pine -.muz +.muz q.cax]
    ::
        :^    %rod
            %boaz
          :-  [~ ~]
          :-  [%bach %pout ~]
          |=  hap=*  ^-  (unit)
          ?>  ?=([p=@ta ~] hap)
          [~ (need (clan %p p.hap))]
        |=  [seq=@ud muz=* cax=bill]
        [%run %pout muz q.cax]
    ==
^-  vane
=>  ..$
=>  |%
    ++  game
      $:  gem=(map plot chum)                           ::  hashed passcodes
          liv=(map plot (list path))                    ::  live sessions
          rev=(map path plot)                           ::  identities
      == 
    ++  move                                            ::  application event
      $%  [%pine p=?(%gold %iron %lead) q=path r=card]  ::  input detected
          [%pout p=plot q=(unit path) r=gift]           ::  output generated
      ==
    --
=+  sys=*game
|%
++  peek  |=([cam=lens hap=path] ~)
++  poke  
  |=  [cam=lens man=*] 
  ^-  [p=lime q=vane]
  =+  muv=((hard move) man)
  ?-    -.muv
      %pine
    =+  ^=  yex  ^-  [p=plot q=game]
        =+  vep=(~(get by rev.sys) q.muv)
        ?^  vep  [u.vep sys]
        =+  bog=(shaf %bogus when:cam)
        [bog sys(rev (~(put by rev.sys) q.muv bog))]
    :-  [%say %pi [%pine ~(rent co ~ %p p.yex) ~] [q.muv r.muv]]
    +>.$(sys q.yex)
  ::
      %pout
    :-  [%say %yo %g r.muv]
    +>.$
  ==
--
